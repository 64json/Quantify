{"version":3,"sources":["quantify.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","DerivedUnit","_$","$","extend","_this","this","unitClasses","addUnitClass","Unit","type","TYPE","symbol","SYMBOL","hasOwnProperty","getUnitClass","getDerivedQuantities","quantities","quantityName","unitClass","Object","keys","BASE","name","types","UNITLESS","getUnitClasses","q","quantity","getStandardUnitClass","QUANTITY","PARENT","../unit/derived_unit","2","3","setupMain","./setup_main","4","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","err","Array","isArray","TypeError","Server","app","$input","config","handlers","edit","removeClass","mathField","MQ","MathField","$equal","click","unitless","refineLaTeX","latex","combinations","search","remove","MAX_SHOWN","every","combination","renderCombination","addClass","console","error","keyup","event","keyCode","factor","powers","derivedQuantities","baseQuantities","Math","pow","getLaTeX","$templateResultContainer","$resultContainer","clone","$answer","find","text","staticMath","StaticMath","insertBefore","$templateSelectorWrapper","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","_step$value","$selectorWrapper","$selected","$ul","$li","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","power","_unitClass","return","append","_iterator","mulSymbols","divSymbols","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","abs","toExponential","toPrecision","join","../../app","../../server","5","RSVP","DOM","App","on","reason","assert","register","window","main","./app","./app/constructor","./dom","./server","./unit","rsvp","6","mulPairs","divPairs","mulClasses","divClasses","queue","forEach","mulPair","cls","inverse","divPair","shift","MULS","mulClass","DIVS","divClass","../app/index","7","refinedTypes","8","unitSymbol","9","getMulAndDivClasses","identifyUnit","getUnitless","./get_mul_and_div_classes","./get_unitless","./identify_unit","./refine_latex","./search","10","replace","replaced","infiniteReplace","match","toLowerCase","JSON","stringify","content","dst","parse","sign","value1","value2","Number","MDUnitlesses","unitless1","unitless2","result","PMUnitlesses","sign1","sign2","isNaN","_latex$split","split","_latex$split2","str","src","11","_classCallCheck","instance","Constructor","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","Combination","lastQuantity","countCalculation","arguments","calculateCount","count","_type","new_","_type2","MAX_COMBINATION","countDerivedUnits","start","create","plain","cs","c","../app","12","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","constructor","setPrototypeOf","__proto__","BaseUnit","base","parentSymbol","ParentUnit","_ParentUnit","getPrototypeOf","NAME","13","muls","divs","_Server$getMulAndDivC","concat","../server","14","./base_unit","./derived_unit","./register","15","../derived_unit","16","../base_unit","17","18","19","20","21","22","23","24","mass","time","angle","current","temp","matter","intensity","storage","energy","pascal","Newton","hertz","watt","coulomb","volt","farad","ohm","siemens","weber","tesla","henry","lux","volume","area","./Newton","./angle","./area","./coulomb","./current","./energy","./farad","./henry","./hertz","./intensity","./length","./lux","./mass","./matter","./ohm","./pascal","./siemens","./storage","./temp","./tesla","./time","./volt","./volume","./watt","./weber","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queueIndex","drainQueue","timeout","len","run","Item","array","noop","process","nextTick","args","apply","title","browser","env","argv","version","versions","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","dir","umask","42","global","factory","define","amd","indexOf","callbacks","callback","callbacksFor","object","_promiseCallbacks","configure","objectOrFunction","x","isFunction","isMaybeThenable","F","scheduleFlush","entry","payload","guid","id","childGuid","childId","stack","instrument","eventName","promise","child","_guidKey","_id","detail","_result","label","_label","timeStamp","now","resolve$1","resolve","withOwnPromise","getThen","then","GET_THEN_ERROR","tryThen","fulfillmentHandler","rejectionHandler","handleForeignThenable","thenable","async","sealed","fulfill","reject","handleOwnThenable","_state","FULFILLED","REJECTED","_onError","subscribe","handleMaybeThenable","maybeThenable","then$$","publishRejection","publish","PENDING","_subscribers","parent","onFulfillment","onRejection","subscribers","settled","invokeCallback","ErrorObject","tryCatch","TRY_CATCH_ERROR","hasCallback","succeeded","failed","initializePromise","resolver","resolved","_arguments","state","makeSettledResult","position","Enumerator","input","abortOnReject","_instanceConstructor","_abortOnReject","_validateInput","_input","_remaining","_init","_enumerate","_validationError","all","entries","race","reject$1","needsResolver","needsNew","Promise","counter","Result","getThen$1","obj","ERROR","tryApply","makeObject","_","argumentNames","_name","arrayResult","wrapThenable","_then","onFulFillment","denodeify","nodeFunc","options","fn","promiseInput","arg","needsPromiseInput","GET_THEN_ERROR$1","p","val","handlePromiseInput","handleValueInput","all$1","AllSettled","_superConstructor","allSettled","race$1","PromiseHash","hash","HashSettled","hashSettled","rethrow","defer","deferred","map","promises","mapFn","values","results","resolve$2","reject$2","resolveAll","resolveSingle","filter","filterFn","filtered","newLength","asap","queue$1","scheduleFlush$1","useNextTick","node","setImmediate","flush","useVertxTimer","vertxNext","useSetTimeout","useMutationObserver","iterations","observer","BrowserMutationObserver","document","createTextNode","observe","characterData","data","useMessageChannel","channel","MessageChannel","port1","onmessage","port2","postMessage","attemptVertex","vertx","runOnLoop","runOnContext","_defineProperty","EventTarget","mixin","allCallbacks","index","splice","trigger","_isArray","toString","Date","getTime","o_create","_eachEntry","_settleMaybeThenable","_settledAt","_makeResult","_willSettleAt","enumerator","guidKey","cast","after","catch","finally","browserWindow","browserGlobal","MutationObserver","WebKitMutationObserver","isNode","isWorker","Uint8ClampedArray","importScripts","platform","_async$filter","cb","_process"],"mappings":"CAOA,QAAUA,GAAEC,EAAEC,EAAEC,GAAG,QAASC,GAAEC,EAAEC,GAAG,IAAIJ,EAAEG,GAAG,CAAC,IAAIJ,EAAEI,GAAG,CAAC,GAAIE,GAAkB,kBAATC,UAAqBA,OAAQ,KAAIF,GAAGC,EAAE,MAAOA,GAAEF,GAAE,EAAI,IAAGI,EAAE,MAAOA,GAAEJ,GAAE,EAAI,IAAIK,GAAE,GAAIC,OAAM,uBAAuBN,EAAE,IAAK,MAAMK,GAAEE,KAAK,mBAAmBF,EAAE,GAAIG,GAAEX,EAAEG,IAAIS,WAAYb,GAAEI,GAAG,GAAGU,KAAKF,EAAEC,QAAQ,SAASd,GAAG,GAAIE,GAAED,EAAEI,GAAG,GAAGL,EAAG,OAAOI,GAAEF,EAAEA,EAAEF,IAAIa,EAAEA,EAAEC,QAAQd,EAAEC,EAAEC,EAAEC,GAAG,MAAOD,GAAEG,GAAGS,QAAkD,IAAI,GAA1CL,GAAkB,kBAATD,UAAqBA,QAAgBH,EAAE,EAAEA,EAAEF,EAAEa,OAAOX,IAAID,EAAED,EAAEE,GAAI,OAAOD,KAAKa,GAAG,SAAST,EAAQU,EAAOJ,GACvd,YAEA,IAAIK,GAAcX,EAAQ,wBAEtBY,EAAKC,EACLC,EAASF,EAAGE,MAGhBJ,GAAOJ,QAAU,WACf,GAAIS,GAAQC,IAEZA,MAAKC,eAELD,KAAKE,aAAe,SAAUC,GAC5B,GAAIC,GAAOD,EAAKE,KACZC,EAASH,EAAKI,MACbR,GAAME,YAAYO,eAAeJ,KACpCL,EAAME,YAAYG,OAEpBL,EAAME,YAAYG,GAAME,GAAUH,GAGpCH,KAAKS,aAAe,SAAUL,EAAME,GAClC,MAAOP,GAAME,YAAYG,GAAME,IAGjCN,KAAKU,qBAAuB,WAC1B,GAAIC,KACJ,KAAK,GAAIC,KAAgBb,GAAME,YAAa,CAC1C,GAAIA,GAAcF,EAAME,YAAYW,GAChCC,EAAYZ,EAAYa,OAAOC,KAAKd,GAAa,GACjDY,GAAUG,OACdL,EAAWC,IACTK,KAAML,EACNM,MAAOL,EAAUM,SAASD,QAG9B,MAAOP,IAGTX,KAAKoB,eAAiB,SAAUC,GAC9B,GAAIA,EAAG,MAAOtB,GAAME,YAAYoB,EAChC,IAAIpB,KACJ,KAAK,GAAIqB,KAAYvB,GAAME,YACzBH,GAAO,EAAMG,EAAaF,EAAME,YAAYqB,GAE9C,OAAOrB,IAGTD,KAAKuB,qBAAuB,SAAUD,GACpC,GAAIrB,GAAcF,EAAME,YAAYqB,EACpC,KAAK,GAAIhB,KAAUL,GAAa,CAC9B,GAAIY,GAAYZ,EAAYK,EAC5B,IAA0B,GAAtBO,EAAUW,SAAe,CAC3B,IAAKX,EAAUG,KACb,KAAOH,EAAUY,SAAW9B,GAC1BkB,EAAYA,EAAUY,MAG1B,OAAOZ,IAGX,MAAOZ,GAAYa,OAAOC,KAAKd,GAAa,QAI7CyB,uBAAuB,KAAKC,GAAG,SAAS3C,EAAQU,EAAOJ,GAC1D,YAEAI,GAAOJ,gBAEDsC,GAAG,SAAS5C,EAAQU,EAAOJ,GACjC,YAEA,IAAIuC,GAAY7C,EAAQ,eAExBU,GAAOJ,SACLuC,UAAWA,KAGVC,eAAe,IAAIC,GAAG,SAAS/C,EAAQU,EAAOJ,GACjD,YAEA,IAAI0C,GAAiB,WAAc,QAASC,GAAcC,EAAKjD,GAAK,GAAIkD,MAAeC,GAAK,EAAUC,GAAK,EAAWC,EAAKC,MAAW,KAAM,IAAK,GAAiCC,GAA7BC,EAAKP,EAAIQ,OAAOC,cAAmBP,GAAMI,EAAKC,EAAGG,QAAQC,QAAoBV,EAAKW,KAAKN,EAAGO,QAAY9D,GAAKkD,EAAK3C,SAAWP,GAA3DmD,GAAK,IAAoE,MAAOY,GAAOX,GAAK,EAAMC,EAAKU,EAAO,QAAU,KAAWZ,GAAMK,EAAW,QAAGA,EAAW,SAAO,QAAU,GAAIJ,EAAI,KAAMC,IAAQ,MAAOH,GAAQ,MAAO,UAAUD,EAAKjD,GAAK,GAAIgE,MAAMC,QAAQhB,GAAQ,MAAOA,EAAY,IAAIQ,OAAOC,WAAY7B,QAAOoB,GAAQ,MAAOD,GAAcC,EAAKjD,EAAa,MAAM,IAAIkE,WAAU,4DAEllBC,EAASpE,EAAQ,gBACjBqE,EAAMrE,EAAQ,YAElBU,GAAOJ,QAAU,WACf,GAAIgE,GAASzD,EAAE,UACX0D,GACFC,UACEC,KAAM,WACJH,EAAOI,YAAY,mBAIrBC,EAAYC,GAAGC,UAAUP,EAAO,GAAIC,GACpCO,EAASjE,EAAE,SACfiE,GAAOC,MAAM,WACX,KACE,WACE,GAAIC,GAAWZ,EAAOa,YAAYN,EAAUO,SACxCC,EAAef,EAAOgB,OAAOJ,EACjCnE,GAAE,oCAAoCwE,QACtC,IAAIC,GAAY,EAChBH,GAAaI,MAAM,SAAUC,EAAavF,GAExC,MADAwF,GAAkBT,EAAUQ,GACrBvF,EAAI,EAAIqF,IAEjBhB,EAAOoB,SAAS,aAElB,MAAO1B,GACP2B,QAAQC,MAAM5B,GACdM,EAAOoB,SAAS,YAGpBpB,EAAOuB,MAAM,SAAUC,GACA,IAAjBA,EAAMC,SACRjB,EAAOC,UAKb,IAAIU,GAAoB,SAA2BT,EAAUQ,GAK3D,IAAK,GAJDQ,GAAS,EACTC,KAEA9C,GAAQqC,EAAYU,kBAAmBV,EAAYW,gBAC9C1C,EAAK,EAAGA,EAAKN,EAAK3C,OAAQiD,IAAM,CACvC,GAAI9B,GAAawB,EAAKM,EACtB,KAAK,GAAInB,KAAYX,GAAY,CAC/B,GAAIE,GAAYwC,EAAI9B,qBAAqBD,EACzC0D,IAAUI,KAAKC,IAAIxE,EAAUW,SAAUb,EAAWW,IAClD2D,EAAOnC,MAAMjC,EAAWF,EAAWW,MAIvC,GAAI4C,GAAQoB,EAAStB,EAAUgB,EAAQC,GAEnCM,EAA2B1F,EAAE,8BAC7B2F,EAAmBD,EAAyBE,QAC5CC,EAAUF,EAAiBG,KAAK,UACpCH,GAAiB9B,YAAY,YAC7BgC,EAAQE,KAAK1B,EACb,IAAI2B,GAAajC,GAAGkC,WAAWJ,EAAQ,GACvCF,GAAiBO,aAAaR,EAC9B,IAAIS,GAA2BR,EAAiBG,KAAK,8BACjDM,GAA4B,EAC5BC,GAAoB,EACpBC,EAAiB5D,MAErB,KAuDE,IAAK,GAA2C6D,GAtD5CC,EAAQ,WACV,GAAIC,GAActE,EAAeoE,EAAMrD,MAAO,GAC1ClC,EAAYyF,EAAY,GAExBhF,EAAWT,EAAUR,KACrBkG,EAAmBP,EAAyBP,OAChDc,GAAiB7C,YAAY,YAC7B6C,EAAiBZ,KAAK,aAAaC,KAAKtE,EACxC,IAAIkF,GAAYD,EAAiBZ,KAAK,YACtCa,GAAUZ,KAAK/E,EAAUN,OACzB,IAAIkG,GAAMF,EAAiBZ,KAAK,MAC5B1F,EAAcoD,EAAIjC,eAAeE,EACrC,KAAK,GAAIhB,KAAUL,GAAa,CAC9B,GAAIyG,GAAM7G,EAAE,OAASS,EAAS,QAC9BoG,GAAI3C,MAAM,WACR,GAAIzD,GAAST,EAAEG,MAAM4F,OACjBe,GAA6B,EAC7BC,GAAqB,EACrBC,EAAkBtE,MAEtB,KACE,IAAK,GAA4CuE,GAAxCC,EAAa9B,EAAOvC,OAAOC,cAAuBgE,GAA8BG,EAASC,EAAWnE,QAAQC,MAAO8D,GAA6B,EAAM,CAC7J,GAAIK,GAAQF,EAAO/D,MAEfkE,EAAahH,EAAYK,EACzB0G,GAAM,GAAG3G,MAAQiB,IACnB0D,GAAUI,KAAKC,IAAI2B,EAAM,GAAGxF,SAAUwF,EAAM,IAC5CA,EAAM,GAAKC,EACXjC,GAAUI,KAAKC,IAAI2B,EAAM,GAAGxF,SAAUwF,EAAM,MAGhD,MAAOhE,GACP4D,GAAqB,EACrBC,EAAkB7D,EAClB,QACA,KACO2D,GAA8BI,EAAWG,QAC5CH,EAAWG,SAEb,QACA,GAAIN,EACF,KAAMC,IAKZ,GAAI3C,GAAQoB,EAAStB,EAAUgB,EAAQC,EACvCY,GAAW3B,MAAMA,KAEnBuC,EAAIU,OAAOT,GAEbH,EAAiBR,aAAaC,IAGvBoB,EAAYnC,EAAOvC,OAAOC,cAAsBsD,GAA6BG,EAAQgB,EAAUxE,QAAQC,MAAOoD,GAA4B,EACjJI,IAEF,MAAOrD,GACPkD,GAAoB,EACpBC,EAAiBnD,EACjB,QACA,KACOiD,GAA6BmB,EAAUF,QAC1CE,EAAUF,SAEZ,QACA,GAAIhB,EACF,KAAMC,MAMVb,EAAW,SAAkBtB,EAAUgB,EAAQC,GACjD,GAAIoC,MACAC,KACAC,GAA6B,EAC7BC,GAAqB,EACrBC,EAAkBlF,MAEtB,KACE,IAAK,GAA4CmF,GAAxCC,EAAa1C,EAAOvC,OAAOC,cAAuB4E,GAA8BG,EAASC,EAAW/E,QAAQC,MAAO0E,GAA6B,EAAM,CAC7J,GAAIP,GAAQU,EAAO3E,KAEfiE,GAAM,GAAK,EACTA,EAAM,GAAK,EACbK,EAAWvE,KAAKkE,EAAM,GAAGzG,OAAS,IAAMyG,EAAM,IAE9CK,EAAWvE,KAAKkE,EAAM,GAAGzG,QAGvByG,EAAM,IAAK,EACbM,EAAWxE,KAAKkE,EAAM,GAAGzG,OAAS,KAAOyG,EAAM,IAE/CM,EAAWxE,KAAKkE,EAAM,GAAGzG,SAI/B,MAAOyC,GACPwE,GAAqB,EACrBC,EAAkBzE,EAClB,QACA,KACOuE,GAA8BI,EAAWT,QAC5CS,EAAWT,SAEb,QACA,GAAIM,EACF,KAAMC,IAKZ,GAAI1E,GAAQiB,EAAS1C,SAAW0D,CAE9BjC,GADEqC,KAAKwC,IAAI7E,GAAS,KAAOqC,KAAKwC,IAAI7E,GAAS,KACrCA,EAAM8E,cAAc,GAEpB9E,EAAM+E,YAAY,EAE5B,IAAI5D,GAAQnB,EAAQ,MAAQsE,EAAWU,KAAK,UAQ5C,OAPIT,GAAW9H,SAEX0E,GADEoD,EAAW9H,OAAS,EACb,OAAS8H,EAAWS,KAAK,WAAa,IAEtC,MAAQT,EAAW,IAGzBpD,KAGN8D,YAAY,EAAEC,eAAe,IAAIC,GAAG,SAASlJ,EAAQU,EAAOJ,GAC/D,YAEA,IAAI6I,GAAOnJ,EAAQ,QACfoJ,EAAMpJ,EAAQ,SAEdqE,GADSrE,EAAQ,YACXA,EAAQ,UACdqJ,EAAMrJ,EAAQ,qBACdmB,EAAOnB,EAAQ,UACfY,EAAKC,EACLC,EAASF,EAAGE,MAIhBqI,GAAKG,GAAG,QAAS,SAAUC,GACzB5D,QAAQ6D,QAAO,EAAOD,KAGxBzI,GAAO,EAAMuD,EAAK,GAAIgF,IAEtBlI,EAAKsI,WAEL3I,GAAO,EAAM4I,QACXC,KAAMP,EAAIvG,cAGT+G,QAAQ,EAAEC,oBAAoB,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,GAAGC,KAAO,KAAKC,GAAG,SAASlK,EAAQU,EAAOJ,GAC7G,YAEA,IAAI+D,GAAMrE,EAAQ,eAElBU,GAAOJ,QAAU,SAAU6J,EAAUC,GACnC,GAAIC,MACAC,KAEAC,IACJJ,GAASK,QAAQ,SAAUC,GACzB,GAAIrJ,GAAOqJ,EAAQ,GACfnJ,EAASmJ,EAAQ,EACrBF,GAAMzG,MACJ4G,IAAKrG,EAAI5C,aAAaL,EAAME,GAC5BqJ,SAAS,MAGbP,EAASI,QAAQ,SAAUI,GACzB,GAAIxJ,GAAOwJ,EAAQ,GACftJ,EAASsJ,EAAQ,EACrBL,GAAMzG,MACJ4G,IAAKrG,EAAI5C,aAAaL,EAAME,GAC5BqJ,SAAS,KAwBb,KApBA,GAAItD,GAAQ,WACV,GAAI7H,GAAI+K,EAAMM,OACVrL,GAAEkL,IAAI1I,MACPxC,EAAEmL,QAAUL,EAAaD,GAAYvG,KAAKtE,EAAEkL,MAE7ClL,EAAEkL,IAAII,KAAKN,QAAQ,SAAUO,GAC3BR,EAAMzG,MACJ4G,IAAKK,EACLJ,QAASnL,EAAEmL,YAGfnL,EAAEkL,IAAIM,KAAKR,QAAQ,SAAUS,GAC3BV,EAAMzG,MACJ4G,IAAKO,EACLN,SAAUnL,EAAEmL,cAMbJ,EAAM/J,OAAS,GACpB6G,GAGF,QAASgD,WAAYA,EAAYC,WAAYA,MAG5CY,eAAe,IAAIC,GAAG,SAASnL,EAAQU,EAAOJ,GACjD,YAEAI,GAAOJ,QAAU,SAAU+J,EAAYC,GACrC,GAAIhI,GAAW,EACXJ,IACJmI,GAAWG,QAAQ,SAAUO,GAC3BzI,GAAYyI,EAASvI,SACjBN,EAAMV,eAAeuJ,EAAS1J,MAChCa,EAAM6I,EAAS1J,QAEfa,EAAM6I,EAAS1J,MAAQ,IAG3BiJ,EAAWE,QAAQ,SAAUS,GAC3B3I,GAAY2I,EAASzI,SACjBN,EAAMV,eAAeyJ,EAAS5J,MAChCa,EAAM+I,EAAS5J,QAEfa,EAAM+I,EAAS5J,OAAQ,GAG3B,IAAI+J,KACJ,KAAK,GAAIhK,KAAQc,GAAO,CACtB,GAAIxC,GAAIwC,EAAMd,EACL,IAAL1B,IAAQ0L,EAAahK,GAAQ1B,GAGnC,OAASwC,MAAOA,EAAOI,SAAUA,SAG7B+I,GAAG,SAASrL,EAAQU,EAAOJ,GACjC,YAEA,IAAI+D,GAAMrE,EAAQ,eAElBU,GAAOJ,QAAU,SAAUgB,GACzB,GAAIL,GAAcoD,EAAIjC,gBACtB,KAAK,GAAIkJ,KAAcrK,GAAa,CAClC,GAAIY,GAAYZ,EAAYqK,EAC5B,IAAIzJ,EAAUN,QAAUD,EAAQ,MAAOO,OAIxCqJ,eAAe,IAAIK,GAAG,SAASvL,EAAQU,EAAOJ,GACjD,YAEA,IAAIkL,GAAsBxL,EAAQ,6BAC9ByL,EAAezL,EAAQ,mBACvB0L,EAAc1L,EAAQ,kBACtBiF,EAAcjF,EAAQ,kBACtBoF,EAASpF,EAAQ,WAErBU,GAAOJ,SACLkL,oBAAqBA,EACrBC,aAAcA,EACdC,YAAaA,EACbzG,YAAaA,EACbG,OAAQA,KAGPuG,4BAA4B,EAAEC,iBAAiB,EAAEC,kBAAkB,EAAEC,iBAAiB,GAAGC,WAAW,KAAKC,IAAI,SAAShM,EAAQU,EAAOJ,GACxI,YAEA,IAAI0C,GAAiB,WAAc,QAASC,GAAcC,EAAKjD,GAAK,GAAIkD,MAAeC,GAAK,EAAUC,GAAK,EAAWC,EAAKC,MAAW,KAAM,IAAK,GAAiCC,GAA7BC,EAAKP,EAAIQ,OAAOC,cAAmBP,GAAMI,EAAKC,EAAGG,QAAQC,QAAoBV,EAAKW,KAAKN,EAAGO,QAAY9D,GAAKkD,EAAK3C,SAAWP,GAA3DmD,GAAK,IAAoE,MAAOY,GAAOX,GAAK,EAAMC,EAAKU,EAAO,QAAU,KAAWZ,GAAMK,EAAW,QAAGA,EAAW,SAAO,QAAU,GAAIJ,EAAI,KAAMC,IAAQ,MAAOH,GAAQ,MAAO,UAAUD,EAAKjD,GAAK,GAAIgE,MAAMC,QAAQhB,GAAQ,MAAOA,EAAY,IAAIQ,OAAOC,WAAY7B,QAAOoB,GAAQ,MAAOD,GAAcC,EAAKjD,EAAa,MAAM,IAAIkE,WAAU,4DAEllBE,EAAMrE,EAAQ,eAElBU,GAAOJ,QAAU,SAAU4E,GACzB,GAAIjE,GAAcoD,EAAIjC,gBACtB8C,GAAQA,EAAM+G,QAAQ,OAAQ,IAC9B/G,EAAQA,EAAM+G,QAAQ,YAAa,KACnC/G,EAAQA,EAAM+G,QAAQ,aAAc,IAEpC,KADA,GAAIC,GAAW,KACRA,GAAYhH,GACjBA,EAAQgH,GAAYhH,EACpBgH,EAAWhH,EACXgH,EAAWC,EAAgBD,EAAU,kBAAmB,WACxDA,EAAWC,EAAgBD,EAAU,gBAAiB,SACtDA,EAAWC,EAAgBD,EAAU,8BAA+B,YA+FtE,IA7FAhH,EAAQA,EAAM+G,QAAQ,UAAW,KACjC/G,EAAQA,EAAM+G,QAAQ,UAAW,IACjC/G,EAAQA,EAAM+G,QAAQ,mDAAoD,SAAUG,EAAO9K,GACzF,MAA4B,KAAxBA,EAAO+K,cAA6B/K,EACjC,KAAOgL,KAAKC,UAAUtL,EAAYK,GAAQa,UAAY,OAE/D+C,EAAQiH,EAAgBjH,EAAO,4BAA6B,SAAUkH,EAAOI,GAC3E,GAAIN,EAEJA,GAAW,IAiCX,KA/BA,GAAI7E,GAAQ,WACVmF,EAAUN,GAAYM,EACtBN,EAAWM,EACXN,EAAWA,EAASD,QAAQ,6FAA8F,SAAUG,EAAOrI,EAAOiE,GAChJ,MAAO5B,MAAKC,IAAItC,EAAOiE,KAEzBkE,EAAWA,EAASD,QAAQ,qFAAsF,SAAUG,EAAOrI,EAAOiE,GACxI,MAAO5B,MAAKC,IAAItC,EAAOiE,IAEzB,IAAIyE,GAAM,SAAaL,EAAOpH,EAAUgD,GACtChD,EAAWsH,KAAKI,MAAM1H,GACtBA,EAAS1C,SAAW8D,KAAKC,IAAIrB,EAAS1C,SAAU0F,EAChD,KAAK,GAAI5G,KAAQ4D,GAAS9C,MACxB8C,EAAS9C,MAAMd,IAAS4G,EACI,GAAxBhD,EAAS9C,MAAMd,UACV4D,GAAS9C,MAAMd,EAG1B,OAAO,KAAOkL,KAAKC,UAAUvH,GAAY,KAE3CkH,GAAWA,EAASD,QAAQ,oEAAqEQ,GACjGP,EAAWA,EAASD,QAAQ,+EAAgF,SAAUG,EAAOO,EAAM3H,EAAUgD,GAM3I,MALY,KAAR2E,IACF3H,EAAWsH,KAAKI,MAAM1H,GACtBA,EAAS1C,WAAY,EACrB0C,EAAWsH,KAAKC,UAAUvH,IAErByH,EAAIL,EAAOpH,EAAUgD,MAIzBkE,GAAYM,GACjBnF,GAIF,KADA6E,EAAW,KACJA,GAAYM,GACjBA,EAAUN,GAAYM,EACtBN,EAAWM,EACXN,EAAWA,EAASD,QAAQ,0FAA2F,SAAUG,EAAOQ,EAAQD,EAAME,GAGpJ,MAFAD,GAASE,OAAOF,GAChBC,EAASC,OAAOD,GACD,KAARF,EAAcC,EAASC,EAASD,EAASC,IAElDX,EAAWA,EAASD,QAAQ,qEAAsE,SAAUG,EAAOrI,EAAO4I,EAAM3H,GAC9H,MAAO+H,IAAe7K,SAAWI,SAAUwK,OAAO/I,IAAU4I,EAAML,KAAKI,MAAM1H,MAE/EkH,EAAWA,EAASD,QAAQ,yEAA0E,SAAUG,EAAOpH,EAAU2H,EAAM5I,GACrI,MAAOgJ,GAAaT,KAAKI,MAAM1H,GAAW2H,GAAQzK,SAAWI,SAAUwK,OAAO/I,OAEhFmI,EAAWA,EAASD,QAAQ,oDAAqD,SAAUG,EAAOY,EAAWL,EAAMM,GACjH,MAAOF,GAAaT,KAAKI,MAAMM,GAAYL,EAAML,KAAKI,MAAMO,KAKhE,KADAf,EAAW,KACJA,GAAYM,GACjBA,EAAUN,GAAYM,EACtBN,EAAWM,EACXN,EAAWA,EAASD,QAAQ,8FAA+F,SAAUG,EAAOQ,EAAQD,EAAME,GACxJD,EAASE,OAAOF,GAChBC,EAASC,OAAOD,EAChB,IAAIK,GAAiB,KAARP,EAAcC,EAASC,EAASD,EAASC,CACtD,QAAQK,GAAU,EAAI,IAAM,IAAMA,IAEpChB,EAAWA,EAASD,QAAQ,wEAAyE,SAAUG,EAAOrI,EAAO4I,EAAM3H,GACjI,MAAOmI,IAAejL,SAAWI,SAAUwK,OAAO/I,IAAU4I,EAAML,KAAKI,MAAM1H,MAE/EkH,EAAWA,EAASD,QAAQ,0EAA2E,SAAUG,EAAOgB,EAAOpI,EAAUqI,EAAOtJ,GAG9I,MAFAiB,GAAWsH,KAAKI,MAAM1H,GACtBA,EAAS1C,UAAqB,KAAT8K,GAAe,EAAK,EAClCD,EAAanI,EAAUqI,GAASnL,SAAWI,SAAUwK,OAAO/I,OAErEmI,EAAWA,EAASD,QAAQ,yDAA0D,SAAUG,EAAOgB,EAAOJ,EAAWK,EAAOJ,GAG9H,MAFAD,GAAYV,KAAKI,MAAMM,GACvBA,EAAU1K,UAAqB,KAAT8K,GAAe,EAAK,EACnCD,EAAaH,EAAWK,EAAOf,KAAKI,MAAMO,KAGrD,OAAOT,KAGLc,MAAMpI,GAAQ,CAChB,GAAIqI,GAAerI,EAAMsI,MAAM,MAC3BC,EAAgBzK,EAAeuK,EAAc,GAC7CZ,EAAOc,EAAc,GACrBzI,EAAWyI,EAAc,EAI7B,OAFAzI,GAAWsH,KAAKI,MAAM1H,GACV,KAAR2H,IAAa3H,EAAS1C,WAAY,GAC/B0C,EAET,OAAS9C,SAAWI,SAAUwK,OAAO5H,IAGvC,IAAI6H,GAAe,SAAsBC,EAAWL,EAAMM,GAC5C,KAARN,EACFK,EAAU1K,UAAY2K,EAAU3K,SAEhC0K,EAAU1K,UAAY2K,EAAU3K,QAElC,KAAK,GAAIlB,KAAQ6L,GAAU/K,MACpB8K,EAAU9K,MAAMV,eAAeJ,GAGlC4L,EAAU9K,MAAMd,KAAkB,KAARuL,GAAc,EAAK,GAAKM,EAAU/K,MAAMd,GAFlE4L,EAAU9K,MAAMd,IAAiB,KAARuL,GAAc,EAAK,GAAKM,EAAU/K,MAAMd,GAItC,GAAzB4L,EAAU9K,MAAMd,UACX4L,GAAU9K,MAAMd,EAG3B,OAAO,KAAOkL,KAAKC,UAAUS,GAAa,MAGxCG,EAAe,SAAsBH,EAAWL,EAAMM,GACxD,GAAInL,OAAOC,KAAKiL,EAAU9K,OAAO1B,QAAUsB,OAAOC,KAAKkL,EAAU/K,OAAO1B,OAAQ,MAAO,KACvF,KAAK,GAAIY,KAAQ6L,GAAU/K,MACzB,GAAI+K,EAAU/K,MAAMd,IAAS4L,EAAU9K,MAAMd,GAAO,MAAO,KAO7D,OALY,KAARuL,EACFK,EAAU1K,UAAY2K,EAAU3K,SAEhC0K,EAAU1K,UAAY2K,EAAU3K,SAE3B,MAAQgK,KAAKC,UAAUS,GAAa,MAGzCb,EAAkB,SAAyBuB,EAAKC,EAAKlB,GAEvD,IADA,GAAIP,GAAW,KACRA,GAAYwB,GACjBA,EAAMxB,GAAYwB,EAClBxB,EAAWwB,EAAIzB,QAAQ0B,EAAKlB,EAE9B,OAAOiB,MAGNxC,eAAe,IAAI0C,IAAI,SAAS5N,EAAQU,EAAOJ,GAClD,YAIA,SAASuN,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAI5J,WAAU,qCAFhH,GAAI6J,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIlO,GAAI,EAAGA,EAAIkO,EAAM3N,OAAQP,IAAK,CAAE,GAAImO,GAAaD,EAAMlO,EAAImO,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMzM,OAAO0M,eAAeN,EAAQE,EAAWK,IAAKL,IAAiB,MAAO,UAAUL,EAAaW,EAAYC,GAAiJ,MAA9HD,IAAYT,EAAiBF,EAAYa,UAAWF,GAAiBC,GAAaV,EAAiBF,EAAaY,GAAqBZ,MAI5hB1J,EAAMrE,EAAQ,UAEdY,EAAKC,EACLC,EAASF,EAAGE,OAEZ+N,EAAc,WAChB,QAASA,GAAY3I,EAAmBC,EAAgB2I,GACtD,GAAIC,KAAmBC,UAAUxO,OAAS,GAAsB+C,SAAjByL,UAAU,KAAmBA,UAAU,EAEtFnB,GAAgB7M,KAAM6N,GAEtB7N,KAAKkF,kBAAoBA,EACzBlF,KAAKmF,eAAiBA,EACtBnF,KAAK8N,aAAeA,EAChBC,GAAkB/N,KAAKiO,iBAuD7B,MApDAjB,GAAaa,IACXJ,IAAK,iBACL1K,MAAO,WACL,GAAImL,GAAQ,CACZ,KAAK,GAAI9N,KAAQJ,MAAKkF,kBACpBgJ,GAAS9I,KAAKwC,IAAI5H,KAAKkF,kBAAkB9E,GAE3C,KAAK,GAAI+N,KAASnO,MAAKmF,eACrB+I,GAAS9I,KAAKwC,IAAI5H,KAAKmF,eAAegJ,GAExCnO,MAAKkO,MAAQA,KAGfT,IAAK,oBACL1K,MAAO,WACL,GAAImL,GAAQ,CACZ,KAAK,GAAI9N,KAAQJ,MAAKkF,kBACpBgJ,GAAS9I,KAAKwC,IAAI5H,KAAKkF,kBAAkB9E,GAE3C,OAAO8N,MAGTT,IAAK,SACL1K,MAAO,SAAgBzB,EAAUqI,GAC/B,GAAI3E,GAAS2E,GAAU,EAAK,EACxByE,EAAO,GAAIP,GAAY/N,GAAO,KAAUE,KAAKkF,mBAAoBpF,GAAO,KAAUE,KAAKmF,gBAAiB7D,EAASL,OAAM,IAEvHb,EAAOkB,EAASL,IACpB,IAAKmN,EAAKlJ,kBAAkB1E,eAAeJ,GAEpC,CACL,GAAIgO,EAAKlJ,kBAAkB9E,GAAQ4E,EAAS,EAAG,MAAO,KACtDoJ,GAAKlJ,kBAAkB9E,IAAS4E,MAHhCoJ,GAAKlJ,kBAAkB9E,GAAQ4E,CAMjC,IAAI9D,GAAQI,EAASJ,KACrB,KAAK,GAAImN,KAAUnN,GACZkN,EAAKjJ,eAAe3E,eAAe6N,GAGtCD,EAAKjJ,eAAekJ,IAAWrJ,EAAS9D,EAAMmN,GAF9CD,EAAKjJ,eAAekJ,IAAWrJ,EAAS9D,EAAMmN,GAIb,GAA/BD,EAAKjJ,eAAekJ,UACfD,GAAKjJ,eAAekJ,EAK/B,OADAD,GAAKH,iBACEG,MAIJP,IAGTnO,GAAOJ,QAAU,SAAU0E,GAKzB,IAAK,GAJDsK,GAAkB,GAClB/E,GAAS,GAAIsE,MAAgB7J,EAAS9C,MAAO,OAC7CP,EAAa0C,EAAI3C,uBACjByD,KACKlF,EAAI,EAAGA,EAAIqP,EAAiBrP,IACnCkF,EAAarB,QAEf,MAAOyG,EAAM/J,OAAS,GAAG,CACvB,GAAIhB,GAAI+K,EAAMM,OACd,IAAS,MAALrL,IACAA,EAAE0P,MAAQI,GACZnK,EAAa3F,EAAE0P,OAAOpL,KAAKtE,GAEzBA,EAAE+P,oBAAsB,GAAG,CAC7B,GAAIC,GAA0B,MAAlBhQ,EAAEsP,YACd,KAAK,GAAIlN,KAAgBD,GAEvB,GADIC,GAAgBpC,EAAEsP,eAAcU,GAAQ,GACvCA,EAAL,CACA,GAAIlN,GAAWX,EAAWC,EAC1B2I,GAAMzG,KAAKtE,EAAEiQ,OAAOnN,GAAU,IAC9BiI,EAAMzG,KAAKtE,EAAEiQ,OAAOnN,GAAU,MAIpC,GAAIoN,MACAzI,GAA4B,EAC5BC,GAAoB,EACpBC,EAAiB5D,MAErB,KACE,IAAK,GAAiD6D,GAA7CgB,EAAYjD,EAAazB,OAAOC,cAAsBsD,GAA6BG,EAAQgB,EAAUxE,QAAQC,MAAOoD,GAA4B,EAAM,CAC7J,GAAI0I,GAAKvI,EAAMrD,MACX4D,GAA6B,EAC7BC,GAAqB,EACrBC,EAAkBtE,MAEtB,KACE,IAAK,GAAwCuE,GAApCC,EAAa4H,EAAGjM,OAAOC,cAAuBgE,GAA8BG,EAASC,EAAWnE,QAAQC,MAAO8D,GAA6B,EAAM,CACzJ,GAAIiI,GAAI9H,EAAO/D,KAEf2L,GAAM5L,KAAK8L,IAEb,MAAO5L,GACP4D,GAAqB,EACrBC,EAAkB7D,EAClB,QACA,KACO2D,GAA8BI,EAAWG,QAC5CH,EAAWG,SAEb,QACA,GAAIN,EACF,KAAMC,MAKd,MAAO7D,GACPkD,GAAoB,EACpBC,EAAiBnD,EACjB,QACA,KACOiD,GAA6BmB,EAAUF,QAC1CE,EAAUF,SAEZ,QACA,GAAIhB,EACF,KAAMC,IAKZ,MAAOuI,MAGNG,SAAS,IAAIC,IAAI,SAAS9P,EAAQU,EAAOJ,GAC5C,YAEA,SAASyP,GAA2BC,EAAMzP,GAAQ,IAAKyP,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAO1P,GAAyB,gBAATA,IAAqC,kBAATA,GAA8ByP,EAAPzP,EAElO,QAAS2P,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIjM,WAAU,iEAAoEiM,GAAeD,GAASvB,UAAY9M,OAAO2N,OAAOW,GAAcA,EAAWxB,WAAayB,aAAetM,MAAOoM,EAAU9B,YAAY,EAAOE,UAAU,EAAMD,cAAc,KAAe8B,IAAYtO,OAAOwO,eAAiBxO,OAAOwO,eAAeH,EAAUC,GAAcD,EAASI,UAAYH,GAEje,QAASvC,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAI5J,WAAU,qCAEhH,GAAIE,GAAMrE,EAAQ,UAEdwQ,EAAW,QAASA,GAASzM,GAC/B8J,EAAgB7M,KAAMwP,GAEtBxP,KAAK+C,MAAQA,EAGfyM,GAASxO,KAAOwO,EAAS5B,UAAU6B,MAAO,EAC1CD,EAAShO,SAAWgO,EAAS5B,UAAUtM,SAAW,EAElDkO,EAAS/G,SAAW,SAAUrI,EAAMa,EAAMX,GACxC,GAAIgB,GAAW0M,UAAUxO,OAAS,GAAsB+C,SAAjByL,UAAU,GAAmBA,UAAU,GAAK,EAC/E0B,EAAe1B,UAAUxO,OAAS,GAAsB+C,SAAjByL,UAAU,GAAmBA,UAAU,GAAK,KAEnF2B,EAAaD,EAAerM,EAAI5C,aAAaL,EAAMsP,GAAgBF,CACvElO,IAAYqO,EAAWnO,QAEvB,IAAIrB,GAAO,SAAUyP,GAGnB,QAASzP,GAAK4C,GAGZ,MAFA8J,GAAgB7M,KAAMG,GAEf4O,EAA2B/O,MAAOG,EAAKoP,WAAazO,OAAO+O,eAAe1P,IAAOZ,KAAKS,KAAM+C,IAGrG,MARAmM,GAAU/O,EAAMyP,GAQTzP,GACPwP,EAEFxP,GAAKE,KAAOF,EAAKyN,UAAUxN,KAAOA,EAClCD,EAAK2P,KAAO3P,EAAKyN,UAAU3M,KAAOA,EAClCd,EAAKI,OAASJ,EAAKyN,UAAUtN,OAASA,EACtCH,EAAKqB,SAAWrB,EAAKyN,UAAUtM,SAAWA,EAC1CnB,EAAKgB,UAAaD,SAAWI,SAAUA,GACvCnB,EAAKgB,SAASD,MAAMd,GAAQ,EAE5BiD,EAAInD,aAAaC,IAGnBT,EAAOJ,QAAUkQ,IAEdX,SAAS,IAAIkB,IAAI,SAAS/Q,EAAQU,EAAOJ,GAC5C,YAEA,SAASyP,GAA2BC,EAAMzP,GAAQ,IAAKyP,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAO1P,GAAyB,gBAATA,IAAqC,kBAATA,GAA8ByP,EAAPzP,EAElO,QAAS2P,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIjM,WAAU,iEAAoEiM,GAAeD,GAASvB,UAAY9M,OAAO2N,OAAOW,GAAcA,EAAWxB,WAAayB,aAAetM,MAAOoM,EAAU9B,YAAY,EAAOE,UAAU,EAAMD,cAAc,KAAe8B,IAAYtO,OAAOwO,eAAiBxO,OAAOwO,eAAeH,EAAUC,GAAcD,EAASI,UAAYH,GAEje,QAASvC,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAI5J,WAAU,qCAEhH,GAAIE,GAAMrE,EAAQ,UACdoE,EAASpE,EAAQ,aAEjBW,EAAc,QAASA,GAAYoD,GACrC8J,EAAgB7M,KAAML,GAEtBK,KAAK+C,MAAQA,EAGfpD,GAAYqB,KAAOrB,EAAYiO,UAAU6B,MAAO,EAChD9P,EAAY6B,SAAW7B,EAAYiO,UAAUtM,SAAW,EACxD3B,EAAYmK,KAAOnK,EAAYiO,UAAUoC,QACzCrQ,EAAYqK,KAAOrK,EAAYiO,UAAUqC,QAEzCtQ,EAAY8I,SAAW,SAAUrI,EAAMa,EAAMX,EAAQ6I,EAAUC,GAC7D,GAAI9H,GAAW0M,UAAUxO,OAAS,GAAsB+C,SAAjByL,UAAU,GAAmBA,UAAU,GAAK,EAC/E0B,EAAe1B,UAAUxO,OAAS,GAAsB+C,SAAjByL,UAAU,GAAmBA,UAAU,GAAK,KAEnFkC,EAAwB9M,EAAOoH,oBAAoBrB,EAAUC,GAC7DC,EAAa6G,EAAsB7G,WACnCC,EAAa4G,EAAsB5G,WAEnCqG,EAAaD,EAAerM,EAAI5C,aAAaL,EAAMsP,GAAgB/P,CACvE2B,IAAYqO,EAAWnO,QACvB,IAAIyE,IAA4B,EAC5BC,GAAoB,EACpBC,EAAiB5D,MAErB,KACE,IAAK,GAA+C6D,GAA3CgB,EAAYiC,EAAW3G,OAAOC,cAAsBsD,GAA6BG,EAAQgB,EAAUxE,QAAQC,MAAOoD,GAA4B,EAAM,CAC3J,GAAI8D,GAAW3D,EAAMrD,KACrBzB,IAAYyI,EAASvI,UAEvB,MAAOwB,GACPkD,GAAoB,EACpBC,EAAiBnD,EACjB,QACA,KACOiD,GAA6BmB,EAAUF,QAC1CE,EAAUF,SAEZ,QACA,GAAIhB,EACF,KAAMC,IAKZ,GAAIQ,IAA6B,EAC7BC,GAAqB,EACrBC,EAAkBtE,MAEtB,KACE,IAAK,GAAgDuE,GAA5CC,EAAauC,EAAW5G,OAAOC,cAAuBgE,GAA8BG,EAASC,EAAWnE,QAAQC,MAAO8D,GAA6B,EAAM,CACjK,GAAIsD,GAAWnD,EAAO/D,KACtBzB,IAAY2I,EAASzI,UAEvB,MAAOwB,GACP4D,GAAqB,EACrBC,EAAkB7D,EAClB,QACA,KACO2D,GAA8BI,EAAWG,QAC5CH,EAAWG,SAEb,QACA,GAAIN,EACF,KAAMC,IAKZwC,EAAasG,EAAW7F,KAAKqG,OAAO9G,GACpCC,EAAaqG,EAAW3F,KAAKmG,OAAO7G,EAEpC,IAAInJ,GAAO,SAAUyP,GAGnB,QAASzP,GAAK4C,GAGZ,MAFA8J,GAAgB7M,KAAMG,GAEf4O,EAA2B/O,MAAOG,EAAKoP,WAAazO,OAAO+O,eAAe1P,IAAOZ,KAAKS,KAAM+C,IAGrG,MARAmM,GAAU/O,EAAMyP,GAQTzP,GACPwP,EAEFxP,GAAKE,KAAOF,EAAKyN,UAAUxN,KAAOA,EAClCD,EAAK2P,KAAO3P,EAAKyN,UAAU3M,KAAOA,EAClCd,EAAKI,OAASJ,EAAKyN,UAAUtN,OAASA,EACtCH,EAAK2J,KAAO3J,EAAKyN,UAAUoC,KAAO3G,EAClClJ,EAAK6J,KAAO7J,EAAKyN,UAAUqC,KAAO3G,EAClCnJ,EAAKqB,SAAWrB,EAAKyN,UAAUtM,SAAWA,EAC1CnB,EAAKgB,SAAWiC,EAAOsH,YAAYrB,EAAYC,GAC/CnJ,EAAKgB,SAASG,SAAWA,EACzBnB,EAAKsB,OAASkO,EAEdtM,EAAInD,aAAaC,IAGnBT,EAAOJ,QAAUK,IAEdkP,SAAS,EAAEuB,YAAY,IAAIC,IAAI,SAASrR,EAAQU,EAAOJ,GAC1D,YAEA,IAAIkQ,GAAWxQ,EAAQ,eACnBW,EAAcX,EAAQ,kBACtByJ,EAAWzJ,EAAQ,aAEvBU,GAAOJ,SACLkQ,SAAUA,EACV7P,YAAaA,EACb8I,SAAUA,KAGT6H,cAAc,GAAGC,iBAAiB,GAAGC,aAAa,KAAKC,IAAI,SAASzR,EAAQU,EAAOJ,GACtF,YAEA,IAAIK,GAAcX,EAAQ,mBAEtBoB,EAAO,QAEXV,GAAOJ,QAAU,WACfK,EAAY8I,SAASrI,EAAM,UAAW,MAAO,OAAQ,OAAQ,SAAU,QAAS,OAAQ,MAAO,OAAQ,OACvGT,EAAY8I,SAASrI,EAAM,eAAgB,WAAc,IAAK,KAC9DT,EAAY8I,SAASrI,EAAM,eAAgB,WAAc,IAAK,KAC9DT,EAAY8I,SAASrI,EAAM,eAAgB,WAAc,IAAK,KAC9DT,EAAY8I,SAASrI,EAAM,gBAAiB,WAAc,KAAM,KAChET,EAAY8I,SAASrI,EAAM,gBAAiB,WAAc,KAAM,KAChET,EAAY8I,SAASrI,EAAM,eAAgB,WAAc,KAAM,QAG9DsQ,kBAAkB,KAAKC,IAAI,SAAS3R,EAAQU,EAAOJ,GACtD,YAEA,IAAIkQ,GAAWxQ,EAAQ,gBAEnBoB,EAAO,OAEXV,GAAOJ,QAAU,WACfkQ,EAAS/G,SAASrI,EAAM,SAAU,GAAI,GACtCoP,EAAS/G,SAASrI,EAAM,SAAU,MAAO,GACzCoP,EAAS/G,SAASrI,EAAM,SAAU,IAAK,QAAS,OAG/CwQ,eAAe,KAAKC,IAAI,SAAS7R,EAAQU,EAAOJ,GACnD,YAEA,IAAIK,GAAcX,EAAQ,mBAEtBoB,EAAO,MAEXV,GAAOJ,QAAU,WACfK,EAAY8I,SAASrI,EAAM,OAAQ,SAAU,SAAU,MAAO,SAAU,SAAW,SACnFT,EAAY8I,SAASrI,EAAM,UAAW,OAAQ,SAAU,MAAO,SAAU,SAAW,QAGnFsQ,kBAAkB,KAAKI,IAAI,SAAS9R,EAAQU,EAAOJ,GACtD,YAEA,IAAIK,GAAcX,EAAQ,mBAEtBoB,EAAO,SAEXV,GAAOJ,QAAU,WACfK,EAAY8I,SAASrI,EAAM,UAAW,MAAO,UAAW,MAAO,OAAQ,UACvET,EAAY8I,SAASrI,EAAM,eAAgB,WAAc,IAAK,KAC9DT,EAAY8I,SAASrI,EAAM,eAAgB,WAAc,IAAK,KAC9DT,EAAY8I,SAASrI,EAAM,eAAgB,WAAc,IAAK,KAC9DT,EAAY8I,SAASrI,EAAM,gBAAiB,WAAc,KAAM,KAChET,EAAY8I,SAASrI,EAAM,gBAAiB,WAAc,KAAM,KAChET,EAAY8I,SAASrI,EAAM,eAAgB,WAAc,KAAM,QAG9DsQ,kBAAkB,KAAKK,IAAI,SAAS/R,EAAQU,EAAOJ,GACtD,YAEA,IAAIkQ,GAAWxQ,EAAQ,gBAEnBoB,EAAO,SAEXV,GAAOJ,QAAU,WACfkQ,EAAS/G,SAASrI,EAAM,SAAU,IAAK,GACvCoP,EAAS/G,SAASrI,EAAM,eAAgB,KAAM,IAAM,KACpDoP,EAAS/G,SAASrI,EAAM,cAAe,KAAM,IAAK,KAClDoP,EAAS/G,SAASrI,EAAM,eAAgB,KAAM,KAAM,KACpDoP,EAAS/G,SAASrI,EAAM,eAAgB,KAAM,KAAM,KACpDoP,EAAS/G,SAASrI,EAAM,cAAe,KAAM,KAAM,KACnDoP,EAAS/G,SAASrI,EAAM,cAAe,KAAM,MAAO,QAGnDwQ,eAAe,KAAKI,IAAI,SAAShS,EAAQU,EAAOJ,GACnD,YAEA,IAAIK,GAAcX,EAAQ,mBAEtBoB,EAAO,QAEXV,GAAOJ,QAAU,WACfK,EAAY8I,SAASrI,EAAM,QAAS,MAAO,OAAQ,OAAQ,SAAU,MAAO,SAAU,QAAS,OAAQ,MAAO,OAAQ,OACtHT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,IAAK,KAC5DT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,IAAK,KAC5DT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,IAAK,KAC5DT,EAAY8I,SAASrI,EAAM,cAAe,WAAc,KAAM,KAC9DT,EAAY8I,SAASrI,EAAM,cAAe,WAAc,KAAM,KAC9DT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,KAAM,KAC7DT,EAAY8I,SAASrI,EAAM,cAAe,cAAiB,QAAU,KACrET,EAAY8I,SAASrI,EAAM,gBAAiB,WAAc,QAAW,YAGpEsQ,kBAAkB,KAAKO,IAAI,SAASjS,EAAQU,EAAOJ,GACtD,YAEA,IAAIK,GAAcX,EAAQ,mBAEtBoB,EAAO,OAEXV,GAAOJ,QAAU,WACfK,EAAY8I,SAASrI,EAAM,QAAS,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,UAAW,MAAO,UAAW,QAAS,OAAQ,OAAQ,SAAU,MAAO,SAAU,OACxLT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,IAAK,KAC5DT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,IAAK,KAC5DT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,IAAK,KAC5DT,EAAY8I,SAASrI,EAAM,cAAe,WAAc,KAAM,KAC9DT,EAAY8I,SAASrI,EAAM,cAAe,WAAc,KAAM,KAC9DT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,KAAM,QAG5DsQ,kBAAkB,KAAKQ,IAAI,SAASlS,EAAQU,EAAOJ,GACtD,YAEA,IAAIK,GAAcX,EAAQ,mBAEtBoB,EAAO,OAEXV,GAAOJ,QAAU,WACfK,EAAY8I,SAASrI,EAAM,QAAS,MAAO,OAAQ,OAAQ,SAAU,MAAO,SAAU,QAAS,OAAQ,MAAO,OAAQ,MAAO,UAAW,MAAO,UAAW,OAC1JT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,IAAK,KAC5DT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,IAAK,KAC5DT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,IAAK,KAC5DT,EAAY8I,SAASrI,EAAM,cAAe,WAAc,KAAM,KAC9DT,EAAY8I,SAASrI,EAAM,cAAe,WAAc,KAAM,KAC9DT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,KAAM,QAG5DsQ,kBAAkB,KAAKS,IAAI,SAASnS,EAAQU,EAAOJ,GACtD,YAEA,IAAIK,GAAcX,EAAQ,mBAEtBoB,EAAO,OAEXV,GAAOJ,QAAU,WACfK,EAAY8I,SAASrI,EAAM,QAAS,UAAY,OAAQ,OACxDT,EAAY8I,SAASrI,EAAM,aAAc,YAAe,IAAK,MAC7DT,EAAY8I,SAASrI,EAAM,aAAc,YAAe,IAAK,MAC7DT,EAAY8I,SAASrI,EAAM,aAAc,YAAe,IAAK,MAC7DT,EAAY8I,SAASrI,EAAM,cAAe,YAAe,KAAM,MAC/DT,EAAY8I,SAASrI,EAAM,cAAe,YAAe,KAAM,MAC/DT,EAAY8I,SAASrI,EAAM,aAAc,YAAe,KAAM,SAG7DsQ,kBAAkB,KAAKU,IAAI,SAASpS,EAAQU,EAAOJ,GACtD,YAEA,IAAIE,GAASR,EAAQ,YACjBqS,EAAOrS,EAAQ,UACfsS,EAAOtS,EAAQ,UACfuS,EAAQvS,EAAQ,WAChBwS,EAAUxS,EAAQ,aAClByS,EAAOzS,EAAQ,UACf0S,EAAS1S,EAAQ,YACjB2S,EAAY3S,EAAQ,eACpB4S,EAAU5S,EAAQ,aAClB6S,EAAS7S,EAAQ,YACjB8S,EAAS9S,EAAQ,YACjB+S,EAAS/S,EAAQ,YACjBgT,EAAQhT,EAAQ,WAChBiT,EAAOjT,EAAQ,UACfkT,EAAUlT,EAAQ,aAClBmT,EAAOnT,EAAQ,UACfoT,EAAQpT,EAAQ,WAChBqT,EAAMrT,EAAQ,SACdsT,EAAUtT,EAAQ,aAClBuT,EAAQvT,EAAQ,WAChBwT,EAAQxT,EAAQ,WAChByT,EAAQzT,EAAQ,WAChB0T,EAAM1T,EAAQ,SACd2T,EAAS3T,EAAQ,YACjB4T,EAAO5T,EAAQ,SAEnBU,GAAOJ,QAAU,WACfE,IACA6R,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,OAGCC,WAAW,GAAGC,UAAU,GAAGC,SAAS,GAAGC,YAAY,GAAGC,YAAY,GAAGC,WAAW,GAAGC,UAAU,GAAGC,UAAU,GAAGC,UAAU,GAAGC,cAAc,GAAGC,WAAW,GAAGC,QAAQ,GAAGC,SAAS,GAAGC,WAAW,GAAGC,QAAQ,GAAGC,WAAW,GAAGC,YAAY,GAAGC,YAAY,GAAGC,SAAS,GAAGC,UAAU,GAAGC,SAAS,GAAGC,SAAS,GAAGC,WAAW,GAAGC,SAAS,GAAGC,UAAU,KAAKC,IAAI,SAAStV,EAAQU,EAAOJ,GAC9W,YAEA,IAAIkQ,GAAWxQ,EAAQ,gBAEnBoB,EAAO,WAEXV,GAAOJ,QAAU,WACfkQ,EAAS/G,SAASrI,EAAM,UAAW,KAAM,MAGxCwQ,eAAe,KAAK2D,IAAI,SAASvV,EAAQU,EAAOJ,GACnD,YAEA,IAAIkQ,GAAWxQ,EAAQ,gBAEnBoB,EAAO,QAEXV,GAAOJ,QAAU,WACfkQ,EAAS/G,SAASrI,EAAM,QAAS,IAAK,GACtCoP,EAAS/G,SAASrI,EAAM,cAAe,KAAM,IAAM,KACnDoP,EAAS/G,SAASrI,EAAM,aAAc,KAAM,IAAK,KACjDoP,EAAS/G,SAASrI,EAAM,cAAe,KAAM,KAAM,KACnDoP,EAAS/G,SAASrI,EAAM,cAAe,KAAM,KAAM,KACnDoP,EAAS/G,SAASrI,EAAM,aAAc,KAAM,KAAM,KAClDoP,EAAS/G,SAASrI,EAAM,aAAc,KAAM,MAAO,KACnDoP,EAAS/G,SAASrI,EAAM,OAAQ,KAAM,MAAQ,KAC9CoP,EAAS/G,SAASrI,EAAM,OAAQ,KAAM,EAAO,MAC7CoP,EAAS/G,SAASrI,EAAM,OAAQ,KAAM,KAAM,MAC5CoP,EAAS/G,SAASrI,EAAM,OAAQ,KAAM,SAAW,SAGhDwQ,eAAe,KAAK4D,IAAI,SAASxV,EAAQU,EAAOJ,GACnD,YAEA,IAAIK,GAAcX,EAAQ,mBAEtBoB,EAAO,KAEXV,GAAOJ,QAAU,WACfK,EAAY8I,SAASrI,EAAM,MAAO,OAAQ,YAAa,SAAU,SAAU,MAAO,SAAU,OAC5FT,EAAY8I,SAASrI,EAAM,WAAY,YAAe,IAAK,MAC3DT,EAAY8I,SAASrI,EAAM,WAAY,YAAe,IAAK,MAC3DT,EAAY8I,SAASrI,EAAM,WAAY,YAAe,IAAK,MAC3DT,EAAY8I,SAASrI,EAAM,YAAa,YAAe,KAAM,MAC7DT,EAAY8I,SAASrI,EAAM,YAAa,YAAe,KAAM,MAC7DT,EAAY8I,SAASrI,EAAM,WAAY,YAAe,KAAM,SAG3DsQ,kBAAkB,KAAK+D,IAAI,SAASzV,EAAQU,EAAOJ,GACtD,YAEA,IAAIkQ,GAAWxQ,EAAQ,gBAEnBoB,EAAO,MAEXV,GAAOJ,QAAU,WACfkQ,EAAS/G,SAASrI,EAAM,QAAS,IAAK,GACtCoP,EAAS/G,SAASrI,EAAM,aAAc,KAAM,GAAM,KAClDoP,EAAS/G,SAASrI,EAAM,cAAe,KAAM,IAAM,KACnDoP,EAAS/G,SAASrI,EAAM,aAAc,KAAM,IAAK,KACjDoP,EAAS/G,SAASrI,EAAM,cAAe,KAAM,KAAM,KACnDoP,EAAS/G,SAASrI,EAAM,aAAc,KAAM,KAAM,KAClDoP,EAAS/G,SAASrI,EAAM,aAAc,KAAM,MAAO,KACnDoP,EAAS/G,SAASrI,EAAM,SAAU,KAAM,UAAW,KACnDoP,EAAS/G,SAASrI,EAAM,SAAU,KAAM,MAAQ,SAG/CwQ,eAAe,KAAK8D,IAAI,SAAS1V,EAAQU,EAAOJ,GACnD,YAEA,IAAIkQ,GAAWxQ,EAAQ,gBAEnBoB,EAAO,QAEXV,GAAOJ,QAAU,WACfkQ,EAAS/G,SAASrI,EAAM,QAAS,OAAQ,GACzCoP,EAAS/G,SAASrI,EAAM,QAAS,MAAO,eAAgB,WAGvDwQ,eAAe,KAAK+D,IAAI,SAAS3V,EAAQU,EAAOJ,GACnD,YAEA,IAAIK,GAAcX,EAAQ,mBAEtBoB,EAAO,KAEXV,GAAOJ,QAAU,WACfK,EAAY8I,SAASrI,EAAM,MAAO,MAAO,OAAQ,OAAQ,SAAU,MAAO,SAAU,QAAS,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,UAAW,MAAO,UAAW,OACvKT,EAAY8I,SAASrI,EAAM,WAAY,WAAc,IAAK,KAC1DT,EAAY8I,SAASrI,EAAM,WAAY,WAAc,IAAK,KAC1DT,EAAY8I,SAASrI,EAAM,WAAY,WAAc,IAAK,KAC1DT,EAAY8I,SAASrI,EAAM,YAAa,WAAc,KAAM,KAC5DT,EAAY8I,SAASrI,EAAM,YAAa,WAAc,KAAM,KAC5DT,EAAY8I,SAASrI,EAAM,WAAY,WAAc,KAAM,QAG1DsQ,kBAAkB,KAAKkE,IAAI,SAAS5V,EAAQU,EAAOJ,GACtD,YAEA,IAAIK,GAAcX,EAAQ,mBAEtBoB,EAAO,QAEXV,GAAOJ,QAAU,WACfK,EAAY8I,SAASrI,EAAM,SAAU,OAAQ,OAAQ,SAAU,SAAU,MAAO,OAAQ,MAAO,OAAQ,OACvGT,EAAY8I,SAASrI,EAAM,cAAe,YAAe,IAAK,MAC9DT,EAAY8I,SAASrI,EAAM,MAAO,YAAe,IAAK,MACtDT,EAAY8I,SAASrI,EAAM,cAAe,YAAe,IAAK,MAC9DT,EAAY8I,SAASrI,EAAM,cAAe,YAAe,IAAK,MAC9DT,EAAY8I,SAASrI,EAAM,eAAgB,YAAe,KAAM,MAChET,EAAY8I,SAASrI,EAAM,eAAgB,YAAe,KAAM,MAChET,EAAY8I,SAASrI,EAAM,cAAe,YAAe,KAAM,MAC/DT,EAAY8I,SAASrI,EAAM,aAAc,YAAe,OAAQ,SAG/DsQ,kBAAkB,KAAKmE,IAAI,SAAS7V,EAAQU,EAAOJ,GACtD,YAEA,IAAIK,GAAcX,EAAQ,mBAEtBoB,EAAO,SAEXV,GAAOJ,QAAU,WACfK,EAAY8I,SAASrI,EAAM,UAAW,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,UAAW,MAAO,UAAW,QAAS,OAAQ,OAAQ,SAAU,MAAO,SAAU,OAC3KT,EAAY8I,SAASrI,EAAM,eAAgB,WAAc,IAAK,KAC9DT,EAAY8I,SAASrI,EAAM,eAAgB,WAAc,IAAK,KAC9DT,EAAY8I,SAASrI,EAAM,eAAgB,WAAc,IAAK,KAC9DT,EAAY8I,SAASrI,EAAM,gBAAiB,WAAc,KAAM,KAChET,EAAY8I,SAASrI,EAAM,gBAAiB,WAAc,KAAM,KAChET,EAAY8I,SAASrI,EAAM,eAAgB,WAAc,KAAM,QAG9DsQ,kBAAkB,KAAKoE,IAAI,SAAS9V,EAAQU,EAAOJ,GACtD,YAEA,IAAIkQ,GAAWxQ,EAAQ,gBAEnBoB,EAAO,SAEXV,GAAOJ,QAAU,WACfkQ,EAAS/G,SAASrI,EAAM,MAAO,MAAO,GACtCoP,EAAS/G,SAASrI,EAAM,OAAQ,OAAQ,KAAO,OAC/CoP,EAAS/G,SAASrI,EAAM,YAAa,QAAS,IAAK,QACnDoP,EAAS/G,SAASrI,EAAM,YAAa,QAAS,IAAK,QACnDoP,EAAS/G,SAASrI,EAAM,YAAa,QAAS,IAAK,QACnDoP,EAAS/G,SAASrI,EAAM,YAAa,QAAS,KAAM,QACpDoP,EAAS/G,SAASrI,EAAM,YAAa,KAAM,KAAM,QACjDoP,EAAS/G,SAASrI,EAAM,WAAY,QAAS,KAAM,QACnDoP,EAAS/G,SAASrI,EAAM,aAAc,QAAS,KAAM,QACrDoP,EAAS/G,SAASrI,EAAM,aAAc,QAAS,KAAM,WAGpDwQ,eAAe,KAAKmE,IAAI,SAAS/V,EAAQU,EAAOJ,GACnD,YAEA,IAAIkQ,GAAWxQ,EAAQ,gBAEnBoB,EAAO,MAEXV,GAAOJ,QAAU,WACfkQ,EAAS/G,SAASrI,EAAM,SAAU,IAAK,GACvCoP,EAAS/G,SAASrI,EAAM,UAAW,KAAM,EAAG,KAC5CoP,EAAS/G,SAASrI,EAAM,cAAe,KAAM,IAAO,SAGnDwQ,eAAe,KAAKoE,IAAI,SAAShW,EAAQU,EAAOJ,GACnD,YAEA,IAAIK,GAAcX,EAAQ,mBAEtBoB,EAAO,OAEXV,GAAOJ,QAAU,WACfK,EAAY8I,SAASrI,EAAM,QAAS,MAAO,OAAQ,SAAU,OAAQ,MAAO,OAAQ,MAAO,UAAW,OACtGT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,IAAK,KAC5DT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,IAAK,KAC5DT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,IAAK,KAC5DT,EAAY8I,SAASrI,EAAM,cAAe,WAAc,KAAM,KAC9DT,EAAY8I,SAASrI,EAAM,cAAe,WAAc,KAAM,KAC9DT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,KAAM,QAG5DsQ,kBAAkB,KAAKuE,IAAI,SAASjW,EAAQU,EAAOJ,GACtD,YAEA,IAAIkQ,GAAWxQ,EAAQ,gBAEnBoB,EAAO,MAEXV,GAAOJ,QAAU,WACfkQ,EAAS/G,SAASrI,EAAM,UAAW,IAAK,GACxCoP,EAAS/G,SAASrI,EAAM,eAAgB,KAAM,GAAM,KACpDoP,EAAS/G,SAASrI,EAAM,gBAAiB,KAAM,IAAM,KACrDoP,EAAS/G,SAASrI,EAAM,eAAgB,KAAM,IAAK,KACnDoP,EAAS/G,SAASrI,EAAM,gBAAiB,KAAM,KAAM,KACrDoP,EAAS/G,SAASrI,EAAM,gBAAiB,KAAM,KAAM,KACrDoP,EAAS/G,SAASrI,EAAM,eAAgB,KAAM,KAAM,KACpDoP,EAAS/G,SAASrI,EAAM,eAAgB,KAAM,MAAO,KACrDoP,EAAS/G,SAASrI,EAAM,UAAW,MAAO,GAAI,KAC9CoP,EAAS/G,SAASrI,EAAM,QAAS,KAAM,GAAI,OAC3CoP,EAAS/G,SAASrI,EAAM,OAAQ,IAAK,GAAI,MACzCoP,EAAS/G,SAASrI,EAAM,QAAS,IAAK,EAAG,KACzCoP,EAAS/G,SAASrI,EAAM,QAAS,MAAO,EAAG,QAG1CwQ,eAAe,KAAKsE,IAAI,SAASlW,EAAQU,EAAOJ,GACnD,YAEA,IAAIK,GAAcX,EAAQ,mBAEtBoB,EAAO,MAEXV,GAAOJ,QAAU,WACfK,EAAY8I,SAASrI,EAAM,OAAQ,MAAO,OAAQ,OAAQ,SAAU,MAAO,SAAU,QAAS,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,UAAW,OACtJT,EAAY8I,SAASrI,EAAM,YAAa,WAAc,IAAK,KAC3DT,EAAY8I,SAASrI,EAAM,YAAa,WAAc,IAAK,KAC3DT,EAAY8I,SAASrI,EAAM,YAAa,WAAc,IAAK,KAC3DT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,KAAM,KAC7DT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,KAAM,KAC7DT,EAAY8I,SAASrI,EAAM,YAAa,WAAc,KAAM,QAG3DsQ,kBAAkB,KAAKyE,IAAI,SAASnW,EAAQU,EAAOJ,GACtD,YAEA,IAAIK,GAAcX,EAAQ,mBAEtBoB,EAAO,QAEXV,GAAOJ,QAAU,WACfK,EAAY8I,SAASrI,EAAM,SAAU,MAAO,SAAU,MAAO,SAAU,MAAO,SAAU,UACxFT,EAAY8I,SAASrI,EAAM,cAAe,WAAc,IAAK,KAC7DT,EAAY8I,SAASrI,EAAM,cAAe,WAAc,IAAK,KAC7DT,EAAY8I,SAASrI,EAAM,cAAe,WAAc,IAAK,KAC7DT,EAAY8I,SAASrI,EAAM,eAAgB,WAAc,KAAM,KAC/DT,EAAY8I,SAASrI,EAAM,eAAgB,WAAc,KAAM,KAC/DT,EAAY8I,SAASrI,EAAM,cAAe,WAAc,KAAM,KAC9DT,EAAY8I,SAASrI,EAAM,YAAa,kBAAqB,QAAU,QAGtEsQ,kBAAkB,KAAK0E,IAAI,SAASpW,EAAQU,EAAOJ,GACtD,YAEA,IAAIK,GAAcX,EAAQ,mBAEtBoB,EAAO,MAEXV,GAAOJ,QAAU,WACfK,EAAY8I,SAASrI,EAAM,OAAQ,MAAO,OAAQ,OAAQ,SAAU,MAAO,SAAU,QAAS,OAAQ,MAAO,OAAQ,MAAO,OAAQ,OACpIT,EAAY8I,SAASrI,EAAM,YAAa,WAAc,IAAK,KAC3DT,EAAY8I,SAASrI,EAAM,YAAa,WAAc,IAAK,KAC3DT,EAAY8I,SAASrI,EAAM,YAAa,WAAc,IAAK,KAC3DT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,KAAM,KAC7DT,EAAY8I,SAASrI,EAAM,aAAc,WAAc,KAAM,KAC7DT,EAAY8I,SAASrI,EAAM,YAAa,WAAc,KAAM,QAG3DsQ,kBAAkB,KAAK2E,IAAI,SAASrW,EAAQU,EAAOJ,GACtD,YAEA,IAAIK,GAAcX,EAAQ,mBAEtBoB,EAAO,OAEXV,GAAOJ,QAAU,WACfK,EAAY8I,SAASrI,EAAM,QAAS,OAAQ,OAAQ,OAAQ,SAAU,MAAO,SAAU,QAAS,OAAQ,MAAO,OAAQ,MAAO,UAAW,OACzIT,EAAY8I,SAASrI,EAAM,aAAc,YAAe,IAAK,MAC7DT,EAAY8I,SAASrI,EAAM,aAAc,YAAe,IAAK,MAC7DT,EAAY8I,SAASrI,EAAM,aAAc,YAAe,IAAK,MAC7DT,EAAY8I,SAASrI,EAAM,cAAe,YAAe,KAAM,MAC/DT,EAAY8I,SAASrI,EAAM,cAAe,YAAe,KAAM,MAC/DT,EAAY8I,SAASrI,EAAM,aAAc,YAAe,KAAM,SAG7DsQ,kBAAkB,KAAK4E,IAAI,SAAStW,EAAQU,EAAOJ,GAYtD,QAASiW,KACL,KAAM,IAAIpW,OAAM,mCAEpB,QAASqW,KACL,KAAM,IAAIrW,OAAM,qCAsBpB,QAASsW,GAAWC,GAChB,GAAIC,IAAqBC,WAErB,MAAOA,YAAWF,EAAK,EAG3B,KAAKC,IAAqBJ,IAAqBI,IAAqBC,WAEhE,MADAD,GAAmBC,WACZA,WAAWF,EAAK,EAE3B,KAEI,MAAOC,GAAiBD,EAAK,GAC/B,MAAMlX,GACJ,IAEI,MAAOmX,GAAiBpW,KAAK,KAAMmW,EAAK,GAC1C,MAAMlX,GAEJ,MAAOmX,GAAiBpW,KAAKS,KAAM0V,EAAK,KAMpD,QAASG,GAAgBC,GACrB,GAAIC,IAAuBC,aAEvB,MAAOA,cAAaF,EAGxB,KAAKC,IAAuBP,IAAwBO,IAAuBC,aAEvE,MADAD,GAAqBC,aACdA,aAAaF,EAExB,KAEI,MAAOC,GAAmBD,GAC5B,MAAOtX,GACL,IAEI,MAAOuX,GAAmBxW,KAAK,KAAMuW,GACvC,MAAOtX,GAGL,MAAOuX,GAAmBxW,KAAKS,KAAM8V,KAYjD,QAASG,KACAC,GAAaC,IAGlBD,GAAW,EACPC,EAAa3W,OACb+J,EAAQ4M,EAAahG,OAAO5G,GAE5B6M,GAAa,EAEb7M,EAAM/J,QACN6W,KAIR,QAASA,KACL,IAAIH,EAAJ,CAGA,GAAII,GAAUb,EAAWQ,EACzBC,IAAW,CAGX,KADA,GAAIK,GAAMhN,EAAM/J,OACV+W,GAAK,CAGP,IAFAJ,EAAe5M,EACfA,OACS6M,EAAaG,GACdJ,GACAA,EAAaC,GAAYI,KAGjCJ,IAAa,EACbG,EAAMhN,EAAM/J,OAEhB2W,EAAe,KACfD,GAAW,EACXL,EAAgBS,IAiBpB,QAASG,GAAKf,EAAKgB,GACf1W,KAAK0V,IAAMA,EACX1V,KAAK0W,MAAQA,EAYjB,QAASC,MAhKT,GAOIhB,GACAI,EARAa,EAAUlX,EAAOJ,YAgBpB,WACG,IAEQqW,EADsB,kBAAfC,YACYA,WAEAL,EAEzB,MAAO/W,GACLmX,EAAmBJ,EAEvB,IAEQQ,EADwB,kBAAjBC,cACcA,aAEAR,EAE3B,MAAOhX,GACLuX,EAAqBP,KAuD7B,IAEIW,GAFA5M,KACA2M,GAAW,EAEXE,GAAa,CAyCjBQ,GAAQC,SAAW,SAAUnB,GACzB,GAAIoB,GAAO,GAAI7T,OAAM+K,UAAUxO,OAAS,EACxC,IAAIwO,UAAUxO,OAAS,EACnB,IAAK,GAAIP,GAAI,EAAGA,EAAI+O,UAAUxO,OAAQP,IAClC6X,EAAK7X,EAAI,GAAK+O,UAAU/O,EAGhCsK,GAAMzG,KAAK,GAAI2T,GAAKf,EAAKoB,IACJ,IAAjBvN,EAAM/J,QAAiB0W,GACvBT,EAAWY,IASnBI,EAAK7I,UAAU4I,IAAM,WACjBxW,KAAK0V,IAAIqB,MAAM,KAAM/W,KAAK0W,QAE9BE,EAAQI,MAAQ,UAChBJ,EAAQK,SAAU,EAClBL,EAAQM,OACRN,EAAQO,QACRP,EAAQQ,QAAU,GAClBR,EAAQS,YAIRT,EAAQtO,GAAKqO,EACbC,EAAQU,YAAcX,EACtBC,EAAQW,KAAOZ,EACfC,EAAQY,IAAMb,EACdC,EAAQa,eAAiBd,EACzBC,EAAQc,mBAAqBf,EAC7BC,EAAQe,KAAOhB,EAEfC,EAAQgB,QAAU,SAAU3W,GACxB,KAAM,IAAI9B,OAAM,qCAGpByX,EAAQiB,IAAM,WAAc,MAAO,KACnCjB,EAAQkB,MAAQ,SAAUC,GACtB,KAAM,IAAI5Y,OAAM,mCAEpByX,EAAQoB,MAAQ,WAAa,MAAO,SAE9BC,IAAI,SAASjZ,EAAQU,EAAOJ,IAClC,SAAWsX,EAAQsB,IASlB,SAAUA,EAAQC,GACE,gBAAZ7Y,IAA0C,mBAAXI,GAAyByY,EAAQ7Y,GACrD,kBAAX8Y,SAAyBA,OAAOC,IAAMD,QAAQ,WAAYD,GAChEA,EAASD,EAAO/P,KAAO+P,EAAO/P,WAC/BnI,KAAM,SAAWV,GAAW,YAE9B,SAASgZ,GAAQC,EAAWC,GAC1B,IAAK,GAAIvZ,GAAI,EAAGI,EAAIkZ,EAAU/Y,OAAQP,EAAII,EAAGJ,IAC3C,GAAIsZ,EAAUtZ,KAAOuZ,EACnB,MAAOvZ,EAIX,QAAO,EAGT,QAASwZ,GAAaC,GACpB,GAAIH,GAAYG,EAAOC,iBAMvB,OAJKJ,KACHA,EAAYG,EAAOC,sBAGdJ,EAgLT,QAASK,GAAU3X,EAAM8B,GACvB,MAAa,YAAT9B,MAIFsC,IAAW,GAAE,QAASR,GAIC,IAArBiL,UAAUxO,OAGL+D,GAAOtC,QAFdsC,GAAOtC,GAAQ8B,GAMnB,QAAS8V,GAAiBC,GACxB,MAAoB,kBAANA,IAAiC,gBAANA,IAAwB,OAANA,EAG7D,QAASC,GAAWD,GAClB,MAAoB,kBAANA,GAGhB,QAASE,GAAgBF,GACvB,MAAoB,gBAANA,IAAwB,OAANA,EAoBlC,QAASG,MAeT,QAASC,KACPtD,WAAW,WACT,IAAK,GAAI3W,GAAI,EAAGA,EAAIsK,GAAM/J,OAAQP,IAAK,CACrC,GAAIka,GAAQ5P,GAAMtK,GAEdma,EAAUD,EAAMC,OAEpBA,GAAQC,KAAOD,EAAQ3L,IAAM2L,EAAQE,GACrCF,EAAQG,UAAYH,EAAQ3L,IAAM2L,EAAQI,QACtCJ,EAAQxU,QACVwU,EAAQK,MAAQL,EAAQxU,MAAM6U,OAGhClW,GAAgB,QAAE4V,EAAMlY,KAAMkY,EAAMC,SAEtC7P,GAAM/J,OAAS,GACd,IAEL,QAASka,GAAWC,EAAWC,EAASC,GAClC,IAAMtQ,GAAMzG,MACd7B,KAAM0Y,EACNP,SACE3L,IAAKmM,EAAQE,SACbR,GAAIM,EAAQG,IACZJ,UAAWA,EACXK,OAAQJ,EAAQK,QAChBT,QAASK,GAASA,EAAME,IACxBG,MAAON,EAAQO,OACfC,UAAWC,KACXzV,MAAOrB,GAAO,yBAA2B,GAAIpE,OAAMya,EAAQO,QAAU,SAEvEjB,IAoCJ,QAASoB,GAAU5B,EAAQwB,GAEzB,GAAInN,GAAc/M,IAElB,IAAI0Y,GAA4B,gBAAXA,IAAuBA,EAAOrJ,cAAgBtC,EACjE,MAAO2L,EAGT,IAAIkB,GAAU,GAAI7M,GAAY4J,EAAMuD,EAEpC,OADAK,GAAQX,EAASlB,GACVkB,EAGT,QAASY,KACP,MAAO,IAAIrX,WAAU,wDAGvB,QAASwT,MAQT,QAAS8D,GAAQb,GACf,IACE,MAAOA,GAAQc,KACf,MAAO9V,GAEP,MADA+V,IAAe/V,MAAQA,EAChB+V,IAIX,QAASC,GAAQF,EAAM3X,EAAO8X,EAAoBC,GAChD,IACEJ,EAAKnb,KAAKwD,EAAO8X,EAAoBC,GACrC,MAAOtc,GACP,MAAOA,IAIX,QAASuc,GAAsBnB,EAASoB,EAAUN,GAChDnX,GAAO0X,MAAM,SAAUrB,GACrB,GAAIsB,IAAS,EACTtW,EAAQgW,EAAQF,EAAMM,EAAU,SAAUjY,GACxCmY,IAGJA,GAAS,EACLF,IAAajY,EACfwX,EAAQX,EAAS7W,EAAOR,QAExB4Y,EAAQvB,EAAS7W,KAElB,SAAUwF,GACP2S,IAGJA,GAAS,EAETE,EAAOxB,EAASrR,KACf,YAAcqR,EAAQO,QAAU,sBAE9Be,GAAUtW,IACbsW,GAAS,EACTE,EAAOxB,EAAShV,KAEjBgV,GAGL,QAASyB,GAAkBzB,EAASoB,GAC9BA,EAASM,SAAWC,GACtBJ,EAAQvB,EAASoB,EAASf,SACjBe,EAASM,SAAWE,IAC7BR,EAASS,SAAW,KACpBL,EAAOxB,EAASoB,EAASf,UAEzByB,EAAUV,EAAUzY,OAAW,SAAUQ,GACnCiY,IAAajY,EACfwX,EAAQX,EAAS7W,EAAOR,QAExB4Y,EAAQvB,EAAS7W,IAElB,SAAUwF,GACX,MAAO6S,GAAOxB,EAASrR,KAK7B,QAASoT,GAAoB/B,EAASgC,EAAeC,GAC/CD,EAAcvM,cAAgBuK,EAAQvK,aAAewM,IAAWnB,GAAQd,EAAQvK,YAAYkL,UAAYD,EAC1Ge,EAAkBzB,EAASgC,GAEvBC,IAAWlB,GACbS,EAAOxB,EAASe,GAAe/V,OACXrC,SAAXsZ,EACTV,EAAQvB,EAASgC,GACR7C,EAAW8C,GACpBd,EAAsBnB,EAASgC,EAAeC,GAE9CV,EAAQvB,EAASgC,GAKvB,QAASrB,GAAQX,EAAS7W,GACpB6W,IAAY7W,EACdoY,EAAQvB,EAAS7W,GACR8V,EAAiB9V,GAC1B4Y,EAAoB/B,EAAS7W,EAAO0X,EAAQ1X,IAE5CoY,EAAQvB,EAAS7W,GAIrB,QAAS+Y,GAAiBlC,GACpBA,EAAQ6B,UACV7B,EAAQ6B,SAAS7B,EAAQK,SAG3B8B,EAAQnC,GAGV,QAASuB,GAAQvB,EAAS7W,GACpB6W,EAAQ0B,SAAWU,KAIvBpC,EAAQK,QAAUlX,EAClB6W,EAAQ0B,OAASC,GAEmB,IAAhC3B,EAAQqC,aAAazc,OACnB+D,GAAOmW,YACTA,EAAW,YAAaE,GAG1BrW,GAAO0X,MAAMc,EAASnC,IAI1B,QAASwB,GAAOxB,EAASrR,GACnBqR,EAAQ0B,SAAWU,KAGvBpC,EAAQ0B,OAASE,GACjB5B,EAAQK,QAAU1R,EAClBhF,GAAO0X,MAAMa,EAAkBlC,IAGjC,QAAS8B,GAAUQ,EAAQrC,EAAOsC,EAAeC,GAC/C,GAAIC,GAAcH,EAAOD,aACrBzc,EAAS6c,EAAY7c,MAEzB0c,GAAOT,SAAW,KAElBY,EAAY7c,GAAUqa,EACtBwC,EAAY7c,EAAS+b,IAAaY,EAClCE,EAAY7c,EAASgc,IAAYY,EAElB,IAAX5c,GAAgB0c,EAAOZ,QACzB/X,GAAO0X,MAAMc,EAASG,GAI1B,QAASH,GAAQnC,GACf,GAAIyC,GAAczC,EAAQqC,aACtBK,EAAU1C,EAAQ0B,MAMtB,IAJI/X,GAAOmW,YACTA,EAAW4C,IAAYf,GAAY,YAAc,WAAY3B,GAGpC,IAAvByC,EAAY7c,OAAhB,CAQA,IAAK,GAJDqa,GAAQtX,OACRiW,EAAWjW,OACXyX,EAASJ,EAAQK,QAEZhb,EAAI,EAAGA,EAAIod,EAAY7c,OAAQP,GAAK,EAC3C4a,EAAQwC,EAAYpd,GACpBuZ,EAAW6D,EAAYpd,EAAIqd,GAEvBzC,EACF0C,EAAeD,EAASzC,EAAOrB,EAAUwB,GAEzCxB,EAASwB,EAIbJ,GAAQqC,aAAazc,OAAS,GAGhC,QAASgd,KACPxc,KAAK4E,MAAQ,KAKf,QAAS6X,GAASjE,EAAUwB,GAC1B,IACE,MAAOxB,GAASwB,GAChB,MAAOxb,GAEP,MADAke,IAAgB9X,MAAQpG,EACjBke,IAIX,QAASH,GAAeD,EAAS1C,EAASpB,EAAUwB,GAClD,GAAI2C,GAAc5D,EAAWP,GACzBzV,EAAQR,OACRqC,EAAQrC,OACRqa,EAAYra,OACZsa,EAASta,MAEb,IAAIoa,GAWF,GAVA5Z,EAAQ0Z,EAASjE,EAAUwB;AAEvBjX,IAAU2Z,IACZG,GAAS,EACTjY,EAAQ7B,EAAM6B,MACd7B,EAAQ,MAER6Z,GAAY,EAGVhD,IAAY7W,EAEd,WADAqY,GAAOxB,EAASY,SAIlBzX,GAAQiX,EACR4C,GAAY,CAGVhD,GAAQ0B,SAAWU,KAEZW,GAAeC,EACtBrC,EAAQX,EAAS7W,GACR8Z,EACTzB,EAAOxB,EAAShV,GACP0X,IAAYf,GACrBJ,EAAQvB,EAAS7W,GACRuZ,IAAYd,IACrBJ,EAAOxB,EAAS7W,IAItB,QAAS+Z,GAAkBlD,EAASmD,GAClC,GAAIC,IAAW,CACf,KACED,EAAS,SAAUha,GACbia,IAGJA,GAAW,EACXzC,EAAQX,EAAS7W,KAChB,SAAUwF,GACPyU,IAGJA,GAAW,EACX5B,EAAOxB,EAASrR,MAElB,MAAO/J,GACP4c,EAAOxB,EAASpb,IAIpB,QAASkc,GAAKyB,EAAeC,EAAalC,GACxC,GAAI+C,GAAajP,UAEbkO,EAASlc,KACTkd,EAAQhB,EAAOZ,MAEnB,IAAI4B,IAAU3B,KAAcY,GAAiBe,IAAU1B,KAAaY,EAElE,MADA7Y,IAAOmW,YAAcA,EAAW,UAAWwC,EAAQA,GAC5CA,CAGTA,GAAOT,SAAW,IAElB,IAAI5B,GAAQ,GAAIqC,GAAO7M,YAAYsH,EAAMuD,GACrChO,EAASgQ,EAAOjC,OAepB,OAbA1W,IAAOmW,YAAcA,EAAW,UAAWwC,EAAQrC,GAE/CqD,GACF,WACE,GAAI1E,GAAWyE,EAAWC,EAAQ,EAClC3Z,IAAO0X,MAAM,WACX,MAAOsB,GAAeW,EAAOrD,EAAOrB,EAAUtM,QAIlDwP,EAAUQ,EAAQrC,EAAOsC,EAAeC,GAGnCvC,EAGT,QAASsD,GAAkBD,EAAOE,EAAUra,GAC1C,MAAIma,KAAU3B,IAEV2B,MAAO,YACPna,MAAOA,IAIPma,MAAO,WACP3U,OAAQxF,GAKd,QAASsa,GAAWtQ,EAAauQ,EAAOC,EAAerD,GACrDla,KAAKwd,qBAAuBzQ,EAC5B/M,KAAK4Z,QAAU,GAAI7M,GAAY4J,EAAMuD,GACrCla,KAAKyd,eAAiBF,EAElBvd,KAAK0d,eAAeJ,IACtBtd,KAAK2d,OAASL,EACdtd,KAAKR,OAAS8d,EAAM9d,OACpBQ,KAAK4d,WAAaN,EAAM9d,OAExBQ,KAAK6d,QAEe,IAAhB7d,KAAKR,OACP2b,EAAQnb,KAAK4Z,QAAS5Z,KAAKia,UAE3Bja,KAAKR,OAASQ,KAAKR,QAAU,EAC7BQ,KAAK8d,aACmB,IAApB9d,KAAK4d,YACPzC,EAAQnb,KAAK4Z,QAAS5Z,KAAKia,WAI/BmB,EAAOpb,KAAK4Z,QAAS5Z,KAAK+d,oBA6I9B,QAASC,GAAIC,EAAS/D,GACpB,MAAO,IAAImD,GAAWrd,KAAMie,IAAS,GAA2B/D,GAAON,QAqEzE,QAASsE,GAAKD,EAAS/D,GAErB,GAAInN,GAAc/M,KAEd4Z,EAAU,GAAI7M,GAAY4J,EAAMuD,EAEpC,KAAKhX,GAAQ+a,GAEX,MADA7C,GAAOxB,EAAS,GAAIzW,WAAU,oCACvByW,CAGT,KAAK,GAAI3a,GAAI,EAAG2a,EAAQ0B,SAAWU,IAAW/c,EAAIgf,EAAQze,OAAQP,IAChEyc,EAAU3O,EAAYwN,QAAQ0D,EAAQhf,IAAKsD,OAAW,SAAUQ,GAC9D,MAAOwX,GAAQX,EAAS7W,IACvB,SAAUwF,GACX,MAAO6S,GAAOxB,EAASrR,IAI3B,OAAOqR,GAsCT,QAASuE,GAAS5V,EAAQ2R,GAExB,GAAInN,GAAc/M,KACd4Z,EAAU,GAAI7M,GAAY4J,EAAMuD,EAEpC,OADAkB,GAAOxB,EAASrR,GACTqR,EAMT,QAASwE,KACP,KAAM,IAAIjb,WAAU,sFAGtB,QAASkb,KACP,KAAM,IAAIlb,WAAU,yHA2GtB,QAASmb,GAAQvB,EAAU7C,GACzBla,KAAK+Z,IAAMwE,KACXve,KAAKma,OAASD,EACdla,KAAKsb,OAAS/Y,OACdvC,KAAKia,QAAU1X,OACfvC,KAAKic,gBAEL1Y,GAAOmW,YAAcA,EAAW,UAAW1Z,MAEvC2W,IAASoG,IACS,kBAAbA,IAA2BqB,IAClCpe,eAAgBse,GAAUxB,EAAkB9c,KAAM+c,GAAYsB,KAoTlE,QAASG,KACPxe,KAAK+C,MAAQR,OAMf,QAASkc,GAAUC,GACjB,IACE,MAAOA,GAAIhE,KACX,MAAO9V,GAEP,MADA+Z,IAAM5b,MAAQ6B,EACP+Z,IAIX,QAASC,GAAS1f,EAAGN,EAAGG,GACtB,IACEG,EAAE6X,MAAMnY,EAAGG,GACX,MAAO6F,GAEP,MADA+Z,IAAM5b,MAAQ6B,EACP+Z,IAIX,QAASE,GAAWC,EAAGC,GAKrB,IAAK,GAJDL,MACAlf,EAASsf,EAAEtf,OACXsX,EAAO,GAAI7T,OAAMzD,GAEZsZ,EAAI,EAAGA,EAAItZ,EAAQsZ,IAC1BhC,EAAKgC,GAAKgG,EAAEhG,EAGd,KAAK,GAAI7Z,GAAI,EAAGA,EAAI8f,EAAcvf,OAAQP,IAAK,CAC7C,GAAI+f,GAAQD,EAAc9f,EAC1Byf,GAAIM,GAASlI,EAAK7X,EAAI,GAGxB,MAAOyf,GAGT,QAASO,GAAYH,GAInB,IAAK,GAHDtf,GAASsf,EAAEtf,OACXsX,EAAO,GAAI7T,OAAMzD,EAAS,GAErBP,EAAI,EAAGA,EAAIO,EAAQP,IAC1B6X,EAAK7X,EAAI,GAAK6f,EAAE7f,EAGlB,OAAO6X,GAGT,QAASoI,GAAaC,EAAOvF,GAC3B,OACEc,KAAM,SAAc0E,EAAehD,GACjC,MAAO+C,GAAM5f,KAAKqa,EAASwF,EAAehD,KAqIhD,QAASiD,GAAUC,EAAUC,GAC3B,GAAIC,GAAK,WAMP,IAAK,GALDxQ,GAAOhP,KACPX,EAAI2O,UAAUxO,OACdsX,EAAO,GAAI7T,OAAM5D,EAAI,GACrBogB,GAAe,EAEVxgB,EAAI,EAAGA,EAAII,IAAKJ,EAAG,CAC1B,GAAIygB,GAAM1R,UAAU/O,EAEpB,KAAKwgB,EAAc,CAGjB,GADAA,EAAeE,EAAkBD,GAC7BD,IAAiBG,GAAkB,CACrC,GAAIC,GAAI,GAAIvB,GAAQ3H,EAEpB,OADAyE,GAAOyE,EAAGD,GAAiB7c,OACpB8c,EACEJ,GAAgBA,KAAiB,IAC1CC,EAAMR,EAAaO,EAAcC,IAGrC5I,EAAK7X,GAAKygB,EAGZ,GAAI9F,GAAU,GAAI0E,GAAQ3H,EAM1B,OAJAG,GAAKzX,GAAK,SAAU2D,EAAK8c,GACnB9c,EAAKoY,EAAOxB,EAAS5W,GAA0BT,SAAZgd,EAAuBhF,EAAQX,EAASkG,GAAcP,KAAY,EAAMhF,EAAQX,EAASqF,EAAYjR,YAAqB9K,GAAQqc,GAAUhF,EAAQX,EAASiF,EAAW7Q,UAAWuR,IAAehF,EAAQX,EAASkG,IAGxPL,EACKM,EAAmBnG,EAAS9C,EAAMwI,EAAUtQ,GAE5CgR,EAAiBpG,EAAS9C,EAAMwI,EAAUtQ,GAMrD,OAFAwQ,GAAGjQ,UAAY+P,EAERE,EAGT,QAASQ,GAAiBpG,EAAS9C,EAAMwI,EAAUtQ,GACjD,GAAI9C,GAAS0S,EAASU,EAAUtQ,EAAM8H,EAItC,OAHI5K,KAAWyS,IACbvD,EAAOxB,EAAS1N,EAAOnJ,OAElB6W,EAGT,QAASmG,GAAmBnG,EAAS9C,EAAMwI,EAAUtQ,GACnD,MAAOsP,GAAQN,IAAIlH,GAAM4D,KAAK,SAAU5D,GACtC,GAAI5K,GAAS0S,EAASU,EAAUtQ,EAAM8H,EAItC,OAHI5K,KAAWyS,IACbvD,EAAOxB,EAAS1N,EAAOnJ,OAElB6W,IAIX,QAAS+F,GAAkBD,GACzB,SAAIA,GAAsB,gBAARA,MACZA,EAAIrQ,cAAgBiP,GAGfG,EAAUiB,IAiBvB,QAASO,GAAMvJ,EAAOwD,GACpB,MAAOoE,GAAQN,IAAItH,EAAOwD,GAG5B,QAASgG,GAAWnT,EAAakR,EAAS/D,GACxCla,KAAKmgB,kBAAkBpT,EAAakR,GAAS,EAAkC/D,GA6DjF,QAASkG,GAAWnC,EAAS/D,GAC3B,MAAO,IAAIgG,GAAW5B,EAASL,EAAS/D,GAAON,QAajD,QAASyG,GAAO3J,EAAOwD,GACrB,MAAOoE,GAAQJ,KAAKxH,EAAOwD,GAG7B,QAASoG,IAAYvT,EAAa2L,EAAQwB,GACxCla,KAAKmgB,kBAAkBpT,EAAa2L,GAAQ,EAAMwB,GAkIpD,QAASqG,IAAK7H,EAAQwB,GACpB,MAAO,IAAIoG,IAAYhC,EAAS5F,EAAQwB,GAAON,QAGjD,QAAS4G,IAAYzT,EAAa2L,EAAQwB,GACxCla,KAAKmgB,kBAAkBpT,EAAa2L,GAAQ,EAAOwB,GAgHrD,QAASuG,IAAY/H,EAAQwB,GAC3B,MAAO,IAAIsG,IAAYlC,EAAS5F,EAAQwB,GAAON,QAGjD,QAAS8G,IAAQnY,GAIf,KAHAqN,YAAW,WACT,KAAMrN,KAEFA,EAmCR,QAASoY,IAAMzG,GACb,GAAI0G,IAAarG,QAAShY,OAAW6Y,OAAQ7Y,OAO7C,OALAqe,GAAShH,QAAU,GAAI0E,GAAQ,SAAU/D,EAASa,GAChDwF,EAASrG,QAAUA,EACnBqG,EAASxF,OAASA,GACjBlB,GAEI0G,EAiFT,QAASC,IAAIC,EAAUC,EAAO7G,GAC5B,MAAOoE,GAAQN,IAAI8C,EAAU5G,GAAOQ,KAAK,SAAUsG,GACjD,IAAKjI,EAAWgI,GACd,KAAM,IAAI5d,WAAU,qDAMtB,KAAK,GAHD3D,GAASwhB,EAAOxhB,OAChByhB,EAAU,GAAIhe,OAAMzD,GAEfP,EAAI,EAAGA,EAAIO,EAAQP,IAC1BgiB,EAAQhiB,GAAK8hB,EAAMC,EAAO/hB,GAG5B,OAAOqf,GAAQN,IAAIiD,EAAS/G,KAgBhC,QAASgH,IAAUne,EAAOmX,GACxB,MAAOoE,GAAQ/D,QAAQxX,EAAOmX,GAchC,QAASiH,IAAS5Y,EAAQ2R,GACxB,MAAOoE,GAAQlD,OAAO7S,EAAQ2R,GAyFhC,QAASkH,IAAWN,EAAU5G,GAC5B,MAAOoE,GAAQN,IAAI8C,EAAU5G,GAG/B,QAASmH,IAAczH,EAASM,GAC9B,MAAOoE,GAAQ/D,QAAQX,EAASM,GAAOQ,KAAK,SAAUoG,GACpD,MAAOM,IAAWN,EAAU5G,KAGhC,QAASoH,IAAOR,EAAUS,EAAUrH,GAClC,GAAIN,GAAU1W,GAAQ4d,GAAYM,GAAWN,EAAU5G,GAASmH,GAAcP,EAAU5G,EACxF,OAAON,GAAQc,KAAK,SAAUsG,GAC5B,IAAKjI,EAAWwI,GACd,KAAM,IAAIpe,WAAU,wDAMtB,KAAK,GAHD3D,GAASwhB,EAAOxhB,OAChBgiB,EAAW,GAAIve,OAAMzD,GAEhBP,EAAI,EAAGA,EAAIO,EAAQP,IAC1BuiB,EAASviB,GAAKsiB,EAASP,EAAO/hB,GAGhC,OAAOmiB,IAAWI,EAAUtH,GAAOQ,KAAK,SAAU8G,GAIhD,IAAK,GAHDP,GAAU,GAAIhe,OAAMzD,GACpBiiB,EAAY,EAEPxiB,EAAI,EAAGA,EAAIO,EAAQP,IACtBuiB,EAASviB,KACXgiB,EAAQQ,GAAaT,EAAO/hB,GAC5BwiB,IAMJ,OAFAR,GAAQzhB,OAASiiB,EAEVR,MAOb,QAASS,IAAKlJ,EAAUkH,GACtBiC,GAAQpL,IAAOiC,EACfmJ,GAAQpL,GAAM,GAAKmJ,EACnBnJ,IAAO,EACK,IAARA,IAIFqL,KAaJ,QAASC,MACP,GAAIhL,GAAWD,EAAQC,SAGnBO,EAAUR,EAAQS,SAASyK,KAAK1W,MAAM,qCAI1C,OAHInI,OAAMC,QAAQkU,IAA2B,MAAfA,EAAQ,IAA6B,OAAfA,EAAQ,KAC1DP,EAAWkL,cAEN,WACL,MAAOlL,GAASmL,KAKpB,QAASC,MACP,MAAyB,mBAAdC,IACF,WACLA,GAAUF,KAGPG,KAGT,QAASC,MACP,GAAIC,GAAa,EACbC,EAAW,GAAIC,IAAwBP,IACvCF,EAAOU,SAASC,eAAe,GAGnC,OAFAH,GAASI,QAAQZ,GAAQa,eAAe,IAEjC,WACL,MAAOb,GAAKc,KAAOP,IAAeA,EAAa,GAKnD,QAASQ,MACP,GAAIC,GAAU,GAAIC,eAElB,OADAD,GAAQE,MAAMC,UAAYjB,GACnB,WACL,MAAOc,GAAQI,MAAMC,YAAY,IAIrC,QAAShB,MACP,MAAO,YACL,MAAOvM,YAAWoM,GAAO,IAM7B,QAASA,MACP,IAAK,GAAI/iB,GAAI,EAAGA,EAAIsX,GAAKtX,GAAK,EAAG,CAC/B,GAAIuZ,GAAWmJ,GAAQ1iB,GACnBygB,EAAMiC,GAAQ1iB,EAAI,EAEtBuZ,GAASkH,GAETiC,GAAQ1iB,GAAKsD,OACbof,GAAQ1iB,EAAI,GAAKsD,OAGnBgU,GAAM,EAGR,QAAS6M,MACP,IACE,GAAIzkB,GAAIK,EACJqkB,EAAQ1kB,EAAE,QAEd,OADAujB,IAAYmB,EAAMC,WAAaD,EAAME,aAC9BtB,KACP,MAAOzjB,GACP,MAAO2jB,OAiCX,QAASqB,IAAgB9E,EAAKjR,EAAK1K,GAAiK,MAApJ0K,KAAOiR,GAAO5d,OAAO0M,eAAekR,EAAKjR,GAAO1K,MAAOA,EAAOsK,YAAY,EAAMC,cAAc,EAAMC,UAAU,IAAkBmR,EAAIjR,GAAO1K,EAAgB2b,EAgB3M,QAASpW,MACP/E,GAAW,GAAEwT,MAAMxT,GAAQyK,WAG7B,QAASwJ,MACPjU,GAAY,IAAEwT,MAAMxT,GAAQyK,WAr2E9B,GAAIyV,KAiCFC,MAAO,SAAehL,GAKpB,MAJAA,GAAW,GAAI1Y,KAAS,GACxB0Y,EAAY,IAAI1Y,KAAU,IAC1B0Y,EAAgB,QAAI1Y,KAAc,QAClC0Y,EAAOC,kBAAoBpW,OACpBmW,GAiBTpQ,GAAI,SAAYqR,EAAWnB,GACzB,GAAwB,kBAAbA,GACT,KAAM,IAAIrV,WAAU,8BAGtB,IAAIwgB,GAAelL,EAAazY,MAC5BuY,EAAYhW,MAEhBgW,GAAYoL,EAAahK,GAEpBpB,IACHA,EAAYoL,EAAahK,OAGvBrB,EAAQC,EAAWC,MAAc,GACnCD,EAAUzV,KAAK0V,IAkCnBhB,IAAK,SAAamC,EAAWnB,GAC3B,GAAImL,GAAelL,EAAazY,MAC5BuY,EAAYhW,OACZqhB,EAAQrhB,MAEZ,OAAKiW,IAKLD,EAAYoL,EAAahK,GAEzBiK,EAAQtL,EAAQC,EAAWC,QAEvBoL,KAAU,GACZrL,EAAUsL,OAAOD,EAAO,UATxBD,EAAahK,QAsCjBmK,QAAS,SAAiBnK,EAAW4F,EAASrF,GAC5C,GAAIyJ,GAAelL,EAAazY,MAC5BuY,EAAYhW,OACZiW,EAAWjW,MAEf,IAAIgW,EAAYoL,EAAahK,GAE3B,IAAK,GAAI1a,GAAI,EAAGA,EAAIsZ,EAAU/Y,OAAQP,KACpCuZ,EAAWD,EAAUtZ,IAEZsgB,EAASrF,KAMtB3W,IACFmW,YAAY,EAGd+J,IAAmB,MAAElgB,GA8BrB,IAAIwgB,IAAWxhB,MAMbwhB,IALG9gB,MAAMC,QAKED,MAAMC,QAJN,SAAU4V,GACnB,MAA6C,mBAAtChY,OAAO8M,UAAUoW,SAASzkB,KAAKuZ,GAM1C,IAAI5V,IAAU6gB,GAIV1J,GAAM4J,KAAK5J,KAAO,WACpB,OAAO,GAAI4J,OAAOC,WAKhBC,GAAWrjB,OAAO2N,QAAU,SAAU5P,GACxC,GAAImP,UAAUxO,OAAS,EACrB,KAAM,IAAIL,OAAM,gCAElB,IAAiB,gBAANN,GACT,KAAM,IAAIsE,WAAU,6BAGtB,OADA8V,GAAErL,UAAY/O,EACP,GAAIoa,IAGT1P,MAwFAyS,GAAU,OACVT,GAAY,EACZC,GAAW,EAEXb,GAAiB,GAAI6B,GAgLrBE,GAAkB,GAAIF,EAgJ1Ba,GAAWzP,UAAU8P,eAAiB,SAAUJ,GAC9C,MAAOpa,IAAQoa,IAGjBD,EAAWzP,UAAUmQ,iBAAmB,WACtC,MAAO,IAAI5e,OAAM,4CAGnBke,EAAWzP,UAAUiQ,MAAQ,WAC3B7d,KAAKia,QAAU,GAAIhX,OAAMjD,KAAKR,SAGhC6d,EAAWzP,UAAUkQ,WAAa,WAKhC,IAAK,GAJDte,GAASQ,KAAKR,OACdoa,EAAU5Z,KAAK4Z,QACf0D,EAAQtd,KAAK2d,OAER1e,EAAI,EAAG2a,EAAQ0B,SAAWU,IAAW/c,EAAIO,EAAQP,IACxDe,KAAKokB,WAAW9G,EAAMre,GAAIA,IAI9Boe,EAAWzP,UAAUyW,qBAAuB,SAAUlL,EAAOla,GAC3D,GAAI2P,GAAI5O,KAAKwd,qBACTjD,EAAU3L,EAAE2L,OAEhB,IAAIA,IAAYD,EAAW,CACzB,GAAIuB,GAASpB,EAAQtB,EAErB,IAAI0C,IAAWnB,GAAQvB,EAAMmC,SAAWU,GACtC7C,EAAMsC,SAAW,KACjBzb,KAAKskB,WAAWnL,EAAMmC,OAAQrc,EAAGka,EAAMc,aAClC,IAAsB,kBAAX4B,GAChB7b,KAAK4d,aACL5d,KAAKia,QAAQhb,GAAKe,KAAKukB,YAAYhJ,GAAWtc,EAAGka,OAC5C,IAAIvK,IAAM0P,EAAS,CACxB,GAAI1E,GAAU,GAAIhL,GAAE+H,EACpBgF,GAAoB/B,EAAST,EAAO0C,GACpC7b,KAAKwkB,cAAc5K,EAAS3a,OAE5Be,MAAKwkB,cAAc,GAAI5V,GAAE,SAAU2L,GACjC,MAAOA,GAAQpB,KACbla,OAGNe,MAAKwkB,cAAcjK,EAAQpB,GAAQla,IAIvCoe,EAAWzP,UAAUwW,WAAa,SAAUjL,EAAOla,GAC7C+Z,EAAgBG,GAClBnZ,KAAKqkB,qBAAqBlL,EAAOla,IAEjCe,KAAK4d,aACL5d,KAAKia,QAAQhb,GAAKe,KAAKukB,YAAYhJ,GAAWtc,EAAGka,KAIrDkE,EAAWzP,UAAU0W,WAAa,SAAUpH,EAAOje,EAAG8D,GACpD,GAAI6W,GAAU5Z,KAAK4Z,OAEfA,GAAQ0B,SAAWU,KACrBhc,KAAK4d,aAED5d,KAAKyd,gBAAkBP,IAAU1B,GACnCJ,EAAOxB,EAAS7W,GAEhB/C,KAAKia,QAAQhb,GAAKe,KAAKukB,YAAYrH,EAAOje,EAAG8D,IAIzB,IAApB/C,KAAK4d,YACPzC,EAAQvB,EAAS5Z,KAAKia,UAI1BoD,EAAWzP,UAAU2W,YAAc,SAAUrH,EAAOje,EAAG8D,GACrD,MAAOA,IAGTsa,EAAWzP,UAAU4W,cAAgB,SAAU5K,EAAS3a,GACtD,GAAIwlB,GAAazkB,IAEjB0b,GAAU9B,EAASrX,OAAW,SAAUQ,GACtC,MAAO0hB,GAAWH,WAAW/I,GAAWtc,EAAG8D,IAC1C,SAAUwF,GACX,MAAOkc,GAAWH,WAAW9I,GAAUvc,EAAGsJ,KA0L9C,IAAImc,IAAU,QAAUrK,KAAQ,IAC5BkE,GAAU,CAiIdD,GAAQqG,KAAOrK,EACfgE,EAAQN,IAAMA,EACdM,EAAQJ,KAAOA,EACfI,EAAQ/D,QAAUD,EAClBgE,EAAQlD,OAAS+C,EAEjBG,EAAQ1Q,WACNyB,YAAaiP,EAEbxE,SAAU4K,GAEVjJ,SAAU,SAAkBlT,GAC1B,GAAIqR,GAAU5Z,IACduD,IAAOqhB,MAAM,WACPhL,EAAQ6B,UACVlY,GAAgB,QAAE,QAASgF,EAAQqR,EAAQO,WAuMjDO,KAAMA,EA8BNmK,MAAS,SAAgBzI,EAAalC,GACpC,MAAOla,MAAK0a,KAAKnY,OAAW6Z,EAAalC,IA2C3C4K,QAAW,SAAkBtM,EAAU0B,GACrC,GAAIN,GAAU5Z,KACVqP,EAAcuK,EAAQvK,WAE1B,OAAOuK,GAAQc,KAAK,SAAU3X,GAC5B,MAAOsM,GAAYkL,QAAQ/B,KAAYkC,KAAK,WAC1C,MAAO3X,MAER,SAAUwF,GACX,MAAO8G,GAAYkL,QAAQ/B,KAAYkC,KAAK,WAC1C,KAAMnS,MAEP2R,IAQP,IAAIyE,IAAQ,GAAIH,GACZoB,GAAmB,GAAIpB,EAkR3B0B,GAAWtS,UAAYuW,GAAS9G,EAAWzP,WAC3CsS,EAAWtS,UAAUuS,kBAAoB9C,EACzC6C,EAAWtS,UAAU2W,YAAcpH,EACnC+C,EAAWtS,UAAUmQ,iBAAmB,WACtC,MAAO,IAAI5e,OAAM,4CA4EnBmhB,GAAY1S,UAAYuW,GAAS9G,EAAWzP,WAC5C0S,GAAY1S,UAAUuS,kBAAoB9C,EAC1CiD,GAAY1S,UAAUiQ,MAAQ,WAC5B7d,KAAKia,YAGPqG,GAAY1S,UAAU8P,eAAiB,SAAUJ,GAC/C,MAAOA,IAA0B,gBAAVA,IAGzBgD,GAAY1S,UAAUmQ,iBAAmB,WACvC,MAAO,IAAI5e,OAAM,+CAGnBmhB,GAAY1S,UAAUkQ,WAAa,WACjC,GAAI2G,GAAazkB,KACb4Z,EAAU6K,EAAW7K,QACrB0D,EAAQmH,EAAW9G,OACnBsD,IAEJ,KAAK,GAAIxT,KAAO6P,GACV1D,EAAQ0B,SAAWU,IAAWlb,OAAO8M,UAAUpN,eAAejB,KAAK+d,EAAO7P,IAC5EwT,EAAQne,MACNsa,SAAU3P,EACV0L,MAAOmE,EAAM7P,IAKnB,IAAIjO,GAASyhB,EAAQzhB,MACrBilB,GAAW7G,WAAape,CAGxB,KAAK,GAFD0M,GAAS3J,OAEJtD,EAAI,EAAG2a,EAAQ0B,SAAWU,IAAW/c,EAAIO,EAAQP,IACxDiN,EAAS+U,EAAQhiB,GACjBwlB,EAAWL,WAAWlY,EAAOiN,MAAOjN,EAAOkR,WAoG/CoD,GAAY5S,UAAYuW,GAAS7D,GAAY1S,WAC7C4S,GAAY5S,UAAUuS,kBAAoB9C,EAC1CmD,GAAY5S,UAAU2W,YAAcpH,EAEpCqD,GAAY5S,UAAUmQ,iBAAmB,WACvC,MAAO,IAAI5e,OAAM,6CA2ZnB,IAAIoX,IAAM,EACN2L,GAAY3f,OAaZwiB,GAAkC,mBAAXrc,QAAyBA,OAASnG,OACzDyiB,GAAgBD,OAChBxC,GAA0ByC,GAAcC,kBAAoBD,GAAcE,uBAC1EC,GAAyB,mBAATnW,OAA2C,mBAAZ4H,IAA2D,wBAA3BoN,SAASzkB,KAAKqX,GAG7FwO,GAAwC,mBAAtBC,oBAA8D,mBAAlBC,gBAA2D,mBAAnBvC,gBAoDtGpB,GAAU,GAAI1e,OAAM,KA2BpB2e,GAAkBrf,MAGpBqf,IADEuD,GACgBtD,KACTU,GACSH,KACTgD,GACSvC,KACStgB,SAAlBwiB,IAAkD,kBAAZ/lB,GAC7BokB,KAEAjB,IAGpB,IAAIoD,IAAWhjB,MAGf,IAAoB,gBAATyM,MACTuW,GAAWvW,SAGN,CAAA,GAAsB,gBAAXkJ,GAGd,KAAM,IAAI/Y,OAAM,sCAFhBomB,IAAWrN,EAKf,GAAIsN,GAQJjiB,IAAO0X,MAAQyG,GACfne,GAAOqhB,MAAQ,SAAUa,GACvB,MAAO7P,YAAW6P,EAAI,GAExB,IAAId,IAAOzD,GAEPjG,GAAQ,SAAezC,EAAUkH,GACnC,MAAOnc,IAAO0X,MAAMzC,EAAUkH,GAYhC,IAAsB,mBAAXhX,SAA2E,gBAA1CA,QAAoC,4BAAgB,CAC9F,GAAI6P,IAAY7P,OAAoC,2BACpDkQ,GAAU,cAAc,EACxB,KAAK,GAAIe,MAAapB,IAChBA,GAAU/X,eAAemZ,KAC3BrR,GAAGqR,GAAWpB,GAAUoB,KAG7B,GAAI1Q,KAAQuc,IACXb,KAAMA,GACNrG,QAASA,EACTmF,YAAaA,GACbzF,IAAKiC,EACLG,WAAYA,EACZlC,KAAMmC,EACNE,KAAMA,GACNE,YAAaA,GACbC,QAASA,GACTC,MAAOA,GACPtB,UAAWA,EACXzG,UAAWA,EACXtQ,GAAIA,GACJkP,IAAKA,GACL+C,QAAS2G,GACT9F,OAAQ+F,GACRN,IAAKA,IACJ2C,GAAgBgC,GAAe,QAASvK,IAAQuI,GAAgBgC,GAAe,SAClFlE,IAASkE,GAETlmB,GAAiB,QAAI2J,GACrB3J,EAAQqlB,KAAOA,GACfrlB,EAAQgf,QAAUA,EAClBhf,EAAQmkB,YAAcA,GACtBnkB,EAAQ0e,IAAMiC,EACd3gB,EAAQ8gB,WAAaA,EACrB9gB,EAAQ4e,KAAOmC,EACf/gB,EAAQihB,KAAOA,GACfjhB,EAAQmhB,YAAcA,GACtBnhB,EAAQohB,QAAUA,GAClBphB,EAAQqhB,MAAQA,GAChBrhB,EAAQ+f,UAAYA,EACpB/f,EAAQsZ,UAAYA,EACpBtZ,EAAQgJ,GAAKA,GACbhJ,EAAQkY,IAAMA,GACdlY,EAAQib,QAAU2G,GAClB5hB,EAAQ8b,OAAS+F,GACjB7hB,EAAQuhB,IAAMA,GACdvhB,EAAQ2b,MAAQA,GAChB3b,EAAQgiB,OAASA,GAEjBxgB,OAAO0M,eAAelO,EAAS,cAAgByD,OAAO,QAInDxD,KAAKS,KAAKhB,EAAQ,YAA8B,mBAAXkZ,QAAyBA,OAAyB,mBAATlJ,MAAuBA,KAAyB,mBAAXtG,QAAyBA,aAE5Igd,SAAW,UAAU","file":"quantify.js","sourcesContent":["/**\n * quantify - Unit Simplifier\n * @version v0.0.1\n * @author Jason Park and Rounak Bastola\n * @link https://github.com/parkjs814/Quantify\n * @license MIT\n */\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../unit/derived_unit');\n\nvar _$ = $,\n    extend = _$.extend;\n\n\nmodule.exports = function () {\n  var _this = this;\n\n  this.unitClasses = {};\n\n  this.addUnitClass = function (Unit) {\n    var type = Unit.TYPE;\n    var symbol = Unit.SYMBOL;\n    if (!_this.unitClasses.hasOwnProperty(type)) {\n      _this.unitClasses[type] = {};\n    }\n    _this.unitClasses[type][symbol] = Unit;\n  };\n\n  this.getUnitClass = function (type, symbol) {\n    return _this.unitClasses[type][symbol];\n  };\n\n  this.getDerivedQuantities = function () {\n    var quantities = {};\n    for (var quantityName in _this.unitClasses) {\n      var unitClasses = _this.unitClasses[quantityName];\n      var unitClass = unitClasses[Object.keys(unitClasses)[0]];\n      if (unitClass.BASE) continue;\n      quantities[quantityName] = {\n        name: quantityName,\n        types: unitClass.UNITLESS.types\n      };\n    }\n    return quantities;\n  };\n\n  this.getUnitClasses = function (q) {\n    if (q) return _this.unitClasses[q];\n    var unitClasses = {};\n    for (var quantity in _this.unitClasses) {\n      extend(true, unitClasses, _this.unitClasses[quantity]);\n    }\n    return unitClasses;\n  };\n\n  this.getStandardUnitClass = function (quantity) {\n    var unitClasses = _this.unitClasses[quantity];\n    for (var symbol in unitClasses) {\n      var unitClass = unitClasses[symbol];\n      if (unitClass.QUANTITY == 1) {\n        if (!unitClass.BASE) {\n          while (unitClass.PARENT !== DerivedUnit) {\n            unitClass = unitClass.PARENT;\n          }\n        }\n        return unitClass;\n      }\n    }\n    return unitClasses[Object.keys(unitClasses)[0]];\n  };\n};\n\n},{\"../unit/derived_unit\":13}],2:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {};\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nvar setupMain = require('./setup_main');\n\nmodule.exports = {\n  setupMain: setupMain\n};\n\n},{\"./setup_main\":4}],4:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar Server = require('../../server');\nvar app = require('../../app');\n\nmodule.exports = function () {\n  var $input = $('#input');\n  var config = {\n    handlers: {\n      edit: function edit() {\n        $input.removeClass('active error');\n      }\n    }\n  };\n  var mathField = MQ.MathField($input[0], config);\n  var $equal = $('#equal');\n  $equal.click(function () {\n    try {\n      (function () {\n        var unitless = Server.refineLaTeX(mathField.latex());\n        var combinations = Server.search(unitless);\n        $('.result-container:not(.template)').remove();\n        var MAX_SHOWN = 10;\n        combinations.every(function (combination, i) {\n          renderCombination(unitless, combination);\n          return i + 1 < MAX_SHOWN;\n        });\n        $input.addClass('active');\n      })();\n    } catch (err) {\n      console.error(err);\n      $input.addClass('error');\n    }\n  });\n  $input.keyup(function (event) {\n    if (event.keyCode == 13) {\n      $equal.click();\n    }\n  });\n};\n\nvar renderCombination = function renderCombination(unitless, combination) {\n  var factor = 1;\n  var powers = [];\n\n  var _arr = [combination.derivedQuantities, combination.baseQuantities];\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var quantities = _arr[_i];\n    for (var quantity in quantities) {\n      var unitClass = app.getStandardUnitClass(quantity);\n      factor *= Math.pow(unitClass.QUANTITY, quantities[quantity]);\n      powers.push([unitClass, quantities[quantity]]);\n    }\n  }\n\n  var latex = getLaTeX(unitless, factor, powers);\n\n  var $templateResultContainer = $('.result-container.template');\n  var $resultContainer = $templateResultContainer.clone();\n  var $answer = $resultContainer.find('.answer');\n  $resultContainer.removeClass('template');\n  $answer.text(latex);\n  var staticMath = MQ.StaticMath($answer[0]);\n  $resultContainer.insertBefore($templateResultContainer);\n  var $templateSelectorWrapper = $resultContainer.find('.selector-wrapper.template');\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var _step$value = _slicedToArray(_step.value, 1),\n          unitClass = _step$value[0];\n\n      var quantity = unitClass.TYPE;\n      var $selectorWrapper = $templateSelectorWrapper.clone();\n      $selectorWrapper.removeClass('template');\n      $selectorWrapper.find('.quantity').text(quantity);\n      var $selected = $selectorWrapper.find('.selected');\n      $selected.text(unitClass.SYMBOL);\n      var $ul = $selectorWrapper.find('ul');\n      var unitClasses = app.getUnitClasses(quantity);\n      for (var symbol in unitClasses) {\n        var $li = $('<li>' + symbol + '</li>');\n        $li.click(function () {\n          var symbol = $(this).text();\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = powers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var power = _step2.value;\n\n              var _unitClass = unitClasses[symbol];\n              if (power[0].TYPE == quantity) {\n                factor /= Math.pow(power[0].QUANTITY, power[1]);\n                power[0] = _unitClass;\n                factor *= Math.pow(power[0].QUANTITY, power[1]);\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          var latex = getLaTeX(unitless, factor, powers);\n          staticMath.latex(latex);\n        });\n        $ul.append($li);\n      }\n      $selectorWrapper.insertBefore($templateSelectorWrapper);\n    };\n\n    for (var _iterator = powers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      _loop();\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n};\n\nvar getLaTeX = function getLaTeX(unitless, factor, powers) {\n  var mulSymbols = [],\n      divSymbols = [];\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = powers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var power = _step3.value;\n\n      if (power[1] > 0) {\n        if (power[1] > 1) {\n          mulSymbols.push(power[0].SYMBOL + '^' + power[1]);\n        } else {\n          mulSymbols.push(power[0].SYMBOL);\n        }\n      } else {\n        if (power[1] < -1) {\n          divSymbols.push(power[0].SYMBOL + '^' + -power[1]);\n        } else {\n          divSymbols.push(power[0].SYMBOL);\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  var value = unitless.quantity / factor;\n  if (Math.abs(value) > 1e5 || Math.abs(value) < 1e-5) {\n    value = value.toExponential(5);\n  } else {\n    value = value.toPrecision(5);\n  }\n  var latex = value + '\\\\ ' + mulSymbols.join('\\\\cdot ');\n  if (divSymbols.length) {\n    if (divSymbols.length > 1) {\n      latex += ' / (' + divSymbols.join('\\\\cdot ') + ')';\n    } else {\n      latex += ' / ' + divSymbols[0];\n    }\n  }\n  return latex;\n};\n\n},{\"../../app\":2,\"../../server\":9}],5:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar DOM = require('./dom');\nvar Server = require('./server');\nvar app = require('./app');\nvar App = require('./app/constructor');\nvar Unit = require('./unit');\nvar _$ = $,\n    extend = _$.extend;\n\n// set global promise error handler\n\nRSVP.on('error', function (reason) {\n  console.assert(false, reason);\n});\n\nextend(true, app, new App());\n\nUnit.register();\n\nextend(true, window, {\n  main: DOM.setupMain\n});\n\n},{\"./app\":2,\"./app/constructor\":1,\"./dom\":3,\"./server\":9,\"./unit\":14,\"rsvp\":42}],6:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app/index');\n\nmodule.exports = function (mulPairs, divPairs) {\n  var mulClasses = [];\n  var divClasses = [];\n\n  var queue = [];\n  mulPairs.forEach(function (mulPair) {\n    var type = mulPair[0];\n    var symbol = mulPair[1];\n    queue.push({\n      cls: app.getUnitClass(type, symbol),\n      inverse: false\n    });\n  });\n  divPairs.forEach(function (divPair) {\n    var type = divPair[0];\n    var symbol = divPair[1];\n    queue.push({\n      cls: app.getUnitClass(type, symbol),\n      inverse: true\n    });\n  });\n\n  var _loop = function _loop() {\n    var e = queue.shift();\n    if (e.cls.BASE) {\n      (e.inverse ? divClasses : mulClasses).push(e.cls);\n    } else {\n      e.cls.MULS.forEach(function (mulClass) {\n        queue.push({\n          cls: mulClass,\n          inverse: e.inverse\n        });\n      });\n      e.cls.DIVS.forEach(function (divClass) {\n        queue.push({\n          cls: divClass,\n          inverse: !e.inverse\n        });\n      });\n    }\n  };\n\n  while (queue.length > 0) {\n    _loop();\n  }\n\n  return { mulClasses: mulClasses, divClasses: divClasses };\n};\n\n},{\"../app/index\":2}],7:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (mulClasses, divClasses) {\n  var quantity = 1;\n  var types = {};\n  mulClasses.forEach(function (mulClass) {\n    quantity *= mulClass.QUANTITY;\n    if (types.hasOwnProperty(mulClass.TYPE)) {\n      types[mulClass.TYPE]++;\n    } else {\n      types[mulClass.TYPE] = 1;\n    }\n  });\n  divClasses.forEach(function (divClass) {\n    quantity /= divClass.QUANTITY;\n    if (types.hasOwnProperty(divClass.TYPE)) {\n      types[divClass.TYPE]--;\n    } else {\n      types[divClass.TYPE] = -1;\n    }\n  });\n  var refinedTypes = {};\n  for (var type in types) {\n    var n = types[type];\n    if (n != 0) refinedTypes[type] = n;\n  }\n\n  return { types: types, quantity: quantity };\n};\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app/index');\n\nmodule.exports = function (symbol) {\n  var unitClasses = app.getUnitClasses();\n  for (var unitSymbol in unitClasses) {\n    var unitClass = unitClasses[unitSymbol];\n    if (unitClass.SYMBOL == symbol) return unitClass;\n  }\n};\n\n},{\"../app/index\":2}],9:[function(require,module,exports){\n'use strict';\n\nvar getMulAndDivClasses = require('./get_mul_and_div_classes');\nvar identifyUnit = require('./identify_unit');\nvar getUnitless = require('./get_unitless');\nvar refineLaTeX = require('./refine_latex');\nvar search = require('./search');\n\nmodule.exports = {\n  getMulAndDivClasses: getMulAndDivClasses,\n  identifyUnit: identifyUnit,\n  getUnitless: getUnitless,\n  refineLaTeX: refineLaTeX,\n  search: search\n};\n\n},{\"./get_mul_and_div_classes\":6,\"./get_unitless\":7,\"./identify_unit\":8,\"./refine_latex\":10,\"./search\":11}],10:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar app = require('../app/index');\n\nmodule.exports = function (latex) {\n  var unitClasses = app.getUnitClasses();\n  latex = latex.replace(/\\\\ /g, '');\n  latex = latex.replace(/\\\\left\\(/g, '(');\n  latex = latex.replace(/\\\\right\\)/g, ')');\n  var replaced = null;\n  while (replaced != latex) {\n    latex = replaced || latex;\n    replaced = latex;\n    replaced = infiniteReplace(replaced, /\\(([^()]+)\\)\\^/g, '[($1)]^');\n    replaced = infiniteReplace(replaced, /\\^{([^{}]+)}/g, '^($1)');\n    replaced = infiniteReplace(replaced, /\\\\frac{([^{}]+)}{([^{}]+)}/g, '($1)/($2)');\n  }\n  latex = latex.replace(/\\\\cdot/g, '*');\n  latex = latex.replace(/(\\\\| )/g, '');\n  latex = latex.replace(/(?!a-zA-ZΩ°µ)((?:[a-zA-Z]|Ω|°|µ)+)(?!a-zA-ZΩ°µ)/g, function (match, symbol) {\n    if (symbol.toLowerCase() == 'e') return symbol;\n    return '$$' + JSON.stringify(unitClasses[symbol].UNITLESS) + '$$';\n  });\n  latex = infiniteReplace(latex, /(?:\\(|^)([^()]+)(?:\\)|$)/g, function (match, content) {\n    var replaced;\n\n    replaced = null;\n\n    var _loop = function _loop() {\n      content = replaced || content;\n      replaced = content;\n      replaced = replaced.replace(/\\[([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)]\\^([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)/g, function (match, value, power) {\n        return Math.pow(value, power);\n      });\n      replaced = replaced.replace(/([0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)\\^([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)/g, function (match, value, power) {\n        return Math.pow(value, power);\n      });\n      var dst = function dst(match, unitless, power) {\n        unitless = JSON.parse(unitless);\n        unitless.quantity = Math.pow(unitless.quantity, power);\n        for (var type in unitless.types) {\n          unitless.types[type] *= power;\n          if (unitless.types[type] == 0) {\n            delete unitless.types[type];\n          }\n        }\n        return '$$' + JSON.stringify(unitless) + '$$';\n      };\n      replaced = replaced.replace(/\\$\\$([^(\\$\\$)]+)\\$\\$\\^([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)/g, dst);\n      replaced = replaced.replace(/\\[([-+]?)\\$\\$([^(\\$\\$)]+)\\$\\$\\]\\^([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)/g, function (match, sign, unitless, power) {\n        if (sign == '-') {\n          unitless = JSON.parse(unitless);\n          unitless.quantity *= -1;\n          unitless = JSON.stringify(unitless);\n        }\n        return dst(match, unitless, power);\n      });\n    };\n\n    while (replaced != content) {\n      _loop();\n    }\n\n    replaced = null;\n    while (replaced != content) {\n      content = replaced || content;\n      replaced = content;\n      replaced = replaced.replace(/([0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)(\\*|\\/)([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)/g, function (match, value1, sign, value2) {\n        value1 = Number(value1);\n        value2 = Number(value2);\n        return sign == '/' ? value1 / value2 : value1 * value2;\n      });\n      replaced = replaced.replace(/([0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)(\\*|\\/|)\\$\\$([^(\\$\\$)]+)\\$\\$/g, function (match, value, sign, unitless) {\n        return MDUnitlesses({ types: {}, quantity: Number(value) }, sign, JSON.parse(unitless));\n      });\n      replaced = replaced.replace(/\\$\\$([^(\\$\\$)]+)\\$\\$(\\*|\\/)([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)/g, function (match, unitless, sign, value) {\n        return MDUnitlesses(JSON.parse(unitless), sign, { types: {}, quantity: Number(value) });\n      });\n      replaced = replaced.replace(/\\$\\$([^(\\$\\$)]+)\\$\\$(\\*|\\/|)\\$\\$([^(\\$\\$)]+)\\$\\$/g, function (match, unitless1, sign, unitless2) {\n        return MDUnitlesses(JSON.parse(unitless1), sign, JSON.parse(unitless2));\n      });\n    }\n\n    replaced = null;\n    while (replaced != content) {\n      content = replaced || content;\n      replaced = content;\n      replaced = replaced.replace(/([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)(\\+|-)([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)/g, function (match, value1, sign, value2) {\n        value1 = Number(value1);\n        value2 = Number(value2);\n        var result = sign == '+' ? value1 + value2 : value1 - value2;\n        return (result >= 0 ? '+' : '') + result;\n      });\n      replaced = replaced.replace(/([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)(\\+|-)\\$\\$([^(\\$\\$)]+)\\$\\$/g, function (match, value, sign, unitless) {\n        return PMUnitlesses({ types: {}, quantity: Number(value) }, sign, JSON.parse(unitless));\n      });\n      replaced = replaced.replace(/([-+]?)\\$\\$([^(\\$\\$)]+)\\$\\$(\\+|-)([0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)/g, function (match, sign1, unitless, sign2, value) {\n        unitless = JSON.parse(unitless);\n        unitless.quantity *= sign1 == '-' ? -1 : 1;\n        return PMUnitlesses(unitless, sign2, { types: {}, quantity: Number(value) });\n      });\n      replaced = replaced.replace(/([-+]?)\\$\\$([^(\\$\\$)]+)\\$\\$(\\+|-)\\$\\$([^(\\$\\$)]+)\\$\\$/g, function (match, sign1, unitless1, sign2, unitless2) {\n        unitless1 = JSON.parse(unitless1);\n        unitless1.quantity *= sign1 == '-' ? -1 : 1;\n        return PMUnitlesses(unitless1, sign2, JSON.parse(unitless2));\n      });\n    }\n    return content;\n  });\n\n  if (isNaN(latex)) {\n    var _latex$split = latex.split('$$'),\n        _latex$split2 = _slicedToArray(_latex$split, 2),\n        sign = _latex$split2[0],\n        unitless = _latex$split2[1];\n\n    unitless = JSON.parse(unitless);\n    if (sign == '-') unitless.quantity *= -1;\n    return unitless;\n  }\n  return { types: {}, quantity: Number(latex) };\n};\n\nvar MDUnitlesses = function MDUnitlesses(unitless1, sign, unitless2) {\n  if (sign == '/') {\n    unitless1.quantity /= unitless2.quantity;\n  } else {\n    unitless1.quantity *= unitless2.quantity;\n  }\n  for (var type in unitless2.types) {\n    if (!unitless1.types.hasOwnProperty(type)) {\n      unitless1.types[type] = (sign == '/' ? -1 : 1) * unitless2.types[type];\n    } else {\n      unitless1.types[type] += (sign == '/' ? -1 : 1) * unitless2.types[type];\n    }\n    if (unitless1.types[type] == 0) {\n      delete unitless1.types[type];\n    }\n  }\n  return '$$' + JSON.stringify(unitless1) + '$$';\n};\n\nvar PMUnitlesses = function PMUnitlesses(unitless1, sign, unitless2) {\n  if (Object.keys(unitless1.types).length != Object.keys(unitless2.types).length) return null;\n  for (var type in unitless2.types) {\n    if (unitless2.types[type] != unitless1.types[type]) return null;\n  }\n  if (sign == '+') {\n    unitless1.quantity += unitless2.quantity;\n  } else {\n    unitless1.quantity -= unitless2.quantity;\n  }\n  return '+$$' + JSON.stringify(unitless1) + '$$';\n};\n\nvar infiniteReplace = function infiniteReplace(str, src, dst) {\n  var replaced = null;\n  while (replaced != str) {\n    str = replaced || str;\n    replaced = str.replace(src, dst);\n  }\n  return str;\n};\n\n},{\"../app/index\":2}],11:[function(require,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar app = require('../app');\n\nvar _$ = $,\n    extend = _$.extend;\n\nvar Combination = function () {\n  function Combination(derivedQuantities, baseQuantities, lastQuantity) {\n    var countCalculation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    _classCallCheck(this, Combination);\n\n    this.derivedQuantities = derivedQuantities;\n    this.baseQuantities = baseQuantities;\n    this.lastQuantity = lastQuantity;\n    if (countCalculation) this.calculateCount();\n  }\n\n  _createClass(Combination, [{\n    key: 'calculateCount',\n    value: function calculateCount() {\n      var count = 0;\n      for (var type in this.derivedQuantities) {\n        count += Math.abs(this.derivedQuantities[type]);\n      }\n      for (var _type in this.baseQuantities) {\n        count += Math.abs(this.baseQuantities[_type]);\n      }\n      this.count = count;\n    }\n  }, {\n    key: 'countDerivedUnits',\n    value: function countDerivedUnits() {\n      var count = 0;\n      for (var type in this.derivedQuantities) {\n        count += Math.abs(this.derivedQuantities[type]);\n      }\n      return count;\n    }\n  }, {\n    key: 'create',\n    value: function create(quantity, inverse) {\n      var factor = inverse ? -1 : 1;\n      var new_ = new Combination(extend(true, {}, this.derivedQuantities), extend(true, {}, this.baseQuantities), quantity.name, false);\n\n      var type = quantity.name;\n      if (!new_.derivedQuantities.hasOwnProperty(type)) {\n        new_.derivedQuantities[type] = factor;\n      } else {\n        if (new_.derivedQuantities[type] / factor < 0) return null;\n        new_.derivedQuantities[type] += factor;\n      }\n\n      var types = quantity.types;\n      for (var _type2 in types) {\n        if (!new_.baseQuantities.hasOwnProperty(_type2)) {\n          new_.baseQuantities[_type2] = -factor * types[_type2];\n        } else {\n          new_.baseQuantities[_type2] -= factor * types[_type2];\n        }\n        if (new_.baseQuantities[_type2] == 0) {\n          delete new_.baseQuantities[_type2];\n        }\n      }\n\n      new_.calculateCount();\n      return new_;\n    }\n  }]);\n\n  return Combination;\n}();\n\nmodule.exports = function (unitless) {\n  var MAX_COMBINATION = 10;\n  var queue = [new Combination({}, unitless.types, null)];\n  var quantities = app.getDerivedQuantities();\n  var combinations = [];\n  for (var i = 0; i < MAX_COMBINATION; i++) {\n    combinations.push([]);\n  }\n  while (queue.length > 0) {\n    var e = queue.shift();\n    if (e == null) continue;\n    if (e.count < MAX_COMBINATION) {\n      combinations[e.count].push(e);\n    }\n    if (e.countDerivedUnits() < 4) {\n      var start = e.lastQuantity == null;\n      for (var quantityName in quantities) {\n        if (quantityName == e.lastQuantity) start = true;\n        if (!start) continue;\n        var quantity = quantities[quantityName];\n        queue.push(e.create(quantity, false));\n        queue.push(e.create(quantity, true));\n      }\n    }\n  }\n  var plain = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = combinations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var cs = _step.value;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = cs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var c = _step2.value;\n\n          plain.push(c);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return plain;\n};\n\n},{\"../app\":2}],12:[function(require,module,exports){\n'use strict';\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar app = require('../app');\n\nvar BaseUnit = function BaseUnit(value) {\n  _classCallCheck(this, BaseUnit);\n\n  this.value = value;\n};\n\nBaseUnit.BASE = BaseUnit.prototype.base = true;\nBaseUnit.QUANTITY = BaseUnit.prototype.quantity = 1;\n\nBaseUnit.register = function (type, name, symbol) {\n  var quantity = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var parentSymbol = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n  var ParentUnit = parentSymbol ? app.getUnitClass(type, parentSymbol) : BaseUnit;\n  quantity *= ParentUnit.QUANTITY;\n\n  var Unit = function (_ParentUnit) {\n    _inherits(Unit, _ParentUnit);\n\n    function Unit(value) {\n      _classCallCheck(this, Unit);\n\n      return _possibleConstructorReturn(this, (Unit.__proto__ || Object.getPrototypeOf(Unit)).call(this, value));\n    }\n\n    return Unit;\n  }(ParentUnit);\n\n  Unit.TYPE = Unit.prototype.type = type;\n  Unit.NAME = Unit.prototype.name = name;\n  Unit.SYMBOL = Unit.prototype.symbol = symbol;\n  Unit.QUANTITY = Unit.prototype.quantity = quantity;\n  Unit.UNITLESS = { types: {}, quantity: quantity };\n  Unit.UNITLESS.types[type] = 1;\n\n  app.addUnitClass(Unit);\n};\n\nmodule.exports = BaseUnit;\n\n},{\"../app\":2}],13:[function(require,module,exports){\n'use strict';\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar app = require('../app');\nvar Server = require('../server');\n\nvar DerivedUnit = function DerivedUnit(value) {\n  _classCallCheck(this, DerivedUnit);\n\n  this.value = value;\n};\n\nDerivedUnit.BASE = DerivedUnit.prototype.base = false;\nDerivedUnit.QUANTITY = DerivedUnit.prototype.quantity = 1;\nDerivedUnit.MULS = DerivedUnit.prototype.muls = [];\nDerivedUnit.DIVS = DerivedUnit.prototype.divs = [];\n\nDerivedUnit.register = function (type, name, symbol, mulPairs, divPairs) {\n  var quantity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var parentSymbol = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n\n  var _Server$getMulAndDivC = Server.getMulAndDivClasses(mulPairs, divPairs),\n      mulClasses = _Server$getMulAndDivC.mulClasses,\n      divClasses = _Server$getMulAndDivC.divClasses;\n\n  var ParentUnit = parentSymbol ? app.getUnitClass(type, parentSymbol) : DerivedUnit;\n  quantity *= ParentUnit.QUANTITY;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = mulClasses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var mulClass = _step.value;\n      quantity *= mulClass.QUANTITY;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = divClasses[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var divClass = _step2.value;\n      quantity /= divClass.QUANTITY;\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  mulClasses = ParentUnit.MULS.concat(mulClasses);\n  divClasses = ParentUnit.DIVS.concat(divClasses);\n\n  var Unit = function (_ParentUnit) {\n    _inherits(Unit, _ParentUnit);\n\n    function Unit(value) {\n      _classCallCheck(this, Unit);\n\n      return _possibleConstructorReturn(this, (Unit.__proto__ || Object.getPrototypeOf(Unit)).call(this, value));\n    }\n\n    return Unit;\n  }(ParentUnit);\n\n  Unit.TYPE = Unit.prototype.type = type;\n  Unit.NAME = Unit.prototype.name = name;\n  Unit.SYMBOL = Unit.prototype.symbol = symbol;\n  Unit.MULS = Unit.prototype.muls = mulClasses;\n  Unit.DIVS = Unit.prototype.divs = divClasses;\n  Unit.QUANTITY = Unit.prototype.quantity = quantity;\n  Unit.UNITLESS = Server.getUnitless(mulClasses, divClasses);\n  Unit.UNITLESS.quantity = quantity;\n  Unit.PARENT = ParentUnit;\n\n  app.addUnitClass(Unit);\n};\n\nmodule.exports = DerivedUnit;\n\n},{\"../app\":2,\"../server\":9}],14:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('./base_unit');\nvar DerivedUnit = require('./derived_unit');\nvar register = require('./register');\n\nmodule.exports = {\n  BaseUnit: BaseUnit,\n  DerivedUnit: DerivedUnit,\n  register: register\n};\n\n},{\"./base_unit\":12,\"./derived_unit\":13,\"./register\":24}],15:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'Newton';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'Newtons', 'N', [['mass', 'Kg'], ['length', 'm']], [['time', 's'], ['time', 's']]);\n  DerivedUnit.register(type, 'Kilo Newtons', 'KN', [], [], 1e3, 'N');\n  DerivedUnit.register(type, 'Mega Newtons', 'MN', [], [], 1e6, 'N');\n  DerivedUnit.register(type, 'Giga Newtons', 'GN', [], [], 1e9, 'N');\n  DerivedUnit.register(type, 'milli Newtons', 'mN', [], [], 1e-3, 'N');\n  DerivedUnit.register(type, 'micro Newtons', 'μN', [], [], 1e-6, 'N');\n  DerivedUnit.register(type, 'nano Newtons', 'nN', [], [], 1e-9, 'N');\n};\n\n},{\"../derived_unit\":13}],16:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'angle';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'radian', '', 1);\n  BaseUnit.register(type, 'radian', 'rad', 1);\n  BaseUnit.register(type, 'degree', '°', 57.2958, '');\n};\n\n},{\"../base_unit\":12}],17:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'area';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'acre', 'acre', [['length', 'm'], ['length', 'm']], [], 4046.86);\n  DerivedUnit.register(type, 'hectare', 'ha', [['length', 'm'], ['length', 'm']], [], 10000);\n};\n\n},{\"../derived_unit\":13}],18:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'coulomb';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'coulomb', 'C', [['current', 'A'], ['time', 's']], []);\n  DerivedUnit.register(type, 'kilo coulomb', 'KC', [], [], 1e3, 'C');\n  DerivedUnit.register(type, 'Mega coulomb', 'MC', [], [], 1e6, 'C');\n  DerivedUnit.register(type, 'Giga coulomb', 'GC', [], [], 1e9, 'C');\n  DerivedUnit.register(type, 'milli coulomb', 'mC', [], [], 1e-3, 'C');\n  DerivedUnit.register(type, 'micro coulomb', 'μC', [], [], 1e-6, 'C');\n  DerivedUnit.register(type, 'nano coulomb', 'nC', [], [], 1e-9, 'C');\n};\n\n},{\"../derived_unit\":13}],19:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'current';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'Ampere', 'A', 1);\n  BaseUnit.register(type, 'centi Ampere', 'cA', 1e-2, 'A');\n  BaseUnit.register(type, 'Kilo Ampere', 'KA', 1e3, 'A');\n  BaseUnit.register(type, 'milli Ampere', 'mA', 1e-3, 'A');\n  BaseUnit.register(type, 'micro Ampere', 'µA', 1e-6, 'A');\n  BaseUnit.register(type, 'nano Ampere', 'nA', 1e-9, 'A');\n  BaseUnit.register(type, 'pico Ampere', 'pA', 1e-12, 'A');\n};\n\n},{\"../base_unit\":12}],20:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'energy';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'joule', 'J', [['mass', 'Kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's']]);\n  DerivedUnit.register(type, 'Kilo joule', 'KJ', [], [], 1e3, 'J');\n  DerivedUnit.register(type, 'Mega joule', 'MJ', [], [], 1e6, 'J');\n  DerivedUnit.register(type, 'Giga joule', 'GJ', [], [], 1e9, 'J');\n  DerivedUnit.register(type, 'milli joule', 'mJ', [], [], 1e-3, 'J');\n  DerivedUnit.register(type, 'micro joule', 'μJ', [], [], 1e-6, 'J');\n  DerivedUnit.register(type, 'nano joule', 'nJ', [], [], 1e-9, 'J');\n  DerivedUnit.register(type, 'foot pounds', 'ft-lb', [], [], 0.737562, 'J');\n  DerivedUnit.register(type, 'electron volt', 'eV', [], [], 8.462e+18, 'ft-lb');\n};\n\n},{\"../derived_unit\":13}],21:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'farad';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'farad', 'F', [['time', 's'], ['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']], [['mass', 'Kg'], ['length', 'm'], ['length', 'm']]);\n  DerivedUnit.register(type, 'Kilo farad', 'KF', [], [], 1e3, 'F');\n  DerivedUnit.register(type, 'Mega farad', 'MF', [], [], 1e6, 'F');\n  DerivedUnit.register(type, 'Giga farad', 'GF', [], [], 1e9, 'F');\n  DerivedUnit.register(type, 'milli farad', 'mF', [], [], 1e-3, 'F');\n  DerivedUnit.register(type, 'micro farad', 'μF', [], [], 1e-6, 'F');\n  DerivedUnit.register(type, 'nano farad', 'nF', [], [], 1e-9, 'F');\n};\n\n},{\"../derived_unit\":13}],22:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'henry';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'henry', 'H', [['mass', 'Kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']]);\n  DerivedUnit.register(type, 'Kilo henry', 'KH', [], [], 1e3, 'H');\n  DerivedUnit.register(type, 'Mega henry', 'MH', [], [], 1e6, 'H');\n  DerivedUnit.register(type, 'Giga henry', 'GH', [], [], 1e9, 'H');\n  DerivedUnit.register(type, 'milli henry', 'mH', [], [], 1e-3, 'H');\n  DerivedUnit.register(type, 'micro henry', 'μH', [], [], 1e-6, 'H');\n  DerivedUnit.register(type, 'nano henry', 'nH', [], [], 1e-9, 'H');\n};\n\n},{\"../derived_unit\":13}],23:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'hertz';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'hertz', 'Hz', [], [['time', 's']]);\n  DerivedUnit.register(type, 'Kilo hertz', 'KHz', [], [], 1e3, 'Hz');\n  DerivedUnit.register(type, 'Mega hertz', 'MHz', [], [], 1e6, 'Hz');\n  DerivedUnit.register(type, 'Giga hertz', 'GHz', [], [], 1e9, 'Hz');\n  DerivedUnit.register(type, 'milli hertz', 'mHz', [], [], 1e-3, 'Hz');\n  DerivedUnit.register(type, 'micro hertz', 'μHz', [], [], 1e-6, 'Hz');\n  DerivedUnit.register(type, 'nano hertz', 'nHz', [], [], 1e-9, 'Hz');\n};\n\n},{\"../derived_unit\":13}],24:[function(require,module,exports){\n'use strict';\n\nvar length = require('./length');\nvar mass = require('./mass');\nvar time = require('./time');\nvar angle = require('./angle');\nvar current = require('./current');\nvar temp = require('./temp');\nvar matter = require('./matter');\nvar intensity = require('./intensity');\nvar storage = require('./storage');\nvar energy = require('./energy');\nvar pascal = require('./pascal');\nvar Newton = require('./Newton');\nvar hertz = require('./hertz');\nvar watt = require('./watt');\nvar coulomb = require('./coulomb');\nvar volt = require('./volt');\nvar farad = require('./farad');\nvar ohm = require('./ohm');\nvar siemens = require('./siemens');\nvar weber = require('./weber');\nvar tesla = require('./tesla');\nvar henry = require('./henry');\nvar lux = require('./lux');\nvar volume = require('./volume');\nvar area = require('./area');\n\nmodule.exports = function () {\n  length();\n  mass();\n  time();\n  angle();\n  current();\n  temp();\n  matter();\n  intensity();\n  storage();\n  energy();\n  pascal();\n  Newton();\n  hertz();\n  watt();\n  coulomb();\n  volt();\n  farad();\n  ohm();\n  siemens();\n  weber();\n  tesla();\n  henry();\n  lux();\n  volume();\n  area();\n};\n\n},{\"./Newton\":15,\"./angle\":16,\"./area\":17,\"./coulomb\":18,\"./current\":19,\"./energy\":20,\"./farad\":21,\"./henry\":22,\"./hertz\":23,\"./intensity\":25,\"./length\":26,\"./lux\":27,\"./mass\":28,\"./matter\":29,\"./ohm\":30,\"./pascal\":31,\"./siemens\":32,\"./storage\":33,\"./temp\":34,\"./tesla\":35,\"./time\":36,\"./volt\":37,\"./volume\":38,\"./watt\":39,\"./weber\":40}],25:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'intensity';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'candela', 'cd', 1);\n};\n\n},{\"../base_unit\":12}],26:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'length';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'meter', 'm', 1);\n  BaseUnit.register(type, 'centi meter', 'cm', 1e-2, 'm');\n  BaseUnit.register(type, 'Kilo meter', 'Km', 1e3, 'm');\n  BaseUnit.register(type, 'milli meter', 'mm', 1e-3, 'm');\n  BaseUnit.register(type, 'micro meter', 'µm', 1e-6, 'm');\n  BaseUnit.register(type, 'nano meter', 'nm', 1e-9, 'm');\n  BaseUnit.register(type, 'pico meter', 'pm', 1e-12, 'm');\n  BaseUnit.register(type, 'feet', 'ft', 0.3048, 'm');\n  BaseUnit.register(type, 'yard', 'yd', 3.000, 'ft');\n  BaseUnit.register(type, 'mile', 'mi', 1760, 'yd');\n  BaseUnit.register(type, 'inch', 'in', 1.5783e-5, 'mi');\n};\n\n},{\"../base_unit\":12}],27:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'lux';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'lux', 'lx', [['intensity', 'cd']], [['length', 'm'], ['length', 'm']]);\n  DerivedUnit.register(type, 'Kilo lux', 'Klx', [], [], 1e3, 'lx');\n  DerivedUnit.register(type, 'Mega lux', 'Mlx', [], [], 1e6, 'lx');\n  DerivedUnit.register(type, 'Giga lux', 'Glx', [], [], 1e9, 'lx');\n  DerivedUnit.register(type, 'milli lux', 'mlx', [], [], 1e-3, 'lx');\n  DerivedUnit.register(type, 'micro lux', 'μlx', [], [], 1e-6, 'lx');\n  DerivedUnit.register(type, 'nano lux', 'nlx', [], [], 1e-9, 'lx');\n};\n\n},{\"../derived_unit\":13}],28:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'mass';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'grams', 'g', 1);\n  BaseUnit.register(type, 'deci grams', 'dg', 1e-1, 'g');\n  BaseUnit.register(type, 'centi grams', 'cg', 1e-2, 'g');\n  BaseUnit.register(type, 'kilo grams', 'Kg', 1e3, 'g');\n  BaseUnit.register(type, 'milli grams', 'mg', 1e-3, 'g');\n  BaseUnit.register(type, 'nano grams', 'ng', 1e-9, 'g');\n  BaseUnit.register(type, 'pico grams', 'pg', 1e-12, 'g');\n  BaseUnit.register(type, 'pounds', 'lb', 453.59237, 'g');\n  BaseUnit.register(type, 'ounces', 'oz', 0.0625, 'lb');\n};\n\n},{\"../base_unit\":12}],29:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'matter';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'atoms', 'atom', 1);\n  BaseUnit.register(type, 'moles', 'mol', 6.022140857e23, 'atom');\n};\n\n},{\"../base_unit\":12}],30:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'ohm';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'ohm', 'Ω', [['mass', 'Kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']]);\n  DerivedUnit.register(type, 'Kilo ohm', 'KΩ', [], [], 1e3, 'Ω');\n  DerivedUnit.register(type, 'Mega ohm', 'MΩ', [], [], 1e6, 'Ω');\n  DerivedUnit.register(type, 'Giga ohm', 'GΩ', [], [], 1e9, 'Ω');\n  DerivedUnit.register(type, 'milli ohm', 'mΩ', [], [], 1e-3, 'Ω');\n  DerivedUnit.register(type, 'micro ohm', 'μΩ', [], [], 1e-6, 'Ω');\n  DerivedUnit.register(type, 'nano ohm', 'nΩ', [], [], 1e-9, 'Ω');\n};\n\n},{\"../derived_unit\":13}],31:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'pascal';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'pascal', 'Pa', [['mass', 'Kg']], [['length', 'm'], ['time', 's'], ['time', 's']]);\n  DerivedUnit.register(type, 'Kilo pascal', 'KPa', [], [], 1e3, 'Pa');\n  DerivedUnit.register(type, 'bar', 'bar', [], [], 1e5, 'Pa');\n  DerivedUnit.register(type, 'Mega pascal', 'MPa', [], [], 1e6, 'Pa');\n  DerivedUnit.register(type, 'Giga pascal', 'GPa', [], [], 1e9, 'Pa');\n  DerivedUnit.register(type, 'milli pascal', 'mPa', [], [], 1e-3, 'Pa');\n  DerivedUnit.register(type, 'micro pascal', 'μPa', [], [], 1e-6, 'Pa');\n  DerivedUnit.register(type, 'nano pascal', 'nPa', [], [], 1e-9, 'Pa');\n  DerivedUnit.register(type, 'atmosphere', 'atm', [], [], 101325, 'Pa');\n};\n\n},{\"../derived_unit\":13}],32:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'siemens';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'siemens', 'S', [['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']], [['mass', 'Kg'], ['length', 'm'], ['length', 'm']]);\n  DerivedUnit.register(type, 'Kilo siemens', 'KS', [], [], 1e3, 'S');\n  DerivedUnit.register(type, 'Mega siemens', 'MS', [], [], 1e6, 'S');\n  DerivedUnit.register(type, 'Giga siemens', 'GS', [], [], 1e9, 'S');\n  DerivedUnit.register(type, 'milli siemens', 'mS', [], [], 1e-3, 'S');\n  DerivedUnit.register(type, 'micro siemens', 'μS', [], [], 1e-6, 'S');\n  DerivedUnit.register(type, 'nano siemens', 'nS', [], [], 1e-9, 'S');\n};\n\n},{\"../derived_unit\":13}],33:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'storage';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'bit', 'bit', 1);\n  BaseUnit.register(type, 'byte', 'byte', 0.125, 'bit');\n  BaseUnit.register(type, 'Kilo byte', 'Kbyte', 1e3, 'byte');\n  BaseUnit.register(type, 'Mega byte', 'Mbyte', 1e6, 'byte');\n  BaseUnit.register(type, 'Giga byte', 'Gbyte', 1e9, 'byte');\n  BaseUnit.register(type, 'Tera byte', 'Tbyte', 1e12, 'byte');\n  BaseUnit.register(type, 'Peta byte', 'Pm', 1e15, 'byte');\n  BaseUnit.register(type, 'Exa byte', 'Ebyte', 1e18, 'byte');\n  BaseUnit.register(type, 'Zetta byte', 'Zbyte', 1e21, 'byte');\n  BaseUnit.register(type, 'Yotta byte', 'Ybyte', 1e24, 'byte');\n};\n\n},{\"../base_unit\":12}],34:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'temp';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'Kelvin', 'K', 1);\n  BaseUnit.register(type, 'Celsius', '°C', 1, 'K'); // TODO\n  BaseUnit.register(type, 'Fahrenheit ', '°F', 9 / 5, '°C');\n};\n\n},{\"../base_unit\":12}],35:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'telsa';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'telsa', 'T', [['mass', 'Kg']], [['time', 's'], ['time', 's'], ['current', 'A']]);\n  DerivedUnit.register(type, 'Kilo telsa', 'KT', [], [], 1e3, 'T');\n  DerivedUnit.register(type, 'Mega telsa', 'MT', [], [], 1e6, 'T');\n  DerivedUnit.register(type, 'Giga telsa', 'GT', [], [], 1e9, 'T');\n  DerivedUnit.register(type, 'milli telsa', 'mT', [], [], 1e-3, 'T');\n  DerivedUnit.register(type, 'micro telsa', 'μT', [], [], 1e-6, 'T');\n  DerivedUnit.register(type, 'nano telsa', 'nT', [], [], 1e-9, 'T');\n};\n\n},{\"../derived_unit\":13}],36:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'time';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'seconds', 's', 1);\n  BaseUnit.register(type, 'deci seconds', 'ds', 1e-1, 's');\n  BaseUnit.register(type, 'centi seconds', 'cs', 1e-2, 's');\n  BaseUnit.register(type, 'Kilo seconds', 'Ks', 1e3, 's');\n  BaseUnit.register(type, 'milli seconds', 'ms', 1e-3, 's');\n  BaseUnit.register(type, 'micro seconds', 'µs', 1e-6, 's');\n  BaseUnit.register(type, 'nano seconds', 'ns', 1e-9, 's');\n  BaseUnit.register(type, 'pico seconds', 'ps', 1e-12, 's');\n  BaseUnit.register(type, 'minutes', 'min', 60, 's');\n  BaseUnit.register(type, 'hours', 'hr', 60, 'min');\n  BaseUnit.register(type, 'days', 'd', 24, 'hr');\n  BaseUnit.register(type, 'weeks', 'w', 7, 'd');\n  BaseUnit.register(type, 'month', 'mon', 4, 'w');\n};\n\n},{\"../base_unit\":12}],37:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'volt';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'volt', 'V', [['mass', 'Kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A']]);\n  DerivedUnit.register(type, 'Kilo volt', 'KV', [], [], 1e3, 'V');\n  DerivedUnit.register(type, 'Mega volt', 'MV', [], [], 1e6, 'V');\n  DerivedUnit.register(type, 'Giga volt', 'GV', [], [], 1e9, 'V');\n  DerivedUnit.register(type, 'milli volt', 'mV', [], [], 1e-3, 'V');\n  DerivedUnit.register(type, 'micro volt', 'μV', [], [], 1e-6, 'V');\n  DerivedUnit.register(type, 'nano volt', 'nV', [], [], 1e-9, 'V');\n};\n\n},{\"../derived_unit\":13}],38:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'volume';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'liters', 'L', [['length', 'm'], ['length', 'm'], ['length', 'm']], []);\n  DerivedUnit.register(type, 'Kilo liters', 'KL', [], [], 1e3, 'L');\n  DerivedUnit.register(type, 'Mega liters', 'ML', [], [], 1e6, 'L');\n  DerivedUnit.register(type, 'Giga liters', 'GL', [], [], 1e9, 'L');\n  DerivedUnit.register(type, 'milli liters', 'mL', [], [], 1e-3, 'L');\n  DerivedUnit.register(type, 'micro liters', 'μL', [], [], 1e-6, 'L');\n  DerivedUnit.register(type, 'nano liters', 'nL', [], [], 1e-9, 'L');\n  DerivedUnit.register(type, 'US gallon', 'US gallon', [], [], 0.264172, 'L');\n};\n\n},{\"../derived_unit\":13}],39:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'watt';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'watt', 'W', [['mass', 'Kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['time', 's']]);\n  DerivedUnit.register(type, 'Kilo watt', 'KW', [], [], 1e3, 'W');\n  DerivedUnit.register(type, 'Mega watt', 'MW', [], [], 1e6, 'W');\n  DerivedUnit.register(type, 'Giga watt', 'GW', [], [], 1e9, 'W');\n  DerivedUnit.register(type, 'milli watt', 'mW', [], [], 1e-3, 'W');\n  DerivedUnit.register(type, 'micro watt', 'μW', [], [], 1e-6, 'W');\n  DerivedUnit.register(type, 'nano watt', 'nW', [], [], 1e-9, 'W');\n};\n\n},{\"../derived_unit\":13}],40:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'weber';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'weber', 'Wb', [['mass', 'Kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['current', 'A']]);\n  DerivedUnit.register(type, 'Kilo weber', 'KWb', [], [], 1e3, 'Wb');\n  DerivedUnit.register(type, 'Mega weber', 'MWb', [], [], 1e6, 'Wb');\n  DerivedUnit.register(type, 'Giga weber', 'GWb', [], [], 1e9, 'Wb');\n  DerivedUnit.register(type, 'milli weber', 'mWb', [], [], 1e-3, 'Wb');\n  DerivedUnit.register(type, 'micro weber', 'μWb', [], [], 1e-6, 'Wb');\n  DerivedUnit.register(type, 'nano weber', 'nWb', [], [], 1e-9, 'Wb');\n};\n\n},{\"../derived_unit\":13}],41:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],42:[function(require,module,exports){\n(function (process,global){\n/*!\n * @overview RSVP - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2016 Yehuda Katz, Tom Dale, Stefan Penner and contributors\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/tildeio/rsvp.js/master/LICENSE\n * @version   3.3.3\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.RSVP = global.RSVP || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction indexOf(callbacks, callback) {\n  for (var i = 0, l = callbacks.length; i < l; i++) {\n    if (callbacks[i] === callback) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction callbacksFor(object) {\n  var callbacks = object._promiseCallbacks;\n\n  if (!callbacks) {\n    callbacks = object._promiseCallbacks = {};\n  }\n\n  return callbacks;\n}\n\n/**\n  @class RSVP.EventTarget\n*/\nvar EventTarget = {\n\n  /**\n    `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\n    Example:\n     ```javascript\n    let object = {};\n     RSVP.EventTarget.mixin(object);\n     object.on('finished', function(event) {\n      // handle event\n    });\n     object.trigger('finished', { detail: value });\n    ```\n     `EventTarget.mixin` also works with prototypes:\n     ```javascript\n    let Person = function() {};\n    RSVP.EventTarget.mixin(Person.prototype);\n     let yehuda = new Person();\n    let tom = new Person();\n     yehuda.on('poke', function(event) {\n      console.log('Yehuda says OW');\n    });\n     tom.on('poke', function(event) {\n      console.log('Tom says OW');\n    });\n     yehuda.trigger('poke');\n    tom.trigger('poke');\n    ```\n     @method mixin\n    @for RSVP.EventTarget\n    @private\n    @param {Object} object object to extend with EventTarget methods\n  */\n  mixin: function mixin(object) {\n    object['on'] = this['on'];\n    object['off'] = this['off'];\n    object['trigger'] = this['trigger'];\n    object._promiseCallbacks = undefined;\n    return object;\n  },\n\n  /**\n    Registers a callback to be executed when `eventName` is triggered\n     ```javascript\n    object.on('event', function(eventInfo){\n      // handle the event\n    });\n     object.trigger('event');\n    ```\n     @method on\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to listen for\n    @param {Function} callback function to be called when the event is triggered.\n  */\n  on: function on(eventName, callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback must be a function');\n    }\n\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined;\n\n    callbacks = allCallbacks[eventName];\n\n    if (!callbacks) {\n      callbacks = allCallbacks[eventName] = [];\n    }\n\n    if (indexOf(callbacks, callback) === -1) {\n      callbacks.push(callback);\n    }\n  },\n\n  /**\n    You can use `off` to stop firing a particular callback for an event:\n     ```javascript\n    function doStuff() { // do stuff! }\n    object.on('stuff', doStuff);\n     object.trigger('stuff'); // doStuff will be called\n     // Unregister ONLY the doStuff callback\n    object.off('stuff', doStuff);\n    object.trigger('stuff'); // doStuff will NOT be called\n    ```\n     If you don't pass a `callback` argument to `off`, ALL callbacks for the\n    event will not be executed when the event fires. For example:\n     ```javascript\n    let callback1 = function(){};\n    let callback2 = function(){};\n     object.on('stuff', callback1);\n    object.on('stuff', callback2);\n     object.trigger('stuff'); // callback1 and callback2 will be executed.\n     object.off('stuff');\n    object.trigger('stuff'); // callback1 and callback2 will not be executed!\n    ```\n     @method off\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName event to stop listening to\n    @param {Function} callback optional argument. If given, only the function\n    given will be removed from the event's callback queue. If no `callback`\n    argument is given, all callbacks will be removed from the event's callback\n    queue.\n  */\n  off: function off(eventName, callback) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        index = undefined;\n\n    if (!callback) {\n      allCallbacks[eventName] = [];\n      return;\n    }\n\n    callbacks = allCallbacks[eventName];\n\n    index = indexOf(callbacks, callback);\n\n    if (index !== -1) {\n      callbacks.splice(index, 1);\n    }\n  },\n\n  /**\n    Use `trigger` to fire custom events. For example:\n     ```javascript\n    object.on('foo', function(){\n      console.log('foo event happened!');\n    });\n    object.trigger('foo');\n    // 'foo event happened!' logged to the console\n    ```\n     You can also pass a value as a second argument to `trigger` that will be\n    passed as an argument to all event listeners for the event:\n     ```javascript\n    object.on('foo', function(value){\n      console.log(value.name);\n    });\n     object.trigger('foo', { name: 'bar' });\n    // 'bar' logged to the console\n    ```\n     @method trigger\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to be triggered\n    @param {*} options optional value to be passed to any event handlers for\n    the given `eventName`\n  */\n  trigger: function trigger(eventName, options, label) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        callback = undefined;\n\n    if (callbacks = allCallbacks[eventName]) {\n      // Don't cache the callbacks.length since it may grow\n      for (var i = 0; i < callbacks.length; i++) {\n        callback = callbacks[i];\n\n        callback(options, label);\n      }\n    }\n  }\n};\n\nvar config = {\n  instrument: false\n};\n\nEventTarget['mixin'](config);\n\nfunction configure(name, value) {\n  if (name === 'onerror') {\n    // handle for legacy users that expect the actual\n    // error to be passed to their function added via\n    // `RSVP.configure('onerror', someFunctionHere);`\n    config['on']('error', value);\n    return;\n  }\n\n  if (arguments.length === 2) {\n    config[name] = value;\n  } else {\n    return config[name];\n  }\n}\n\nfunction objectOrFunction(x) {\n  return typeof x === 'function' || typeof x === 'object' && x !== null;\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nfunction isMaybeThenable(x) {\n  return typeof x === 'object' && x !== null;\n}\n\nvar _isArray = undefined;\nif (!Array.isArray) {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n} else {\n  _isArray = Array.isArray;\n}\n\nvar isArray = _isArray;\n\n// Date.now is not available in browsers < IE9\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility\nvar now = Date.now || function () {\n  return new Date().getTime();\n};\n\nfunction F() {}\n\nvar o_create = Object.create || function (o) {\n  if (arguments.length > 1) {\n    throw new Error('Second argument not supported');\n  }\n  if (typeof o !== 'object') {\n    throw new TypeError('Argument must be an object');\n  }\n  F.prototype = o;\n  return new F();\n};\n\nvar queue = [];\n\nfunction scheduleFlush() {\n  setTimeout(function () {\n    for (var i = 0; i < queue.length; i++) {\n      var entry = queue[i];\n\n      var payload = entry.payload;\n\n      payload.guid = payload.key + payload.id;\n      payload.childGuid = payload.key + payload.childId;\n      if (payload.error) {\n        payload.stack = payload.error.stack;\n      }\n\n      config['trigger'](entry.name, entry.payload);\n    }\n    queue.length = 0;\n  }, 50);\n}\nfunction instrument(eventName, promise, child) {\n  if (1 === queue.push({\n    name: eventName,\n    payload: {\n      key: promise._guidKey,\n      id: promise._id,\n      eventName: eventName,\n      detail: promise._result,\n      childId: child && child._id,\n      label: promise._label,\n      timeStamp: now(),\n      error: config[\"instrument-with-stack\"] ? new Error(promise._label) : null\n    } })) {\n    scheduleFlush();\n  }\n}\n\n/**\n  `RSVP.Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {*} object value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop, label);\n  resolve(promise, object);\n  return promise;\n}\n\nfunction withOwnPromise() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then) {\n  config.async(function (promise) {\n    var sealed = false;\n    var error = tryThen(then, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    thenable._onError = null;\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$) {\n  if (maybeThenable.constructor === promise.constructor && then$$ === then && promise.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$ === GET_THEN_ERROR) {\n      reject(promise, GET_THEN_ERROR.error);\n    } else if (then$$ === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$)) {\n      handleForeignThenable(promise, maybeThenable, then$$);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    fulfill(promise, value);\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onError) {\n    promise._onError(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length === 0) {\n    if (config.instrument) {\n      instrument('fulfilled', promise);\n    }\n  } else {\n    config.async(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n  config.async(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var subscribers = parent._subscribers;\n  var length = subscribers.length;\n\n  parent._onError = null;\n\n  subscribers[length] = child;\n  subscribers[length + FULFILLED] = onFulfillment;\n  subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    config.async(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (config.instrument) {\n    instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);\n  }\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = undefined,\n      callback = undefined,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = undefined,\n      error = undefined,\n      succeeded = undefined,\n      failed = undefined;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, withOwnPromise());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n      resolve(promise, value);\n    } else if (failed) {\n      reject(promise, error);\n    } else if (settled === FULFILLED) {\n      fulfill(promise, value);\n    } else if (settled === REJECTED) {\n      reject(promise, value);\n    }\n}\n\nfunction initializePromise(promise, resolver) {\n  var resolved = false;\n  try {\n    resolver(function (value) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      resolve(promise, value);\n    }, function (reason) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nfunction then(onFulfillment, onRejection, label) {\n  var _arguments = arguments;\n\n  var parent = this;\n  var state = parent._state;\n\n  if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {\n    config.instrument && instrument('chained', parent, parent);\n    return parent;\n  }\n\n  parent._onError = null;\n\n  var child = new parent.constructor(noop, label);\n  var result = parent._result;\n\n  config.instrument && instrument('chained', parent, child);\n\n  if (state) {\n    (function () {\n      var callback = _arguments[state - 1];\n      config.async(function () {\n        return invokeCallback(state, child, callback, result);\n      });\n    })();\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\nfunction makeSettledResult(state, position, value) {\n  if (state === FULFILLED) {\n    return {\n      state: 'fulfilled',\n      value: value\n    };\n  } else {\n    return {\n      state: 'rejected',\n      reason: value\n    };\n  }\n}\n\nfunction Enumerator(Constructor, input, abortOnReject, label) {\n  this._instanceConstructor = Constructor;\n  this.promise = new Constructor(noop, label);\n  this._abortOnReject = abortOnReject;\n\n  if (this._validateInput(input)) {\n    this._input = input;\n    this.length = input.length;\n    this._remaining = input.length;\n\n    this._init();\n\n    if (this.length === 0) {\n      fulfill(this.promise, this._result);\n    } else {\n      this.length = this.length || 0;\n      this._enumerate();\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    }\n  } else {\n    reject(this.promise, this._validationError());\n  }\n}\n\nEnumerator.prototype._validateInput = function (input) {\n  return isArray(input);\n};\n\nEnumerator.prototype._validationError = function () {\n  return new Error('Array Methods must be provided an Array');\n};\n\nEnumerator.prototype._init = function () {\n  this._result = new Array(this.length);\n};\n\nEnumerator.prototype._enumerate = function () {\n  var length = this.length;\n  var promise = this.promise;\n  var input = this._input;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    this._eachEntry(input[i], i);\n  }\n};\n\nEnumerator.prototype._settleMaybeThenable = function (entry, i) {\n  var c = this._instanceConstructor;\n  var resolve = c.resolve;\n\n  if (resolve === resolve$1) {\n    var then$$ = getThen(entry);\n\n    if (then$$ === then && entry._state !== PENDING) {\n      entry._onError = null;\n      this._settledAt(entry._state, i, entry._result);\n    } else if (typeof then$$ !== 'function') {\n      this._remaining--;\n      this._result[i] = this._makeResult(FULFILLED, i, entry);\n    } else if (c === Promise) {\n      var promise = new c(noop);\n      handleMaybeThenable(promise, entry, then$$);\n      this._willSettleAt(promise, i);\n    } else {\n      this._willSettleAt(new c(function (resolve) {\n        return resolve(entry);\n      }), i);\n    }\n  } else {\n    this._willSettleAt(resolve(entry), i);\n  }\n};\n\nEnumerator.prototype._eachEntry = function (entry, i) {\n  if (isMaybeThenable(entry)) {\n    this._settleMaybeThenable(entry, i);\n  } else {\n    this._remaining--;\n    this._result[i] = this._makeResult(FULFILLED, i, entry);\n  }\n};\n\nEnumerator.prototype._settledAt = function (state, i, value) {\n  var promise = this.promise;\n\n  if (promise._state === PENDING) {\n    this._remaining--;\n\n    if (this._abortOnReject && state === REJECTED) {\n      reject(promise, value);\n    } else {\n      this._result[i] = this._makeResult(state, i, value);\n    }\n  }\n\n  if (this._remaining === 0) {\n    fulfill(promise, this._result);\n  }\n};\n\nEnumerator.prototype._makeResult = function (state, i, value) {\n  return value;\n};\n\nEnumerator.prototype._willSettleAt = function (promise, i) {\n  var enumerator = this;\n\n  subscribe(promise, undefined, function (value) {\n    return enumerator._settledAt(FULFILLED, i, value);\n  }, function (reason) {\n    return enumerator._settledAt(REJECTED, i, reason);\n  });\n};\n\n/**\n  `RSVP.Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error(\"2\"));\n  let promise3 = RSVP.reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries, label) {\n  return new Enumerator(this, entries, true, /* abort on reject */label).promise;\n}\n\n/**\n  `RSVP.Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `RSVP.Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  RSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} entries array of promises to observe\n  @param {String} label optional string for describing the promise returned.\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  var promise = new Constructor(noop, label);\n\n  if (!isArray(entries)) {\n    reject(promise, new TypeError('You must pass an array to race.'));\n    return promise;\n  }\n\n  for (var i = 0; promise._state === PENDING && i < entries.length; i++) {\n    subscribe(Constructor.resolve(entries[i]), undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n\n  return promise;\n}\n\n/**\n  `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop, label);\n  reject(promise, reason);\n  return promise;\n}\n\nvar guidKey = 'rsvp_' + now() + '-';\nvar counter = 0;\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise’s eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class RSVP.Promise\n  @param {function} resolver\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @constructor\n*/\nfunction Promise(resolver, label) {\n  this._id = counter++;\n  this._label = label;\n  this._state = undefined;\n  this._result = undefined;\n  this._subscribers = [];\n\n  config.instrument && instrument('created', this);\n\n  if (noop !== resolver) {\n    typeof resolver !== 'function' && needsResolver();\n    this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n  }\n}\n\nPromise.cast = resolve$1; // deprecated\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = resolve$1;\nPromise.reject = reject$1;\n\nPromise.prototype = {\n  constructor: Promise,\n\n  _guidKey: guidKey,\n\n  _onError: function _onError(reason) {\n    var promise = this;\n    config.after(function () {\n      if (promise._onError) {\n        config['trigger']('error', reason, promise._label);\n      }\n    });\n  },\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we\\'re unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we\\'re unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfillment\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  then: then,\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn\\'t find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'catch': function _catch(onRejection, label) {\n    return this.then(undefined, onRejection, label);\n  },\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'finally': function _finally(callback, label) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    return promise.then(function (value) {\n      return constructor.resolve(callback()).then(function () {\n        return value;\n      });\n    }, function (reason) {\n      return constructor.resolve(callback()).then(function () {\n        throw reason;\n      });\n    }, label);\n  }\n};\n\nfunction Result() {\n  this.value = undefined;\n}\n\nvar ERROR = new Result();\nvar GET_THEN_ERROR$1 = new Result();\n\nfunction getThen$1(obj) {\n  try {\n    return obj.then;\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction tryApply(f, s, a) {\n  try {\n    f.apply(s, a);\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction makeObject(_, argumentNames) {\n  var obj = {};\n  var length = _.length;\n  var args = new Array(length);\n\n  for (var x = 0; x < length; x++) {\n    args[x] = _[x];\n  }\n\n  for (var i = 0; i < argumentNames.length; i++) {\n    var _name = argumentNames[i];\n    obj[_name] = args[i + 1];\n  }\n\n  return obj;\n}\n\nfunction arrayResult(_) {\n  var length = _.length;\n  var args = new Array(length - 1);\n\n  for (var i = 1; i < length; i++) {\n    args[i - 1] = _[i];\n  }\n\n  return args;\n}\n\nfunction wrapThenable(_then, promise) {\n  return {\n    then: function then(onFulFillment, onRejection) {\n      return _then.call(promise, onFulFillment, onRejection);\n    }\n  };\n}\n\n/**\n  `RSVP.denodeify` takes a 'node-style' function and returns a function that\n  will return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\n  browser when you'd prefer to use promises over using callbacks. For example,\n  `denodeify` transforms the following:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) return handleError(err);\n    handleData(data);\n  });\n  ```\n\n  into:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n\n  readFile('myfile.txt').then(handleData, handleError);\n  ```\n\n  If the node function has multiple success parameters, then `denodeify`\n  just returns the first one:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'));\n\n  request('http://example.com').then(function(res) {\n    // ...\n  });\n  ```\n\n  However, if you need all success parameters, setting `denodeify`'s\n  second parameter to `true` causes it to return all success parameters\n  as an array:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), true);\n\n  request('http://example.com').then(function(result) {\n    // result[0] -> res\n    // result[1] -> body\n  });\n  ```\n\n  Or if you pass it an array with names it returns the parameters as a hash:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), ['res', 'body']);\n\n  request('http://example.com').then(function(result) {\n    // result.res\n    // result.body\n  });\n  ```\n\n  Sometimes you need to retain the `this`:\n\n  ```javascript\n  let app = require('express')();\n  let render = RSVP.denodeify(app.render.bind(app));\n  ```\n\n  The denodified function inherits from the original function. It works in all\n  environments, except IE 10 and below. Consequently all properties of the original\n  function are available to you. However, any properties you change on the\n  denodeified function won't be changed on the original function. Example:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request')),\n      cookieJar = request.jar(); // <- Inheritance is used here\n\n  request('http://example.com', {jar: cookieJar}).then(function(res) {\n    // cookieJar.cookies holds now the cookies returned by example.com\n  });\n  ```\n\n  Using `denodeify` makes it easier to compose asynchronous operations instead\n  of using callbacks. For example, instead of:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) { ... } // Handle error\n    fs.writeFile('myfile2.txt', data, function(err){\n      if (err) { ... } // Handle error\n      console.log('done')\n    });\n  });\n  ```\n\n  you can chain the operations together using `then` from the returned promise:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n  let writeFile = RSVP.denodeify(fs.writeFile);\n\n  readFile('myfile.txt').then(function(data){\n    return writeFile('myfile2.txt', data);\n  }).then(function(){\n    console.log('done')\n  }).catch(function(error){\n    // Handle error\n  });\n  ```\n\n  @method denodeify\n  @static\n  @for RSVP\n  @param {Function} nodeFunc a 'node-style' function that takes a callback as\n  its last argument. The callback expects an error to be passed as its first\n  argument (if an error occurred, otherwise null), and the value from the\n  operation as its second argument ('function(err, value){ }').\n  @param {Boolean|Array} [options] An optional paramter that if set\n  to `true` causes the promise to fulfill with the callback's success arguments\n  as an array. This is useful if the node function has multiple success\n  paramters. If you set this paramter to an array with names, the promise will\n  fulfill with a hash with these names as keys and the success parameters as\n  values.\n  @return {Function} a function that wraps `nodeFunc` to return an\n  `RSVP.Promise`\n  @static\n*/\nfunction denodeify(nodeFunc, options) {\n  var fn = function fn() {\n    var self = this;\n    var l = arguments.length;\n    var args = new Array(l + 1);\n    var promiseInput = false;\n\n    for (var i = 0; i < l; ++i) {\n      var arg = arguments[i];\n\n      if (!promiseInput) {\n        // TODO: clean this up\n        promiseInput = needsPromiseInput(arg);\n        if (promiseInput === GET_THEN_ERROR$1) {\n          var p = new Promise(noop);\n          reject(p, GET_THEN_ERROR$1.value);\n          return p;\n        } else if (promiseInput && promiseInput !== true) {\n          arg = wrapThenable(promiseInput, arg);\n        }\n      }\n      args[i] = arg;\n    }\n\n    var promise = new Promise(noop);\n\n    args[l] = function (err, val) {\n      if (err) reject(promise, err);else if (options === undefined) resolve(promise, val);else if (options === true) resolve(promise, arrayResult(arguments));else if (isArray(options)) resolve(promise, makeObject(arguments, options));else resolve(promise, val);\n    };\n\n    if (promiseInput) {\n      return handlePromiseInput(promise, args, nodeFunc, self);\n    } else {\n      return handleValueInput(promise, args, nodeFunc, self);\n    }\n  };\n\n  fn.__proto__ = nodeFunc;\n\n  return fn;\n}\n\nfunction handleValueInput(promise, args, nodeFunc, self) {\n  var result = tryApply(nodeFunc, self, args);\n  if (result === ERROR) {\n    reject(promise, result.value);\n  }\n  return promise;\n}\n\nfunction handlePromiseInput(promise, args, nodeFunc, self) {\n  return Promise.all(args).then(function (args) {\n    var result = tryApply(nodeFunc, self, args);\n    if (result === ERROR) {\n      reject(promise, result.value);\n    }\n    return promise;\n  });\n}\n\nfunction needsPromiseInput(arg) {\n  if (arg && typeof arg === 'object') {\n    if (arg.constructor === Promise) {\n      return true;\n    } else {\n      return getThen$1(arg);\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.all`.\n\n  @method all\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n*/\nfunction all$1(array, label) {\n  return Promise.all(array, label);\n}\n\nfunction AllSettled(Constructor, entries, label) {\n  this._superConstructor(Constructor, entries, false, /* don't abort on reject */label);\n}\n\nAllSettled.prototype = o_create(Enumerator.prototype);\nAllSettled.prototype._superConstructor = Enumerator;\nAllSettled.prototype._makeResult = makeSettledResult;\nAllSettled.prototype._validationError = function () {\n  return new Error('allSettled must be called with an array');\n};\n\n/**\n  `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\n  a fail-fast method, it waits until all the promises have returned and\n  shows you all the results. This is useful if you want to handle multiple\n  promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled. The return promise is fulfilled with an array of the states of\n  the promises passed into the `promises` array argument.\n\n  Each state object will either indicate fulfillment or rejection, and\n  provide the corresponding value or reason. The states will take one of\n  the following formats:\n\n  ```javascript\n  { state: 'fulfilled', value: value }\n    or\n  { state: 'rejected', reason: reason }\n  ```\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.Promise.resolve(1);\n  let promise2 = RSVP.Promise.reject(new Error('2'));\n  let promise3 = RSVP.Promise.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.allSettled(promises).then(function(array){\n    // array == [\n    //   { state: 'fulfilled', value: 1 },\n    //   { state: 'rejected', reason: Error },\n    //   { state: 'rejected', reason: Error }\n    // ]\n    // Note that for the second item, reason.message will be '2', and for the\n    // third item, reason.message will be '3'.\n  }, function(error) {\n    // Not run. (This block would only be called if allSettled had failed,\n    // for instance if passed an incorrect argument type.)\n  });\n  ```\n\n  @method allSettled\n  @static\n  @for RSVP\n  @param {Array} entries\n  @param {String} label - optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with an array of the settled\n  states of the constituent promises.\n*/\nfunction allSettled(entries, label) {\n  return new AllSettled(Promise, entries, label).promise;\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.race`.\n\n  @method race\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n */\nfunction race$1(array, label) {\n  return Promise.race(array, label);\n}\n\nfunction PromiseHash(Constructor, object, label) {\n  this._superConstructor(Constructor, object, true, label);\n}\n\nPromiseHash.prototype = o_create(Enumerator.prototype);\nPromiseHash.prototype._superConstructor = Enumerator;\nPromiseHash.prototype._init = function () {\n  this._result = {};\n};\n\nPromiseHash.prototype._validateInput = function (input) {\n  return input && typeof input === 'object';\n};\n\nPromiseHash.prototype._validationError = function () {\n  return new Error('Promise.hash must be called with an object');\n};\n\nPromiseHash.prototype._enumerate = function () {\n  var enumerator = this;\n  var promise = enumerator.promise;\n  var input = enumerator._input;\n  var results = [];\n\n  for (var key in input) {\n    if (promise._state === PENDING && Object.prototype.hasOwnProperty.call(input, key)) {\n      results.push({\n        position: key,\n        entry: input[key]\n      });\n    }\n  }\n\n  var length = results.length;\n  enumerator._remaining = length;\n  var result = undefined;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    result = results[i];\n    enumerator._eachEntry(result.entry, result.position);\n  }\n};\n\n/**\n  `RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\n  for its `promises` argument.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  fulfilled, or rejected if any of them become rejected. The returned promise\n  is fulfilled with a hash that has the same key names as the `promises` object\n  argument. If any of the values in the object are not promises, they will\n  simply be copied over to the fulfilled object.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    yourPromise: RSVP.resolve(2),\n    theirPromise: RSVP.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: 1,\n    //   yourPromise: 2,\n    //   theirPromise: 3,\n    //   notAPromise: 4\n    // }\n  });\n  ````\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the first promise\n  that is rejected will be given as the reason to the rejection handler.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    rejectedPromise: RSVP.reject(new Error('rejectedPromise')),\n    anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === 'rejectedPromise'\n  });\n  ```\n\n  An important note: `RSVP.hash` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hash` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hash(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: 'Example'\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hash\n  @static\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all properties of `promises`\n  have been fulfilled, or rejected if any of them become rejected.\n*/\nfunction hash(object, label) {\n  return new PromiseHash(Promise, object, label).promise;\n}\n\nfunction HashSettled(Constructor, object, label) {\n  this._superConstructor(Constructor, object, false, label);\n}\n\nHashSettled.prototype = o_create(PromiseHash.prototype);\nHashSettled.prototype._superConstructor = Enumerator;\nHashSettled.prototype._makeResult = makeSettledResult;\n\nHashSettled.prototype._validationError = function () {\n  return new Error('hashSettled must be called with an object');\n};\n\n/**\n  `RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\n  instead of an array for its `promises` argument.\n\n  Unlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\n  but like `RSVP.allSettled`, `hashSettled` waits until all the\n  constituent promises have returned and then shows you all the results\n  with their states and values/reasons. This is useful if you want to\n  handle multiple promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled, or rejected if the passed parameters are invalid.\n\n  The returned promise is fulfilled with a hash that has the same key names as\n  the `promises` object argument. If any of the values in the object are not\n  promises, they will be copied over to the fulfilled object and marked with state\n  'fulfilled'.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    yourPromise: RSVP.Promise.resolve(2),\n    theirPromise: RSVP.Promise.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: { state: 'fulfilled', value: 1 },\n    //   yourPromise: { state: 'fulfilled', value: 2 },\n    //   theirPromise: { state: 'fulfilled', value: 3 },\n    //   notAPromise: { state: 'fulfilled', value: 4 }\n    // }\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the state will\n  be set to 'rejected' and the reason for rejection provided.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    rejectedPromise: RSVP.Promise.reject(new Error('rejection')),\n    anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise:              { state: 'fulfilled', value: 1 },\n    //   rejectedPromise:        { state: 'rejected', reason: Error },\n    //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n    // }\n    // Note that for rejectedPromise, reason.message == 'rejection',\n    // and for anotherRejectedPromise, reason.message == 'more rejection'.\n  });\n  ```\n\n  An important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.Promise.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.Promise.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hashSettled(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: { state: 'fulfilled', value: 'Example' }\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hashSettled\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when when all properties of `promises`\n  have been settled.\n  @static\n*/\nfunction hashSettled(object, label) {\n  return new HashSettled(Promise, object, label).promise;\n}\n\nfunction rethrow(reason) {\n  setTimeout(function () {\n    throw reason;\n  });\n  throw reason;\n}\n\n/**\n  `RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n  `RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\n  interface. New code should use the `RSVP.Promise` constructor instead.\n\n  The object returned from `RSVP.defer` is a plain object with three properties:\n\n  * promise - an `RSVP.Promise`.\n  * reject - a function that causes the `promise` property on this object to\n    become rejected\n  * resolve - a function that causes the `promise` property on this object to\n    become fulfilled.\n\n  Example:\n\n   ```javascript\n   let deferred = RSVP.defer();\n\n   deferred.resolve(\"Success!\");\n\n   deferred.promise.then(function(value){\n     // value here is \"Success!\"\n   });\n   ```\n\n  @method defer\n  @static\n  @for RSVP\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Object}\n */\nfunction defer(label) {\n  var deferred = { resolve: undefined, reject: undefined };\n\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  }, label);\n\n  return deferred;\n}\n\n/**\n `RSVP.map` is similar to JavaScript's native `map` method, except that it\n  waits for all promises to become fulfilled before running the `mapFn` on\n  each item in given to `promises`. `RSVP.map` returns a promise that will\n  become fulfilled with the result of running `mapFn` on the values the promises\n  become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(result){\n    // result is [ 2, 3, 4 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.map` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\n  say you want to get all comments from a set of blog posts, but you need\n  the blog posts first because they contain a url to those comments.\n\n  ```javscript\n\n  let mapFn = function(blogPost){\n    // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n    // with some comments data\n    return getComments(blogPost.comments_url);\n  };\n\n  // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n  // with some blog post data\n  RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n    // comments is the result of asking the server for the comments\n    // of all blog posts returned from getBlogPosts()\n  });\n  ```\n\n  @method map\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} mapFn function to be called on each fulfilled promise.\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with the result of calling\n  `mapFn` on each fulfilled promise or value when they become fulfilled.\n   The promise will be rejected if any of the given `promises` become rejected.\n  @static\n*/\nfunction map(promises, mapFn, label) {\n  return Promise.all(promises, label).then(function (values) {\n    if (!isFunction(mapFn)) {\n      throw new TypeError(\"You must pass a function as map's second argument.\");\n    }\n\n    var length = values.length;\n    var results = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      results[i] = mapFn(values[i]);\n    }\n\n    return Promise.all(results, label);\n  });\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.resolve`.\n\n  @method resolve\n  @static\n  @for RSVP\n  @param {*} value value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$2(value, label) {\n  return Promise.resolve(value, label);\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.reject`.\n\n  @method reject\n  @static\n  @for RSVP\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$2(reason, label) {\n  return Promise.reject(reason, label);\n}\n\n/**\n `RSVP.filter` is similar to JavaScript's native `filter` method, except that it\n  waits for all promises to become fulfilled before running the `filterFn` on\n  each item in given to `promises`. `RSVP.filter` returns a promise that will\n  become fulfilled with the result of running `filterFn` on the values the\n  promises become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n\n  let promises = [promise1, promise2, promise3];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(result){\n    // result is [ 2, 3 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.filter` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.filter` will also wait for any promises returned from `filterFn`.\n  For instance, you may want to fetch a list of users then return a subset\n  of those users based on some asynchronous operation:\n\n  ```javascript\n\n  let alice = { name: 'alice' };\n  let bob   = { name: 'bob' };\n  let users = [ alice, bob ];\n\n  let promises = users.map(function(user){\n    return RSVP.resolve(user);\n  });\n\n  let filterFn = function(user){\n    // Here, Alice has permissions to create a blog post, but Bob does not.\n    return getPrivilegesForUser(user).then(function(privs){\n      return privs.can_create_blog_post === true;\n    });\n  };\n  RSVP.filter(promises, filterFn).then(function(users){\n    // true, because the server told us only Alice can create a blog post.\n    users.length === 1;\n    // false, because Alice is the only user present in `users`\n    users[0] === bob;\n  });\n  ```\n\n  @method filter\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} filterFn - function to be called on each resolved value to\n  filter the final results.\n  @param {String} label optional string describing the promise. Useful for\n  tooling.\n  @return {Promise}\n*/\n\nfunction resolveAll(promises, label) {\n  return Promise.all(promises, label);\n}\n\nfunction resolveSingle(promise, label) {\n  return Promise.resolve(promise, label).then(function (promises) {\n    return resolveAll(promises, label);\n  });\n}\nfunction filter(promises, filterFn, label) {\n  var promise = isArray(promises) ? resolveAll(promises, label) : resolveSingle(promises, label);\n  return promise.then(function (values) {\n    if (!isFunction(filterFn)) {\n      throw new TypeError(\"You must pass a function as filter's second argument.\");\n    }\n\n    var length = values.length;\n    var filtered = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      filtered[i] = filterFn(values[i]);\n    }\n\n    return resolveAll(filtered, label).then(function (filtered) {\n      var results = new Array(length);\n      var newLength = 0;\n\n      for (var i = 0; i < length; i++) {\n        if (filtered[i]) {\n          results[newLength] = values[i];\n          newLength++;\n        }\n      }\n\n      results.length = newLength;\n\n      return results;\n    });\n  });\n}\n\nvar len = 0;\nvar vertxNext = undefined;\nfunction asap(callback, arg) {\n  queue$1[len] = callback;\n  queue$1[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 1, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    scheduleFlush$1();\n  }\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  var nextTick = process.nextTick;\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // setImmediate should be used instead instead\n  var version = process.versions.node.match(/^(?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)$/);\n  if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {\n    nextTick = setImmediate;\n  }\n  return function () {\n    return nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    return node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  return function () {\n    return setTimeout(flush, 1);\n  };\n}\n\nvar queue$1 = new Array(1000);\n\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue$1[i];\n    var arg = queue$1[i + 1];\n\n    callback(arg);\n\n    queue$1[i] = undefined;\n    queue$1[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertex() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush$1 = undefined;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush$1 = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush$1 = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush$1 = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush$1 = attemptVertex();\n} else {\n  scheduleFlush$1 = useSetTimeout();\n}\n\nvar platform = undefined;\n\n/* global self */\nif (typeof self === 'object') {\n  platform = self;\n\n  /* global global */\n} else if (typeof global === 'object') {\n    platform = global;\n  } else {\n    throw new Error('no global: `self` or `global` found');\n  }\n\nvar _async$filter;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// defaults\n\n// the default export here is for backwards compat:\n//   https://github.com/tildeio/rsvp.js/issues/434\nconfig.async = asap;\nconfig.after = function (cb) {\n  return setTimeout(cb, 0);\n};\nvar cast = resolve$2;\n\nvar async = function async(callback, arg) {\n  return config.async(callback, arg);\n};\n\nfunction on() {\n  config['on'].apply(config, arguments);\n}\n\nfunction off() {\n  config['off'].apply(config, arguments);\n}\n\n// Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`\nif (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {\n  var callbacks = window['__PROMISE_INSTRUMENTATION__'];\n  configure('instrument', true);\n  for (var eventName in callbacks) {\n    if (callbacks.hasOwnProperty(eventName)) {\n      on(eventName, callbacks[eventName]);\n    }\n  }\n}var rsvp = (_async$filter = {\n  cast: cast,\n  Promise: Promise,\n  EventTarget: EventTarget,\n  all: all$1,\n  allSettled: allSettled,\n  race: race$1,\n  hash: hash,\n  hashSettled: hashSettled,\n  rethrow: rethrow,\n  defer: defer,\n  denodeify: denodeify,\n  configure: configure,\n  on: on,\n  off: off,\n  resolve: resolve$2,\n  reject: reject$2,\n  map: map\n}, _defineProperty(_async$filter, 'async', async), _defineProperty(_async$filter, 'filter', // babel seems to error if async isn't a computed prop here...\nfilter), _async$filter);\n\nexports['default'] = rsvp;\nexports.cast = cast;\nexports.Promise = Promise;\nexports.EventTarget = EventTarget;\nexports.all = all$1;\nexports.allSettled = allSettled;\nexports.race = race$1;\nexports.hash = hash;\nexports.hashSettled = hashSettled;\nexports.rethrow = rethrow;\nexports.defer = defer;\nexports.denodeify = denodeify;\nexports.configure = configure;\nexports.on = on;\nexports.off = off;\nexports.resolve = resolve$2;\nexports.reject = reject$2;\nexports.map = map;\nexports.async = async;\nexports.filter = filter;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":41}]},{},[5])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}