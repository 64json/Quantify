{"version":3,"sources":["quantify.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_$","$","extend","_this","this","unitClasses","addUnitClass","Unit","type","TYPE","symbol","SYMBOL","hasOwnProperty","getUnitClass","getDerivedQuantities","quantities","quantityName","unitClass","Object","keys","BASE","name","types","UNITLESS","getUnitClasses","quantity","2","3","setupMain","./setup_main","4","Server","Util","$input","mathField","MQ","MathField","keyup","event","keyCode","refineLaTeX","latex","search","../../server","../../util","5","RSVP","DOM","app","App","on","reason","console","assert","register","window","main","./app","./app/constructor","./dom","./server","./unit","rsvp","6","./search","7","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","Combination","derivedQuantities","baseQuantities","countCalculation","arguments","undefined","calculateCount","value","count","Math","abs","_type","inverse","factor","new_","_type2","str","mulSymbols","divSymbols","mulPairs","divPairs","forEach","mul","mulClass","identifyUnit","push","div","divClass","_Util$getMulAndDivCla","getMulAndDivClasses","mulClasses","divClasses","unitless","getUnitless","queue","minCount","minCombinations","shift","countDerivedUnits","create","../app","../util","8","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","constructor","setPrototypeOf","__proto__","BaseUnit","base","QUANTITY","parentSymbol","ParentUnit","_ParentUnit","getPrototypeOf","NAME","9","DerivedUnit","MULS","muls","DIVS","divs","10","./base_unit","./derived_unit","./register","11","../derived_unit","12","../base_unit","13","14","15","16","17","18","mass","time","angle","current","temp","matter","intensity","storage","joule","pascal","Newton","hertz","watt","coulomb","volt","farad","ohm","siemens","weber","tesla","henry","lux","./Newton","./angle","./coulomb","./current","./farad","./henry","./hertz","./intensity","./joule","./length","./lux","./mass","./matter","./ohm","./pascal","./siemens","./storage","./temp","./tesla","./time","./volt","./watt","./weber","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","mulPair","cls","divPair","_loop","36","refinedTypes","37","unitSymbol","38","./get_mul_and_div_classes","./get_unitless","./identify_unit","./refine_latex","39","replace","replaced","infiniteReplace","match","toLowerCase","JSON","stringify","content","power","pow","parse","value1","sign","value2","Number","MDUnitlesses","unitless1","unitless2","result","PMUnitlesses","sign1","sign2","log","src","dst","40","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","concat","queueIndex","drainQueue","timeout","len","run","Item","array","noop","process","nextTick","args","Array","apply","title","browser","env","argv","version","versions","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","dir","umask","41","global","factory","define","amd","indexOf","callbacks","callback","callbacksFor","object","_promiseCallbacks","configure","config","objectOrFunction","x","isFunction","isMaybeThenable","F","scheduleFlush","entry","payload","guid","id","childGuid","childId","error","stack","instrument","eventName","promise","child","_guidKey","_id","detail","_result","label","_label","timeStamp","now","resolve$1","resolve","withOwnPromise","getThen","then","GET_THEN_ERROR","tryThen","fulfillmentHandler","rejectionHandler","handleForeignThenable","thenable","async","sealed","fulfill","reject","handleOwnThenable","_state","FULFILLED","REJECTED","_onError","subscribe","handleMaybeThenable","maybeThenable","then$$","publishRejection","publish","PENDING","_subscribers","parent","onFulfillment","onRejection","subscribers","settled","invokeCallback","ErrorObject","tryCatch","TRY_CATCH_ERROR","hasCallback","succeeded","failed","initializePromise","resolver","resolved","_arguments","state","makeSettledResult","position","Enumerator","input","abortOnReject","_instanceConstructor","_abortOnReject","_validateInput","_input","_remaining","_init","_enumerate","_validationError","all","entries","race","isArray","reject$1","needsResolver","needsNew","Promise","counter","Result","getThen$1","obj","ERROR","tryApply","makeObject","_","argumentNames","_name","arrayResult","wrapThenable","_then","onFulFillment","denodeify","nodeFunc","options","fn","promiseInput","arg","needsPromiseInput","GET_THEN_ERROR$1","p","err","val","handlePromiseInput","handleValueInput","all$1","AllSettled","_superConstructor","allSettled","race$1","PromiseHash","hash","HashSettled","hashSettled","rethrow","defer","deferred","map","promises","mapFn","values","results","resolve$2","reject$2","resolveAll","resolveSingle","filter","filterFn","filtered","newLength","asap","queue$1","scheduleFlush$1","useNextTick","node","setImmediate","flush","useVertxTimer","vertxNext","useSetTimeout","useMutationObserver","iterations","observer","BrowserMutationObserver","document","createTextNode","observe","characterData","data","useMessageChannel","channel","MessageChannel","port1","onmessage","port2","postMessage","attemptVertex","vertx","runOnLoop","runOnContext","_defineProperty","EventTarget","mixin","allCallbacks","index","splice","trigger","_isArray","toString","Date","getTime","o_create","_eachEntry","_settleMaybeThenable","c","_settledAt","_makeResult","_willSettleAt","enumerator","guidKey","cast","after","catch","finally","browserWindow","browserGlobal","MutationObserver","WebKitMutationObserver","isNode","isWorker","Uint8ClampedArray","importScripts","platform","_async$filter","cb","_process"],"mappings":"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","file":"quantify.js","sourcesContent":["/**\n * quantify - Unit Simplifier\n * @version v0.0.1\n * @author Jason Park and Rounak Bastola\n * @link https://github.com/parkjs814/Quantify\n * @license MIT\n */\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nvar _$ = $,\n    extend = _$.extend;\n\n\nmodule.exports = function () {\n  var _this = this;\n\n  this.unitClasses = {};\n\n  this.addUnitClass = function (Unit) {\n    var type = Unit.TYPE;\n    var symbol = Unit.SYMBOL;\n    if (!_this.unitClasses.hasOwnProperty(type)) {\n      _this.unitClasses[type] = {};\n    }\n    _this.unitClasses[type][symbol] = Unit;\n  };\n\n  this.getUnitClass = function (type, symbol) {\n    return _this.unitClasses[type][symbol];\n  };\n\n  this.getDerivedQuantities = function () {\n    var quantities = {};\n    for (var quantityName in _this.unitClasses) {\n      var unitClasses = _this.unitClasses[quantityName];\n      var unitClass = unitClasses[Object.keys(unitClasses)[0]];\n      if (unitClass.BASE) continue;\n      quantities[quantityName] = {\n        name: quantityName,\n        types: unitClass.UNITLESS.types\n      };\n    }\n    return quantities;\n  };\n\n  this.getUnitClasses = function () {\n    var unitClasses = {};\n    for (var quantity in _this.unitClasses) {\n      extend(true, unitClasses, _this.unitClasses[quantity]);\n    }\n    return unitClasses;\n  };\n};\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {};\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nvar setupMain = require('./setup_main');\n\nmodule.exports = {\n  setupMain: setupMain\n};\n\n},{\"./setup_main\":4}],4:[function(require,module,exports){\n'use strict';\n\nvar Server = require('../../server');\nvar Util = require('../../util');\n\nmodule.exports = function () {\n  var $input = $('#input');\n  var mathField = MQ.MathField($input[0]);\n  $input.keyup(function (event) {\n    if (event.keyCode == 13) {\n      Util.refineLaTeX(mathField.latex());\n    }\n  });\n  Server.search('8.14 kg m2 / s2');\n};\n\n},{\"../../server\":6,\"../../util\":38}],5:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar DOM = require('./dom');\nvar Server = require('./server');\nvar app = require('./app');\nvar App = require('./app/constructor');\nvar Unit = require('./unit');\nvar _$ = $,\n    extend = _$.extend;\n\n// set global promise error handler\n\nRSVP.on('error', function (reason) {\n  console.assert(false, reason);\n});\n\nextend(true, app, new App());\n\nUnit.register();\n\nextend(true, window, {\n  main: DOM.setupMain\n});\n\n},{\"./app\":2,\"./app/constructor\":1,\"./dom\":3,\"./server\":6,\"./unit\":10,\"rsvp\":41}],6:[function(require,module,exports){\n'use strict';\n\nvar search = require('./search');\n\nmodule.exports = {\n  search: search\n};\n\n},{\"./search\":7}],7:[function(require,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Util = require('../util');\nvar app = require('../app');\n\nvar _$ = $,\n    extend = _$.extend;\n\nvar Combination = function () {\n  function Combination(derivedQuantities, baseQuantities) {\n    var countCalculation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    _classCallCheck(this, Combination);\n\n    this.derivedQuantities = derivedQuantities;\n    this.baseQuantities = baseQuantities;\n    if (countCalculation) this.calculateCount();\n  }\n\n  _createClass(Combination, [{\n    key: 'calculateCount',\n    value: function calculateCount() {\n      var count = 0;\n      for (var type in this.derivedQuantities) {\n        count += Math.abs(this.derivedQuantities[type]);\n      }\n      for (var _type in this.baseQuantities) {\n        count += Math.abs(this.baseQuantities[_type]);\n      }\n      this.count = count;\n    }\n  }, {\n    key: 'countDerivedUnits',\n    value: function countDerivedUnits() {\n      var count = 0;\n      for (var type in this.derivedQuantities) {\n        count += Math.abs(this.derivedQuantities[type]);\n      }\n      return count;\n    }\n  }, {\n    key: 'create',\n    value: function create(quantity, inverse) {\n      var factor = inverse ? -1 : 1;\n      var new_ = new Combination(extend(true, {}, this.derivedQuantities), extend(true, {}, this.baseQuantities), false);\n\n      var type = quantity.name;\n      if (!new_.derivedQuantities.hasOwnProperty(type)) {\n        new_.derivedQuantities[type] = factor;\n      } else {\n        if (new_.derivedQuantities[type] / factor < 0) return null;\n        new_.derivedQuantities[type] += factor;\n      }\n\n      var types = quantity.types;\n      for (var _type2 in types) {\n        if (!new_.baseQuantities.hasOwnProperty(_type2)) {\n          new_.baseQuantities[_type2] = -factor * types[_type2];\n        } else {\n          new_.baseQuantities[_type2] -= factor * types[_type2];\n        }\n        if (new_.baseQuantities[_type2] == 0) {\n          delete new_.baseQuantities[_type2];\n        }\n      }\n\n      new_.calculateCount();\n      return new_;\n    }\n  }]);\n\n  return Combination;\n}();\n\nmodule.exports = function (str) {\n  var value = 1;\n  var mulSymbols = ['N', 's', 's'];\n  var divSymbols = [];\n\n  var mulPairs = [];\n  var divPairs = [];\n  mulSymbols.forEach(function (mul) {\n    var mulClass = Util.identifyUnit(mul);\n    mulPairs.push([mulClass.TYPE, mulClass.SYMBOL]);\n  });\n  divSymbols.forEach(function (div) {\n    var divClass = Util.identifyUnit(div);\n    divPairs.push([divClass.TYPE, divClass.SYMBOL]);\n  });\n\n  var _Util$getMulAndDivCla = Util.getMulAndDivClasses(mulPairs, divPairs),\n      mulClasses = _Util$getMulAndDivCla.mulClasses,\n      divClasses = _Util$getMulAndDivCla.divClasses;\n\n  var unitless = Util.getUnitless(mulClasses, divClasses);\n  var queue = [new Combination({}, unitless.types)];\n\n  var quantities = app.getDerivedQuantities();\n  var minCount = 0x7fffffff;\n  var minCombinations = [];\n  while (queue.length > 0) {\n    var e = queue.shift();\n    if (e == null) continue;\n    if (minCount > e.count) {\n      minCount = e.count;\n      minCombinations = [e];\n    } else if (minCount == e.count) {\n      minCombinations.push(e);\n    }\n    if (e.countDerivedUnits() < 3) {\n      for (var quantityName in quantities) {\n        var quantity = quantities[quantityName];\n        queue.push(e.create(quantity, false));\n        queue.push(e.create(quantity, true));\n      }\n    }\n  }\n};\n\n},{\"../app\":2,\"../util\":38}],8:[function(require,module,exports){\n'use strict';\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar app = require('../app');\n\nvar BaseUnit = function BaseUnit(value) {\n  _classCallCheck(this, BaseUnit);\n\n  this.value = value;\n};\n\nBaseUnit.BASE = BaseUnit.prototype.base = true;\nBaseUnit.QUANTITY = BaseUnit.prototype.quantity = 1;\n\nBaseUnit.register = function (type, name, symbol) {\n  var quantity = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var parentSymbol = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n  var ParentUnit = parentSymbol ? app.getUnitClass(type, parentSymbol) : BaseUnit;\n  quantity *= ParentUnit.QUANTITY;\n\n  var Unit = function (_ParentUnit) {\n    _inherits(Unit, _ParentUnit);\n\n    function Unit(value) {\n      _classCallCheck(this, Unit);\n\n      return _possibleConstructorReturn(this, (Unit.__proto__ || Object.getPrototypeOf(Unit)).call(this, value));\n    }\n\n    return Unit;\n  }(ParentUnit);\n\n  Unit.TYPE = Unit.prototype.type = type;\n  Unit.NAME = Unit.prototype.name = name;\n  Unit.SYMBOL = Unit.prototype.symbol = symbol;\n  Unit.QUANTITY = Unit.prototype.quantity = quantity;\n  Unit.UNITLESS = { types: {}, quantity: quantity };\n  Unit.UNITLESS.types[type] = 1;\n\n  app.addUnitClass(Unit);\n};\n\nmodule.exports = BaseUnit;\n\n},{\"../app\":2}],9:[function(require,module,exports){\n'use strict';\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar app = require('../app');\nvar Util = require('../util');\n\nvar DerivedUnit = function DerivedUnit(value) {\n  _classCallCheck(this, DerivedUnit);\n\n  this.value = value;\n};\n\nDerivedUnit.BASE = DerivedUnit.prototype.base = false;\nDerivedUnit.QUANTITY = DerivedUnit.prototype.quantity = 1;\n\nDerivedUnit.register = function (type, name, symbol, mulPairs, divPairs) {\n  var quantity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var parentSymbol = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n\n  var _Util$getMulAndDivCla = Util.getMulAndDivClasses(mulPairs, divPairs),\n      mulClasses = _Util$getMulAndDivCla.mulClasses,\n      divClasses = _Util$getMulAndDivCla.divClasses;\n\n  var ParentUnit = parentSymbol ? app.getUnitClass(type, parentSymbol) : DerivedUnit;\n  quantity *= ParentUnit.QUANTITY;\n\n  var Unit = function (_ParentUnit) {\n    _inherits(Unit, _ParentUnit);\n\n    function Unit(value) {\n      _classCallCheck(this, Unit);\n\n      return _possibleConstructorReturn(this, (Unit.__proto__ || Object.getPrototypeOf(Unit)).call(this, value));\n    }\n\n    return Unit;\n  }(ParentUnit);\n\n  Unit.TYPE = Unit.prototype.type = type;\n  Unit.NAME = Unit.prototype.name = name;\n  Unit.SYMBOL = Unit.prototype.symbol = symbol;\n  Unit.MULS = Unit.prototype.muls = mulClasses;\n  Unit.DIVS = Unit.prototype.divs = divClasses;\n  Unit.QUANTITY = Unit.prototype.quantity = quantity;\n  Unit.UNITLESS = Util.getUnitless(mulClasses, divClasses);\n\n  app.addUnitClass(Unit);\n};\n\nmodule.exports = DerivedUnit;\n\n},{\"../app\":2,\"../util\":38}],10:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('./base_unit');\nvar DerivedUnit = require('./derived_unit');\nvar register = require('./register');\n\nmodule.exports = {\n  BaseUnit: BaseUnit,\n  DerivedUnit: DerivedUnit,\n  register: register\n};\n\n},{\"./base_unit\":8,\"./derived_unit\":9,\"./register\":18}],11:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'Newton';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'Newtons', 'N', [['mass', 'kg'], ['length', 'm']], [['time', 's'], ['time', 's']]);\n  DerivedUnit.register(type, 'Kilo Newtons', 'KN', [], [], 1e3, 'N');\n  DerivedUnit.register(type, 'Mega Newtons', 'MN', [], [], 1e6, 'N');\n  DerivedUnit.register(type, 'Giga Newtons', 'GN', [], [], 1e9, 'N');\n  DerivedUnit.register(type, 'milli Newtons', 'mN', [], [], 1e-3, 'N');\n  DerivedUnit.register(type, 'micro Newtons', 'μN', [], [], 1e-6, 'N');\n  DerivedUnit.register(type, 'nano Newtons', 'nN', [], [], 1e-9, 'N');\n};\n\n},{\"../derived_unit\":9}],12:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'angle';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'radian', '', 1);\n  BaseUnit.register(type, 'radian', 'rad', 1);\n  BaseUnit.register(type, 'degree', '°', 57.2958, '');\n};\n\n},{\"../base_unit\":8}],13:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'coulomb';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'coulomb', 'C', [['current', 'A'], ['time', 's']], []);\n  DerivedUnit.register(type, 'kilo coulomb', 'KC', [], [], 1e3, 'C');\n  DerivedUnit.register(type, 'Mega coulomb', 'MC', [], [], 1e6, 'C');\n  DerivedUnit.register(type, 'Giga coulomb', 'GC', [], [], 1e9, 'C');\n  DerivedUnit.register(type, 'milli coulomb', 'mC', [], [], 1e-3, 'C');\n  DerivedUnit.register(type, 'micro coulomb', 'μC', [], [], 1e-6, 'C');\n  DerivedUnit.register(type, 'nano coulomb', 'nC', [], [], 1e-9, 'C');\n};\n\n},{\"../derived_unit\":9}],14:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'current';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'Ampere', 'A', 1);\n  BaseUnit.register(type, 'centi Ampere', 'cA', 1e-2, 'A');\n  BaseUnit.register(type, 'Kilo Ampere', 'KA', 1e3, 'A');\n  BaseUnit.register(type, 'milli Ampere', 'mA', 1e-3, 'A');\n  BaseUnit.register(type, 'micro Ampere', 'µA', 1e-6, 'A');\n  BaseUnit.register(type, 'nano Ampere', 'nA', 1e-9, 'A');\n  BaseUnit.register(type, 'pico Ampere', 'pA', 1e-12, 'A');\n};\n\n},{\"../base_unit\":8}],15:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'farad';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'farad', 'F', [['time', 's'], ['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']], [['mass', 'kg'], ['length', 'm'], ['length', 'm']]);\n  DerivedUnit.register(type, 'Kilo farad', 'KF', [], [], 1e3, 'F');\n  DerivedUnit.register(type, 'Mega farad', 'MF', [], [], 1e6, 'F');\n  DerivedUnit.register(type, 'Giga farad', 'GF', [], [], 1e9, 'F');\n  DerivedUnit.register(type, 'milli farad', 'mF', [], [], 1e-3, 'F');\n  DerivedUnit.register(type, 'micro farad', 'μF', [], [], 1e-6, 'F');\n  DerivedUnit.register(type, 'nano farad', 'nF', [], [], 1e-9, 'F');\n};\n\n},{\"../derived_unit\":9}],16:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'henry';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'henry', 'H', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']]);\n  DerivedUnit.register(type, 'Kilo henry', 'KH', [], [], 1e3, 'H');\n  DerivedUnit.register(type, 'Mega henry', 'MH', [], [], 1e6, 'H');\n  DerivedUnit.register(type, 'Giga henry', 'GH', [], [], 1e9, 'H');\n  DerivedUnit.register(type, 'milli henry', 'mH', [], [], 1e-3, 'H');\n  DerivedUnit.register(type, 'micro henry', 'μH', [], [], 1e-6, 'H');\n  DerivedUnit.register(type, 'nano henry', 'nH', [], [], 1e-9, 'H');\n};\n\n},{\"../derived_unit\":9}],17:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'hertz';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'hertz', 'Hz', [], [['time', 's']]);\n  DerivedUnit.register(type, 'Kilo hertz', 'KHz', [], [], 1e3, 'Hz');\n  DerivedUnit.register(type, 'Mega hertz', 'MHz', [], [], 1e6, 'Hz');\n  DerivedUnit.register(type, 'Giga hertz', 'GHz', [], [], 1e9, 'Hz');\n  DerivedUnit.register(type, 'milli hertz', 'mHz', [], [], 1e-3, 'Hz');\n  DerivedUnit.register(type, 'micro hertz', 'μHz', [], [], 1e-6, 'Hz');\n  DerivedUnit.register(type, 'nano hertz', 'nHz', [], [], 1e-9, 'Hz');\n};\n\n},{\"../derived_unit\":9}],18:[function(require,module,exports){\n'use strict';\n\nvar length = require('./length');\nvar mass = require('./mass');\nvar time = require('./time');\nvar angle = require('./angle');\nvar current = require('./current');\nvar temp = require('./temp');\nvar matter = require('./matter');\nvar intensity = require('./intensity');\nvar storage = require('./storage');\nvar joule = require('./joule');\nvar pascal = require('./pascal');\nvar Newton = require('./Newton');\nvar hertz = require('./hertz');\nvar watt = require('./watt');\nvar coulomb = require('./coulomb');\nvar volt = require('./volt');\nvar farad = require('./farad');\nvar ohm = require('./ohm');\nvar siemens = require('./siemens');\nvar weber = require('./weber');\nvar tesla = require('./tesla');\nvar henry = require('./henry');\nvar lux = require('./lux');\n\nmodule.exports = function () {\n  length();\n  mass();\n  time();\n  angle();\n  current();\n  temp();\n  matter();\n  intensity();\n  storage();\n  joule();\n  pascal();\n  Newton();\n  hertz();\n  watt();\n  coulomb();\n  volt();\n  farad();\n  ohm();\n  siemens();\n  weber();\n  tesla();\n  henry();\n  lux();\n};\n\n},{\"./Newton\":11,\"./angle\":12,\"./coulomb\":13,\"./current\":14,\"./farad\":15,\"./henry\":16,\"./hertz\":17,\"./intensity\":19,\"./joule\":20,\"./length\":21,\"./lux\":22,\"./mass\":23,\"./matter\":24,\"./ohm\":25,\"./pascal\":26,\"./siemens\":27,\"./storage\":28,\"./temp\":29,\"./tesla\":30,\"./time\":31,\"./volt\":32,\"./watt\":33,\"./weber\":34}],19:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'intensity';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'candela', 'cd', 1);\n};\n\n},{\"../base_unit\":8}],20:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'joule';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'joule', 'J', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's']]);\n  DerivedUnit.register(type, 'Kilo joule', 'KJ', [], [], 1e3, 'J');\n  DerivedUnit.register(type, 'Mega joule', 'MJ', [], [], 1e6, 'J');\n  DerivedUnit.register(type, 'Giga joule', 'GJ', [], [], 1e9, 'J');\n  DerivedUnit.register(type, 'milli joule', 'mJ', [], [], 1e-3, 'J');\n  DerivedUnit.register(type, 'micro joule', 'μJ', [], [], 1e-6, 'J');\n  DerivedUnit.register(type, 'nano joule', 'nJ', [], [], 1e-9, 'J');\n};\n\n},{\"../derived_unit\":9}],21:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'length';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'meter', 'm', 1);\n  BaseUnit.register(type, 'centi meter', 'cm', 1e-2, 'm');\n  BaseUnit.register(type, 'Kilo meter', 'Km', 1e3, 'm');\n  BaseUnit.register(type, 'milli meter', 'mm', 1e-3, 'm');\n  BaseUnit.register(type, 'micro meter', 'µm', 1e-6, 'm');\n  BaseUnit.register(type, 'nano meter', 'nm', 1e-9, 'm');\n  BaseUnit.register(type, 'pico meter', 'pm', 1e-12, 'm');\n  BaseUnit.register(type, 'feet', 'ft', 0.3048, 'm');\n  BaseUnit.register(type, 'yard', 'yd', 3.000, 'ft');\n  BaseUnit.register(type, 'mile', 'mi', 1760, 'yd');\n  BaseUnit.register(type, 'inch', 'in', 1.5783e-5, 'mi');\n};\n\n},{\"../base_unit\":8}],22:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'lux';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'lux', 'lx', [['intensity', 'cd']], [['length', 'm'], ['length', 'm']]);\n  DerivedUnit.register(type, 'Kilo lux', 'Klx', [], [], 1e3, 'lx');\n  DerivedUnit.register(type, 'Mega lux', 'Mlx', [], [], 1e6, 'lx');\n  DerivedUnit.register(type, 'Giga lux', 'Glx', [], [], 1e9, 'lx');\n  DerivedUnit.register(type, 'milli lux', 'mlx', [], [], 1e-3, 'lx');\n  DerivedUnit.register(type, 'micro lux', 'μlx', [], [], 1e-6, 'lx');\n  DerivedUnit.register(type, 'nano lux', 'nlx', [], [], 1e-9, 'lx');\n};\n\n},{\"../derived_unit\":9}],23:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'mass';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'grams', 'g', 1);\n  BaseUnit.register(type, 'deci grams', 'dg', 1e-1, 'g');\n  BaseUnit.register(type, 'centi grams', 'cg', 1e-2, 'g');\n  BaseUnit.register(type, 'kilo grams', 'kg', 1e3, 'g');\n  BaseUnit.register(type, 'milli grams', 'mg', 1e-3, 'g');\n  BaseUnit.register(type, 'nano grams', 'ng', 1e-9, 'g');\n  BaseUnit.register(type, 'pico grams', 'pg', 1e-12, 'g');\n  BaseUnit.register(type, 'pounds', 'lb', 453.59237, 'g');\n  BaseUnit.register(type, 'ounces', 'oz', 0.0625, 'lb');\n};\n\n},{\"../base_unit\":8}],24:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'matter';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'moles', 'mol', 1);\n  BaseUnit.register(type, 'atoms', 'atoms', 6.02e23, 'mol');\n};\n\n},{\"../base_unit\":8}],25:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'ohm';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'ohm', 'Ω', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']]);\n  DerivedUnit.register(type, 'Kilo ohm', 'KΩ', [], [], 1e3, 'Ω');\n  DerivedUnit.register(type, 'Mega ohm', 'MΩ', [], [], 1e6, 'Ω');\n  DerivedUnit.register(type, 'Giga ohm', 'GΩ', [], [], 1e9, 'Ω');\n  DerivedUnit.register(type, 'milli ohm', 'mΩ', [], [], 1e-3, 'Ω');\n  DerivedUnit.register(type, 'micro ohm', 'μΩ', [], [], 1e-6, 'Ω');\n  DerivedUnit.register(type, 'nano ohm', 'nΩ', [], [], 1e-9, 'Ω');\n};\n\n},{\"../derived_unit\":9}],26:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'pascal';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'pascal', 'Pa', [['mass', 'kg']], [['length', 'm'], ['time', 's'], ['time', 's']]);\n  DerivedUnit.register(type, 'Kilo pascal', 'KPa', [], [], 1e3, 'Pa');\n  DerivedUnit.register(type, 'Mega pascal', 'MPa', [], [], 1e6, 'Pa');\n  DerivedUnit.register(type, 'Giga pascal', 'GPa', [], [], 1e9, 'Pa');\n  DerivedUnit.register(type, 'milli pascal', 'mPa', [], [], 1e-3, 'Pa');\n  DerivedUnit.register(type, 'micro pascal', 'μPa', [], [], 1e-6, 'Pa');\n  DerivedUnit.register(type, 'nano pascal', 'nPa', [], [], 1e-9, 'Pa');\n};\n\n},{\"../derived_unit\":9}],27:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'siemens';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'siemens', 'S', [['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']], [['mass', 'kg'], ['length', 'm'], ['length', 'm']]);\n  DerivedUnit.register(type, 'Kilo siemens', 'KS', [], [], 1e3, 'S');\n  DerivedUnit.register(type, 'Mega siemens', 'MS', [], [], 1e6, 'S');\n  DerivedUnit.register(type, 'Giga siemens', 'GS', [], [], 1e9, 'S');\n  DerivedUnit.register(type, 'milli siemens', 'mS', [], [], 1e-3, 'S');\n  DerivedUnit.register(type, 'micro siemens', 'μS', [], [], 1e-6, 'S');\n  DerivedUnit.register(type, 'nano siemens', 'nS', [], [], 1e-9, 'S');\n};\n\n},{\"../derived_unit\":9}],28:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'storage';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'bit', 'bit', 1);\n  BaseUnit.register(type, 'byte', 'byte', 0.125, 'bit');\n  BaseUnit.register(type, 'Kilo byte', 'Kbyte', 1e3, 'byte');\n  BaseUnit.register(type, 'Mega byte', 'Mbyte', 1e6, 'byte');\n  BaseUnit.register(type, 'Giga byte', 'Gbyte', 1e9, 'byte');\n  BaseUnit.register(type, 'Tera byte', 'Tbyte', 1e12, 'byte');\n  BaseUnit.register(type, 'Peta byte', 'Pm', 1e15, 'byte');\n  BaseUnit.register(type, 'Exa byte', 'Ebyte', 1e18, 'byte');\n  BaseUnit.register(type, 'Zetta byte', 'Zbyte', 1e21, 'byte');\n  BaseUnit.register(type, 'Yotta byte', 'Ybyte', 1e24, 'byte');\n};\n\n},{\"../base_unit\":8}],29:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'temp';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'Kelvin', 'K', 1);\n  BaseUnit.register(type, 'Celsius', '°C', 1, 'K'); // TODO\n  BaseUnit.register(type, 'Fahrenheit ', '°F', 9 / 5, '°C');\n};\n\n},{\"../base_unit\":8}],30:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'telsa';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'telsa', 'T', [['mass', 'kg']], [['time', 's'], ['time', 's'], ['current', 'A']]);\n  DerivedUnit.register(type, 'Kilo telsa', 'KT', [], [], 1e3, 'T');\n  DerivedUnit.register(type, 'Mega telsa', 'MT', [], [], 1e6, 'T');\n  DerivedUnit.register(type, 'Giga telsa', 'GT', [], [], 1e9, 'T');\n  DerivedUnit.register(type, 'milli telsa', 'mT', [], [], 1e-3, 'T');\n  DerivedUnit.register(type, 'micro telsa', 'μT', [], [], 1e-6, 'T');\n  DerivedUnit.register(type, 'nano telsa', 'nT', [], [], 1e-9, 'T');\n};\n\n},{\"../derived_unit\":9}],31:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'time';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'seconds', 's', 1);\n  BaseUnit.register(type, 'deci seconds', 'ds', 1e-1, 's');\n  BaseUnit.register(type, 'centi seconds', 'cs', 1e-2, 's');\n  BaseUnit.register(type, 'Kilo seconds', 'Ks', 1e3, 's');\n  BaseUnit.register(type, 'milli seconds', 'ms', 1e-3, 's');\n  BaseUnit.register(type, 'micro seconds', 'µs', 1e-6, 's');\n  BaseUnit.register(type, 'nano seconds', 'ns', 1e-9, 's');\n  BaseUnit.register(type, 'pico seconds', 'ps', 1e-12, 's');\n  BaseUnit.register(type, 'minutes', 'min', 60, 's');\n  BaseUnit.register(type, 'hours', 'hr', 60, 'min');\n  BaseUnit.register(type, 'days', 'd', 24, 'hr');\n  BaseUnit.register(type, 'weeks', 'w', 7, 'd');\n  BaseUnit.register(type, 'month', 'mon', 4, 'w');\n};\n\n},{\"../base_unit\":8}],32:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'volt';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'volt', 'V', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A']]);\n  DerivedUnit.register(type, 'Kilo volt', 'KV', [], [], 1e3, 'V');\n  DerivedUnit.register(type, 'Mega volt', 'MV', [], [], 1e6, 'V');\n  DerivedUnit.register(type, 'Giga volt', 'GV', [], [], 1e9, 'V');\n  DerivedUnit.register(type, 'milli volt', 'mV', [], [], 1e-3, 'V');\n  DerivedUnit.register(type, 'micro volt', 'μV', [], [], 1e-6, 'V');\n  DerivedUnit.register(type, 'nano volt', 'nV', [], [], 1e-9, 'V');\n};\n\n},{\"../derived_unit\":9}],33:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'watt';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'watt', 'W', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['time', 's']]);\n  DerivedUnit.register(type, 'Kilo watt', 'KW', [], [], 1e3, 'W');\n  DerivedUnit.register(type, 'Mega watt', 'MW', [], [], 1e6, 'W');\n  DerivedUnit.register(type, 'Giga watt', 'GW', [], [], 1e9, 'W');\n  DerivedUnit.register(type, 'milli watt', 'mW', [], [], 1e-3, 'W');\n  DerivedUnit.register(type, 'micro watt', 'μW', [], [], 1e-6, 'W');\n  DerivedUnit.register(type, 'nano watt', 'nW', [], [], 1e-9, 'W');\n};\n\n},{\"../derived_unit\":9}],34:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'weber';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'weber', 'Wb', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['current', 'A']]);\n  DerivedUnit.register(type, 'Kilo weber', 'KWb', [], [], 1e3, 'Wb');\n  DerivedUnit.register(type, 'Mega weber', 'MWb', [], [], 1e6, 'Wb');\n  DerivedUnit.register(type, 'Giga weber', 'GWb', [], [], 1e9, 'Wb');\n  DerivedUnit.register(type, 'milli weber', 'mWb', [], [], 1e-3, 'Wb');\n  DerivedUnit.register(type, 'micro weber', 'μWb', [], [], 1e-6, 'Wb');\n  DerivedUnit.register(type, 'nano weber', 'nWb', [], [], 1e-9, 'Wb');\n};\n\n},{\"../derived_unit\":9}],35:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\n\nmodule.exports = function (mulPairs, divPairs) {\n  var mulClasses = [];\n  var divClasses = [];\n\n  var queue = [];\n  mulPairs.forEach(function (mulPair) {\n    var type = mulPair[0];\n    var symbol = mulPair[1];\n    queue.push({\n      cls: app.getUnitClass(type, symbol),\n      inverse: false\n    });\n  });\n  divPairs.forEach(function (divPair) {\n    var type = divPair[0];\n    var symbol = divPair[1];\n    queue.push({\n      cls: app.getUnitClass(type, symbol),\n      inverse: true\n    });\n  });\n\n  var _loop = function _loop() {\n    var e = queue.shift();\n    if (e.cls.BASE) {\n      (e.inverse ? divClasses : mulClasses).push(e.cls);\n    } else {\n      e.cls.MULS.forEach(function (mulClass) {\n        queue.push({\n          cls: mulClass,\n          inverse: e.inverse\n        });\n      });\n      e.cls.DIVS.forEach(function (divClass) {\n        queue.push({\n          cls: divClass,\n          inverse: !e.inverse\n        });\n      });\n    }\n  };\n\n  while (queue.length > 0) {\n    _loop();\n  }\n\n  return { mulClasses: mulClasses, divClasses: divClasses };\n};\n\n},{\"../app\":2}],36:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (mulClasses, divClasses) {\n  var quantity = 1;\n  var types = {};\n  mulClasses.forEach(function (mulClass) {\n    quantity *= mulClass.QUANTITY;\n    if (types.hasOwnProperty(mulClass.TYPE)) {\n      types[mulClass.TYPE]++;\n    } else {\n      types[mulClass.TYPE] = 1;\n    }\n  });\n  divClasses.forEach(function (divClass) {\n    quantity /= divClass.QUANTITY;\n    if (types.hasOwnProperty(divClass.TYPE)) {\n      types[divClass.TYPE]--;\n    } else {\n      types[divClass.TYPE] = -1;\n    }\n  });\n  var refinedTypes = {};\n  for (var type in types) {\n    var n = types[type];\n    if (n != 0) refinedTypes[type] = n;\n  }\n\n  return { types: types, quantity: quantity };\n};\n\n},{}],37:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\n\nmodule.exports = function (symbol) {\n  var unitClasses = app.getUnitClasses();\n  for (var unitSymbol in unitClasses) {\n    var unitClass = unitClasses[unitSymbol];\n    if (unitClass.SYMBOL == symbol) return unitClass;\n  }\n};\n\n},{\"../app\":2}],38:[function(require,module,exports){\n'use strict';\n\nvar getMulAndDivClasses = require('./get_mul_and_div_classes');\nvar identifyUnit = require('./identify_unit');\nvar getUnitless = require('./get_unitless');\nvar refineLaTeX = require('./refine_latex');\n\nmodule.exports = {\n  getMulAndDivClasses: getMulAndDivClasses,\n  identifyUnit: identifyUnit,\n  getUnitless: getUnitless,\n  refineLaTeX: refineLaTeX\n};\n\n},{\"./get_mul_and_div_classes\":35,\"./get_unitless\":36,\"./identify_unit\":37,\"./refine_latex\":39}],39:[function(require,module,exports){\n'use strict';\n\nvar Util = require('../util');\nvar app = require('../app');\n\nmodule.exports = function (latex) {\n  var unitClasses = app.getUnitClasses();\n  latex = latex.replace(/\\\\ /g, '');\n\n  var replaced = null;\n  while (replaced != latex) {\n    latex = replaced || latex;\n    replaced = latex;\n    replaced = infiniteReplace(replaced, /\\(([^()]+)\\)\\^/g, '[($1)]^');\n    replaced = infiniteReplace(replaced, /\\^{([^{}]+)}/g, '^($1)');\n    replaced = infiniteReplace(replaced, /\\\\frac{([^{}]+)}{([^{}]+)}/g, '($1)/($2)');\n  }\n  latex = latex.replace(/\\\\left\\(/g, '(');\n  latex = latex.replace(/\\\\right\\)/g, ')');\n  latex = latex.replace(/\\\\cdot/g, '*');\n  latex = latex.replace(/(\\\\| )/g, '');\n  latex = latex.replace(/(?!a-zA-ZΩ°µ)((?:[a-zA-Z]|Ω|°|µ)+)(?!a-zA-ZΩ°µ)/g, function (match, symbol) {\n    if (symbol.toLowerCase() == 'e') return symbol;\n    return '$$' + JSON.stringify(unitClasses[symbol].UNITLESS) + '$$';\n  });\n  latex = infiniteReplace(latex, /(?:\\(|^)([^()]+)(?:\\)|$)/g, function (match, content) {\n    var replaced;\n\n    replaced = null;\n    while (replaced != content) {\n      content = replaced || content;\n      replaced = content;\n      replaced = replaced.replace(/\\[([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)]\\^([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)/g, function (match, value, power) {\n        return Math.pow(value, power);\n      });\n      replaced = replaced.replace(/([0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)\\^([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)/g, function (match, value, power) {\n        return Math.pow(value, power);\n      });\n      replaced = replaced.replace(/\\$\\$([^(\\$\\$)]+)\\$\\$\\^([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)/g, function (match, unitless, power) {\n        unitless = JSON.parse(unitless);\n        unitless.quantity = Math.pow(unitless.quantity, power);\n        for (var type in unitless.types) {\n          unitless.types[type] *= power;\n          if (unitless.types[type] == 0) {\n            delete unitless.types[type];\n          }\n        }\n        return '$$' + JSON.stringify(unitless) + '$$';\n      });\n    }\n\n    replaced = null;\n    while (replaced != content) {\n      content = replaced || content;\n      replaced = content;\n      replaced = replaced.replace(/([0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)(\\*|\\/)([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)/g, function (match, value1, sign, value2) {\n        value1 = Number(value1);\n        value2 = Number(value2);\n        return sign == '/' ? value1 / value2 : value1 * value2;\n      });\n      replaced = replaced.replace(/([0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)(\\*|\\/|)\\$\\$([^(\\$\\$)]+)\\$\\$/g, function (match, value, sign, unitless) {\n        return MDUnitlesses({ types: {}, quantity: Number(value) }, sign, JSON.parse(unitless));\n      });\n      replaced = replaced.replace(/\\$\\$([^(\\$\\$)]+)\\$\\$(\\*|\\/|)([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)/g, function (match, unitless, sign, value) {\n        return MDUnitlesses(JSON.parse(unitless), sign, { types: {}, quantity: Number(value) });\n      });\n      replaced = replaced.replace(/\\$\\$([^(\\$\\$)]+)\\$\\$(\\*|\\/|)\\$\\$([^(\\$\\$)]+)\\$\\$/g, function (match, unitless1, sign, unitless2) {\n        return MDUnitlesses(JSON.parse(unitless1), sign, JSON.parse(unitless2));\n      });\n    }\n\n    replaced = null;\n    while (replaced != content) {\n      content = replaced || content;\n      replaced = content;\n      replaced = replaced.replace(/([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)(\\+|-)([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)/g, function (match, value1, sign, value2) {\n        value1 = Number(value1);\n        value2 = Number(value2);\n        var result = sign == '+' ? value1 + value2 : value1 - value2;\n        return (result >= 0 ? '+' : '') + result;\n      });\n      replaced = replaced.replace(/([-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)(\\+|-)\\$\\$([^(\\$\\$)]+)\\$\\$/g, function (match, value, sign, unitless) {\n        return PMUnitlesses({ types: {}, quantity: Number(value) }, sign, JSON.parse(unitless));\n      });\n      replaced = replaced.replace(/([-+]?)\\$\\$([^(\\$\\$)]+)\\$\\$(\\+|-)([0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)/g, function (match, sign1, unitless, sign2, value) {\n        unitless = JSON.parse(unitless);\n        unitless.quantity *= sign1 == '-' ? -1 : 1;\n        return PMUnitlesses(unitless, sign2, { types: {}, quantity: Number(value) });\n      });\n      replaced = replaced.replace(/([-+]?)\\$\\$([^(\\$\\$)]+)\\$\\$(\\+|-)\\$\\$([^(\\$\\$)]+)\\$\\$/g, function (match, sign1, unitless1, sign2, unitless2) {\n        unitless1 = JSON.parse(unitless1);\n        unitless1.quantity *= sign1 == '-' ? -1 : 1;\n        return PMUnitlesses(unitless1, sign2, JSON.parse(unitless2));\n      });\n    }\n\n    return content;\n  });\n\n  console.log(latex);\n  return latex;\n};\n\nvar MDUnitlesses = function MDUnitlesses(unitless1, sign, unitless2) {\n  if (sign == '/') {\n    unitless1.quantity /= unitless2.quantity;\n  } else {\n    unitless1.quantity *= unitless2.quantity;\n  }\n  for (var type in unitless2.types) {\n    if (!unitless1.types.hasOwnProperty(type)) {\n      unitless1.types[type] = (sign == '/' ? -1 : 1) * unitless2.types[type];\n    } else {\n      unitless1.types[type] += (sign == '/' ? -1 : 1) * unitless2.types[type];\n    }\n    if (unitless1.types[type] == 0) {\n      delete unitless1.types[type];\n    }\n  }\n  return '$$' + JSON.stringify(unitless1) + '$$';\n};\n\nvar PMUnitlesses = function PMUnitlesses(unitless1, sign, unitless2) {\n  if (Object.keys(unitless1.types).length != Object.keys(unitless2.types).length) return null;\n  for (var type in unitless2.types) {\n    if (unitless2.types[type] != unitless1.types[type]) return null;\n  }\n  if (sign == '+') {\n    unitless1.quantity += unitless2.quantity;\n  } else {\n    unitless1.quantity -= unitless2.quantity;\n  }\n  return '+$$' + JSON.stringify(unitless1) + '$$';\n};\n\nvar infiniteReplace = function infiniteReplace(str, src, dst) {\n  var replaced = null;\n  while (replaced != str) {\n    str = replaced || str;\n    replaced = str.replace(src, dst);\n  }\n  return str;\n};\n\n},{\"../app\":2,\"../util\":38}],40:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],41:[function(require,module,exports){\n(function (process,global){\n/*!\n * @overview RSVP - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2016 Yehuda Katz, Tom Dale, Stefan Penner and contributors\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/tildeio/rsvp.js/master/LICENSE\n * @version   3.3.3\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.RSVP = global.RSVP || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction indexOf(callbacks, callback) {\n  for (var i = 0, l = callbacks.length; i < l; i++) {\n    if (callbacks[i] === callback) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction callbacksFor(object) {\n  var callbacks = object._promiseCallbacks;\n\n  if (!callbacks) {\n    callbacks = object._promiseCallbacks = {};\n  }\n\n  return callbacks;\n}\n\n/**\n  @class RSVP.EventTarget\n*/\nvar EventTarget = {\n\n  /**\n    `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\n    Example:\n     ```javascript\n    let object = {};\n     RSVP.EventTarget.mixin(object);\n     object.on('finished', function(event) {\n      // handle event\n    });\n     object.trigger('finished', { detail: value });\n    ```\n     `EventTarget.mixin` also works with prototypes:\n     ```javascript\n    let Person = function() {};\n    RSVP.EventTarget.mixin(Person.prototype);\n     let yehuda = new Person();\n    let tom = new Person();\n     yehuda.on('poke', function(event) {\n      console.log('Yehuda says OW');\n    });\n     tom.on('poke', function(event) {\n      console.log('Tom says OW');\n    });\n     yehuda.trigger('poke');\n    tom.trigger('poke');\n    ```\n     @method mixin\n    @for RSVP.EventTarget\n    @private\n    @param {Object} object object to extend with EventTarget methods\n  */\n  mixin: function mixin(object) {\n    object['on'] = this['on'];\n    object['off'] = this['off'];\n    object['trigger'] = this['trigger'];\n    object._promiseCallbacks = undefined;\n    return object;\n  },\n\n  /**\n    Registers a callback to be executed when `eventName` is triggered\n     ```javascript\n    object.on('event', function(eventInfo){\n      // handle the event\n    });\n     object.trigger('event');\n    ```\n     @method on\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to listen for\n    @param {Function} callback function to be called when the event is triggered.\n  */\n  on: function on(eventName, callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback must be a function');\n    }\n\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined;\n\n    callbacks = allCallbacks[eventName];\n\n    if (!callbacks) {\n      callbacks = allCallbacks[eventName] = [];\n    }\n\n    if (indexOf(callbacks, callback) === -1) {\n      callbacks.push(callback);\n    }\n  },\n\n  /**\n    You can use `off` to stop firing a particular callback for an event:\n     ```javascript\n    function doStuff() { // do stuff! }\n    object.on('stuff', doStuff);\n     object.trigger('stuff'); // doStuff will be called\n     // Unregister ONLY the doStuff callback\n    object.off('stuff', doStuff);\n    object.trigger('stuff'); // doStuff will NOT be called\n    ```\n     If you don't pass a `callback` argument to `off`, ALL callbacks for the\n    event will not be executed when the event fires. For example:\n     ```javascript\n    let callback1 = function(){};\n    let callback2 = function(){};\n     object.on('stuff', callback1);\n    object.on('stuff', callback2);\n     object.trigger('stuff'); // callback1 and callback2 will be executed.\n     object.off('stuff');\n    object.trigger('stuff'); // callback1 and callback2 will not be executed!\n    ```\n     @method off\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName event to stop listening to\n    @param {Function} callback optional argument. If given, only the function\n    given will be removed from the event's callback queue. If no `callback`\n    argument is given, all callbacks will be removed from the event's callback\n    queue.\n  */\n  off: function off(eventName, callback) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        index = undefined;\n\n    if (!callback) {\n      allCallbacks[eventName] = [];\n      return;\n    }\n\n    callbacks = allCallbacks[eventName];\n\n    index = indexOf(callbacks, callback);\n\n    if (index !== -1) {\n      callbacks.splice(index, 1);\n    }\n  },\n\n  /**\n    Use `trigger` to fire custom events. For example:\n     ```javascript\n    object.on('foo', function(){\n      console.log('foo event happened!');\n    });\n    object.trigger('foo');\n    // 'foo event happened!' logged to the console\n    ```\n     You can also pass a value as a second argument to `trigger` that will be\n    passed as an argument to all event listeners for the event:\n     ```javascript\n    object.on('foo', function(value){\n      console.log(value.name);\n    });\n     object.trigger('foo', { name: 'bar' });\n    // 'bar' logged to the console\n    ```\n     @method trigger\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to be triggered\n    @param {*} options optional value to be passed to any event handlers for\n    the given `eventName`\n  */\n  trigger: function trigger(eventName, options, label) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        callback = undefined;\n\n    if (callbacks = allCallbacks[eventName]) {\n      // Don't cache the callbacks.length since it may grow\n      for (var i = 0; i < callbacks.length; i++) {\n        callback = callbacks[i];\n\n        callback(options, label);\n      }\n    }\n  }\n};\n\nvar config = {\n  instrument: false\n};\n\nEventTarget['mixin'](config);\n\nfunction configure(name, value) {\n  if (name === 'onerror') {\n    // handle for legacy users that expect the actual\n    // error to be passed to their function added via\n    // `RSVP.configure('onerror', someFunctionHere);`\n    config['on']('error', value);\n    return;\n  }\n\n  if (arguments.length === 2) {\n    config[name] = value;\n  } else {\n    return config[name];\n  }\n}\n\nfunction objectOrFunction(x) {\n  return typeof x === 'function' || typeof x === 'object' && x !== null;\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nfunction isMaybeThenable(x) {\n  return typeof x === 'object' && x !== null;\n}\n\nvar _isArray = undefined;\nif (!Array.isArray) {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n} else {\n  _isArray = Array.isArray;\n}\n\nvar isArray = _isArray;\n\n// Date.now is not available in browsers < IE9\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility\nvar now = Date.now || function () {\n  return new Date().getTime();\n};\n\nfunction F() {}\n\nvar o_create = Object.create || function (o) {\n  if (arguments.length > 1) {\n    throw new Error('Second argument not supported');\n  }\n  if (typeof o !== 'object') {\n    throw new TypeError('Argument must be an object');\n  }\n  F.prototype = o;\n  return new F();\n};\n\nvar queue = [];\n\nfunction scheduleFlush() {\n  setTimeout(function () {\n    for (var i = 0; i < queue.length; i++) {\n      var entry = queue[i];\n\n      var payload = entry.payload;\n\n      payload.guid = payload.key + payload.id;\n      payload.childGuid = payload.key + payload.childId;\n      if (payload.error) {\n        payload.stack = payload.error.stack;\n      }\n\n      config['trigger'](entry.name, entry.payload);\n    }\n    queue.length = 0;\n  }, 50);\n}\nfunction instrument(eventName, promise, child) {\n  if (1 === queue.push({\n    name: eventName,\n    payload: {\n      key: promise._guidKey,\n      id: promise._id,\n      eventName: eventName,\n      detail: promise._result,\n      childId: child && child._id,\n      label: promise._label,\n      timeStamp: now(),\n      error: config[\"instrument-with-stack\"] ? new Error(promise._label) : null\n    } })) {\n    scheduleFlush();\n  }\n}\n\n/**\n  `RSVP.Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {*} object value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop, label);\n  resolve(promise, object);\n  return promise;\n}\n\nfunction withOwnPromise() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then) {\n  config.async(function (promise) {\n    var sealed = false;\n    var error = tryThen(then, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    thenable._onError = null;\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$) {\n  if (maybeThenable.constructor === promise.constructor && then$$ === then && promise.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$ === GET_THEN_ERROR) {\n      reject(promise, GET_THEN_ERROR.error);\n    } else if (then$$ === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$)) {\n      handleForeignThenable(promise, maybeThenable, then$$);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    fulfill(promise, value);\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onError) {\n    promise._onError(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length === 0) {\n    if (config.instrument) {\n      instrument('fulfilled', promise);\n    }\n  } else {\n    config.async(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n  config.async(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var subscribers = parent._subscribers;\n  var length = subscribers.length;\n\n  parent._onError = null;\n\n  subscribers[length] = child;\n  subscribers[length + FULFILLED] = onFulfillment;\n  subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    config.async(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (config.instrument) {\n    instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);\n  }\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = undefined,\n      callback = undefined,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = undefined,\n      error = undefined,\n      succeeded = undefined,\n      failed = undefined;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, withOwnPromise());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n      resolve(promise, value);\n    } else if (failed) {\n      reject(promise, error);\n    } else if (settled === FULFILLED) {\n      fulfill(promise, value);\n    } else if (settled === REJECTED) {\n      reject(promise, value);\n    }\n}\n\nfunction initializePromise(promise, resolver) {\n  var resolved = false;\n  try {\n    resolver(function (value) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      resolve(promise, value);\n    }, function (reason) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nfunction then(onFulfillment, onRejection, label) {\n  var _arguments = arguments;\n\n  var parent = this;\n  var state = parent._state;\n\n  if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {\n    config.instrument && instrument('chained', parent, parent);\n    return parent;\n  }\n\n  parent._onError = null;\n\n  var child = new parent.constructor(noop, label);\n  var result = parent._result;\n\n  config.instrument && instrument('chained', parent, child);\n\n  if (state) {\n    (function () {\n      var callback = _arguments[state - 1];\n      config.async(function () {\n        return invokeCallback(state, child, callback, result);\n      });\n    })();\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\nfunction makeSettledResult(state, position, value) {\n  if (state === FULFILLED) {\n    return {\n      state: 'fulfilled',\n      value: value\n    };\n  } else {\n    return {\n      state: 'rejected',\n      reason: value\n    };\n  }\n}\n\nfunction Enumerator(Constructor, input, abortOnReject, label) {\n  this._instanceConstructor = Constructor;\n  this.promise = new Constructor(noop, label);\n  this._abortOnReject = abortOnReject;\n\n  if (this._validateInput(input)) {\n    this._input = input;\n    this.length = input.length;\n    this._remaining = input.length;\n\n    this._init();\n\n    if (this.length === 0) {\n      fulfill(this.promise, this._result);\n    } else {\n      this.length = this.length || 0;\n      this._enumerate();\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    }\n  } else {\n    reject(this.promise, this._validationError());\n  }\n}\n\nEnumerator.prototype._validateInput = function (input) {\n  return isArray(input);\n};\n\nEnumerator.prototype._validationError = function () {\n  return new Error('Array Methods must be provided an Array');\n};\n\nEnumerator.prototype._init = function () {\n  this._result = new Array(this.length);\n};\n\nEnumerator.prototype._enumerate = function () {\n  var length = this.length;\n  var promise = this.promise;\n  var input = this._input;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    this._eachEntry(input[i], i);\n  }\n};\n\nEnumerator.prototype._settleMaybeThenable = function (entry, i) {\n  var c = this._instanceConstructor;\n  var resolve = c.resolve;\n\n  if (resolve === resolve$1) {\n    var then$$ = getThen(entry);\n\n    if (then$$ === then && entry._state !== PENDING) {\n      entry._onError = null;\n      this._settledAt(entry._state, i, entry._result);\n    } else if (typeof then$$ !== 'function') {\n      this._remaining--;\n      this._result[i] = this._makeResult(FULFILLED, i, entry);\n    } else if (c === Promise) {\n      var promise = new c(noop);\n      handleMaybeThenable(promise, entry, then$$);\n      this._willSettleAt(promise, i);\n    } else {\n      this._willSettleAt(new c(function (resolve) {\n        return resolve(entry);\n      }), i);\n    }\n  } else {\n    this._willSettleAt(resolve(entry), i);\n  }\n};\n\nEnumerator.prototype._eachEntry = function (entry, i) {\n  if (isMaybeThenable(entry)) {\n    this._settleMaybeThenable(entry, i);\n  } else {\n    this._remaining--;\n    this._result[i] = this._makeResult(FULFILLED, i, entry);\n  }\n};\n\nEnumerator.prototype._settledAt = function (state, i, value) {\n  var promise = this.promise;\n\n  if (promise._state === PENDING) {\n    this._remaining--;\n\n    if (this._abortOnReject && state === REJECTED) {\n      reject(promise, value);\n    } else {\n      this._result[i] = this._makeResult(state, i, value);\n    }\n  }\n\n  if (this._remaining === 0) {\n    fulfill(promise, this._result);\n  }\n};\n\nEnumerator.prototype._makeResult = function (state, i, value) {\n  return value;\n};\n\nEnumerator.prototype._willSettleAt = function (promise, i) {\n  var enumerator = this;\n\n  subscribe(promise, undefined, function (value) {\n    return enumerator._settledAt(FULFILLED, i, value);\n  }, function (reason) {\n    return enumerator._settledAt(REJECTED, i, reason);\n  });\n};\n\n/**\n  `RSVP.Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error(\"2\"));\n  let promise3 = RSVP.reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries, label) {\n  return new Enumerator(this, entries, true, /* abort on reject */label).promise;\n}\n\n/**\n  `RSVP.Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `RSVP.Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  RSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} entries array of promises to observe\n  @param {String} label optional string for describing the promise returned.\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  var promise = new Constructor(noop, label);\n\n  if (!isArray(entries)) {\n    reject(promise, new TypeError('You must pass an array to race.'));\n    return promise;\n  }\n\n  for (var i = 0; promise._state === PENDING && i < entries.length; i++) {\n    subscribe(Constructor.resolve(entries[i]), undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n\n  return promise;\n}\n\n/**\n  `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop, label);\n  reject(promise, reason);\n  return promise;\n}\n\nvar guidKey = 'rsvp_' + now() + '-';\nvar counter = 0;\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise’s eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class RSVP.Promise\n  @param {function} resolver\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @constructor\n*/\nfunction Promise(resolver, label) {\n  this._id = counter++;\n  this._label = label;\n  this._state = undefined;\n  this._result = undefined;\n  this._subscribers = [];\n\n  config.instrument && instrument('created', this);\n\n  if (noop !== resolver) {\n    typeof resolver !== 'function' && needsResolver();\n    this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n  }\n}\n\nPromise.cast = resolve$1; // deprecated\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = resolve$1;\nPromise.reject = reject$1;\n\nPromise.prototype = {\n  constructor: Promise,\n\n  _guidKey: guidKey,\n\n  _onError: function _onError(reason) {\n    var promise = this;\n    config.after(function () {\n      if (promise._onError) {\n        config['trigger']('error', reason, promise._label);\n      }\n    });\n  },\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we\\'re unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we\\'re unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfillment\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  then: then,\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn\\'t find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'catch': function _catch(onRejection, label) {\n    return this.then(undefined, onRejection, label);\n  },\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'finally': function _finally(callback, label) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    return promise.then(function (value) {\n      return constructor.resolve(callback()).then(function () {\n        return value;\n      });\n    }, function (reason) {\n      return constructor.resolve(callback()).then(function () {\n        throw reason;\n      });\n    }, label);\n  }\n};\n\nfunction Result() {\n  this.value = undefined;\n}\n\nvar ERROR = new Result();\nvar GET_THEN_ERROR$1 = new Result();\n\nfunction getThen$1(obj) {\n  try {\n    return obj.then;\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction tryApply(f, s, a) {\n  try {\n    f.apply(s, a);\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction makeObject(_, argumentNames) {\n  var obj = {};\n  var length = _.length;\n  var args = new Array(length);\n\n  for (var x = 0; x < length; x++) {\n    args[x] = _[x];\n  }\n\n  for (var i = 0; i < argumentNames.length; i++) {\n    var _name = argumentNames[i];\n    obj[_name] = args[i + 1];\n  }\n\n  return obj;\n}\n\nfunction arrayResult(_) {\n  var length = _.length;\n  var args = new Array(length - 1);\n\n  for (var i = 1; i < length; i++) {\n    args[i - 1] = _[i];\n  }\n\n  return args;\n}\n\nfunction wrapThenable(_then, promise) {\n  return {\n    then: function then(onFulFillment, onRejection) {\n      return _then.call(promise, onFulFillment, onRejection);\n    }\n  };\n}\n\n/**\n  `RSVP.denodeify` takes a 'node-style' function and returns a function that\n  will return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\n  browser when you'd prefer to use promises over using callbacks. For example,\n  `denodeify` transforms the following:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) return handleError(err);\n    handleData(data);\n  });\n  ```\n\n  into:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n\n  readFile('myfile.txt').then(handleData, handleError);\n  ```\n\n  If the node function has multiple success parameters, then `denodeify`\n  just returns the first one:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'));\n\n  request('http://example.com').then(function(res) {\n    // ...\n  });\n  ```\n\n  However, if you need all success parameters, setting `denodeify`'s\n  second parameter to `true` causes it to return all success parameters\n  as an array:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), true);\n\n  request('http://example.com').then(function(result) {\n    // result[0] -> res\n    // result[1] -> body\n  });\n  ```\n\n  Or if you pass it an array with names it returns the parameters as a hash:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), ['res', 'body']);\n\n  request('http://example.com').then(function(result) {\n    // result.res\n    // result.body\n  });\n  ```\n\n  Sometimes you need to retain the `this`:\n\n  ```javascript\n  let app = require('express')();\n  let render = RSVP.denodeify(app.render.bind(app));\n  ```\n\n  The denodified function inherits from the original function. It works in all\n  environments, except IE 10 and below. Consequently all properties of the original\n  function are available to you. However, any properties you change on the\n  denodeified function won't be changed on the original function. Example:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request')),\n      cookieJar = request.jar(); // <- Inheritance is used here\n\n  request('http://example.com', {jar: cookieJar}).then(function(res) {\n    // cookieJar.cookies holds now the cookies returned by example.com\n  });\n  ```\n\n  Using `denodeify` makes it easier to compose asynchronous operations instead\n  of using callbacks. For example, instead of:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) { ... } // Handle error\n    fs.writeFile('myfile2.txt', data, function(err){\n      if (err) { ... } // Handle error\n      console.log('done')\n    });\n  });\n  ```\n\n  you can chain the operations together using `then` from the returned promise:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n  let writeFile = RSVP.denodeify(fs.writeFile);\n\n  readFile('myfile.txt').then(function(data){\n    return writeFile('myfile2.txt', data);\n  }).then(function(){\n    console.log('done')\n  }).catch(function(error){\n    // Handle error\n  });\n  ```\n\n  @method denodeify\n  @static\n  @for RSVP\n  @param {Function} nodeFunc a 'node-style' function that takes a callback as\n  its last argument. The callback expects an error to be passed as its first\n  argument (if an error occurred, otherwise null), and the value from the\n  operation as its second argument ('function(err, value){ }').\n  @param {Boolean|Array} [options] An optional paramter that if set\n  to `true` causes the promise to fulfill with the callback's success arguments\n  as an array. This is useful if the node function has multiple success\n  paramters. If you set this paramter to an array with names, the promise will\n  fulfill with a hash with these names as keys and the success parameters as\n  values.\n  @return {Function} a function that wraps `nodeFunc` to return an\n  `RSVP.Promise`\n  @static\n*/\nfunction denodeify(nodeFunc, options) {\n  var fn = function fn() {\n    var self = this;\n    var l = arguments.length;\n    var args = new Array(l + 1);\n    var promiseInput = false;\n\n    for (var i = 0; i < l; ++i) {\n      var arg = arguments[i];\n\n      if (!promiseInput) {\n        // TODO: clean this up\n        promiseInput = needsPromiseInput(arg);\n        if (promiseInput === GET_THEN_ERROR$1) {\n          var p = new Promise(noop);\n          reject(p, GET_THEN_ERROR$1.value);\n          return p;\n        } else if (promiseInput && promiseInput !== true) {\n          arg = wrapThenable(promiseInput, arg);\n        }\n      }\n      args[i] = arg;\n    }\n\n    var promise = new Promise(noop);\n\n    args[l] = function (err, val) {\n      if (err) reject(promise, err);else if (options === undefined) resolve(promise, val);else if (options === true) resolve(promise, arrayResult(arguments));else if (isArray(options)) resolve(promise, makeObject(arguments, options));else resolve(promise, val);\n    };\n\n    if (promiseInput) {\n      return handlePromiseInput(promise, args, nodeFunc, self);\n    } else {\n      return handleValueInput(promise, args, nodeFunc, self);\n    }\n  };\n\n  fn.__proto__ = nodeFunc;\n\n  return fn;\n}\n\nfunction handleValueInput(promise, args, nodeFunc, self) {\n  var result = tryApply(nodeFunc, self, args);\n  if (result === ERROR) {\n    reject(promise, result.value);\n  }\n  return promise;\n}\n\nfunction handlePromiseInput(promise, args, nodeFunc, self) {\n  return Promise.all(args).then(function (args) {\n    var result = tryApply(nodeFunc, self, args);\n    if (result === ERROR) {\n      reject(promise, result.value);\n    }\n    return promise;\n  });\n}\n\nfunction needsPromiseInput(arg) {\n  if (arg && typeof arg === 'object') {\n    if (arg.constructor === Promise) {\n      return true;\n    } else {\n      return getThen$1(arg);\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.all`.\n\n  @method all\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n*/\nfunction all$1(array, label) {\n  return Promise.all(array, label);\n}\n\nfunction AllSettled(Constructor, entries, label) {\n  this._superConstructor(Constructor, entries, false, /* don't abort on reject */label);\n}\n\nAllSettled.prototype = o_create(Enumerator.prototype);\nAllSettled.prototype._superConstructor = Enumerator;\nAllSettled.prototype._makeResult = makeSettledResult;\nAllSettled.prototype._validationError = function () {\n  return new Error('allSettled must be called with an array');\n};\n\n/**\n  `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\n  a fail-fast method, it waits until all the promises have returned and\n  shows you all the results. This is useful if you want to handle multiple\n  promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled. The return promise is fulfilled with an array of the states of\n  the promises passed into the `promises` array argument.\n\n  Each state object will either indicate fulfillment or rejection, and\n  provide the corresponding value or reason. The states will take one of\n  the following formats:\n\n  ```javascript\n  { state: 'fulfilled', value: value }\n    or\n  { state: 'rejected', reason: reason }\n  ```\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.Promise.resolve(1);\n  let promise2 = RSVP.Promise.reject(new Error('2'));\n  let promise3 = RSVP.Promise.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.allSettled(promises).then(function(array){\n    // array == [\n    //   { state: 'fulfilled', value: 1 },\n    //   { state: 'rejected', reason: Error },\n    //   { state: 'rejected', reason: Error }\n    // ]\n    // Note that for the second item, reason.message will be '2', and for the\n    // third item, reason.message will be '3'.\n  }, function(error) {\n    // Not run. (This block would only be called if allSettled had failed,\n    // for instance if passed an incorrect argument type.)\n  });\n  ```\n\n  @method allSettled\n  @static\n  @for RSVP\n  @param {Array} entries\n  @param {String} label - optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with an array of the settled\n  states of the constituent promises.\n*/\nfunction allSettled(entries, label) {\n  return new AllSettled(Promise, entries, label).promise;\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.race`.\n\n  @method race\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n */\nfunction race$1(array, label) {\n  return Promise.race(array, label);\n}\n\nfunction PromiseHash(Constructor, object, label) {\n  this._superConstructor(Constructor, object, true, label);\n}\n\nPromiseHash.prototype = o_create(Enumerator.prototype);\nPromiseHash.prototype._superConstructor = Enumerator;\nPromiseHash.prototype._init = function () {\n  this._result = {};\n};\n\nPromiseHash.prototype._validateInput = function (input) {\n  return input && typeof input === 'object';\n};\n\nPromiseHash.prototype._validationError = function () {\n  return new Error('Promise.hash must be called with an object');\n};\n\nPromiseHash.prototype._enumerate = function () {\n  var enumerator = this;\n  var promise = enumerator.promise;\n  var input = enumerator._input;\n  var results = [];\n\n  for (var key in input) {\n    if (promise._state === PENDING && Object.prototype.hasOwnProperty.call(input, key)) {\n      results.push({\n        position: key,\n        entry: input[key]\n      });\n    }\n  }\n\n  var length = results.length;\n  enumerator._remaining = length;\n  var result = undefined;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    result = results[i];\n    enumerator._eachEntry(result.entry, result.position);\n  }\n};\n\n/**\n  `RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\n  for its `promises` argument.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  fulfilled, or rejected if any of them become rejected. The returned promise\n  is fulfilled with a hash that has the same key names as the `promises` object\n  argument. If any of the values in the object are not promises, they will\n  simply be copied over to the fulfilled object.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    yourPromise: RSVP.resolve(2),\n    theirPromise: RSVP.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: 1,\n    //   yourPromise: 2,\n    //   theirPromise: 3,\n    //   notAPromise: 4\n    // }\n  });\n  ````\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the first promise\n  that is rejected will be given as the reason to the rejection handler.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    rejectedPromise: RSVP.reject(new Error('rejectedPromise')),\n    anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === 'rejectedPromise'\n  });\n  ```\n\n  An important note: `RSVP.hash` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hash` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hash(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: 'Example'\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hash\n  @static\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all properties of `promises`\n  have been fulfilled, or rejected if any of them become rejected.\n*/\nfunction hash(object, label) {\n  return new PromiseHash(Promise, object, label).promise;\n}\n\nfunction HashSettled(Constructor, object, label) {\n  this._superConstructor(Constructor, object, false, label);\n}\n\nHashSettled.prototype = o_create(PromiseHash.prototype);\nHashSettled.prototype._superConstructor = Enumerator;\nHashSettled.prototype._makeResult = makeSettledResult;\n\nHashSettled.prototype._validationError = function () {\n  return new Error('hashSettled must be called with an object');\n};\n\n/**\n  `RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\n  instead of an array for its `promises` argument.\n\n  Unlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\n  but like `RSVP.allSettled`, `hashSettled` waits until all the\n  constituent promises have returned and then shows you all the results\n  with their states and values/reasons. This is useful if you want to\n  handle multiple promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled, or rejected if the passed parameters are invalid.\n\n  The returned promise is fulfilled with a hash that has the same key names as\n  the `promises` object argument. If any of the values in the object are not\n  promises, they will be copied over to the fulfilled object and marked with state\n  'fulfilled'.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    yourPromise: RSVP.Promise.resolve(2),\n    theirPromise: RSVP.Promise.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: { state: 'fulfilled', value: 1 },\n    //   yourPromise: { state: 'fulfilled', value: 2 },\n    //   theirPromise: { state: 'fulfilled', value: 3 },\n    //   notAPromise: { state: 'fulfilled', value: 4 }\n    // }\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the state will\n  be set to 'rejected' and the reason for rejection provided.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    rejectedPromise: RSVP.Promise.reject(new Error('rejection')),\n    anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise:              { state: 'fulfilled', value: 1 },\n    //   rejectedPromise:        { state: 'rejected', reason: Error },\n    //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n    // }\n    // Note that for rejectedPromise, reason.message == 'rejection',\n    // and for anotherRejectedPromise, reason.message == 'more rejection'.\n  });\n  ```\n\n  An important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.Promise.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.Promise.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hashSettled(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: { state: 'fulfilled', value: 'Example' }\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hashSettled\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when when all properties of `promises`\n  have been settled.\n  @static\n*/\nfunction hashSettled(object, label) {\n  return new HashSettled(Promise, object, label).promise;\n}\n\nfunction rethrow(reason) {\n  setTimeout(function () {\n    throw reason;\n  });\n  throw reason;\n}\n\n/**\n  `RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n  `RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\n  interface. New code should use the `RSVP.Promise` constructor instead.\n\n  The object returned from `RSVP.defer` is a plain object with three properties:\n\n  * promise - an `RSVP.Promise`.\n  * reject - a function that causes the `promise` property on this object to\n    become rejected\n  * resolve - a function that causes the `promise` property on this object to\n    become fulfilled.\n\n  Example:\n\n   ```javascript\n   let deferred = RSVP.defer();\n\n   deferred.resolve(\"Success!\");\n\n   deferred.promise.then(function(value){\n     // value here is \"Success!\"\n   });\n   ```\n\n  @method defer\n  @static\n  @for RSVP\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Object}\n */\nfunction defer(label) {\n  var deferred = { resolve: undefined, reject: undefined };\n\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  }, label);\n\n  return deferred;\n}\n\n/**\n `RSVP.map` is similar to JavaScript's native `map` method, except that it\n  waits for all promises to become fulfilled before running the `mapFn` on\n  each item in given to `promises`. `RSVP.map` returns a promise that will\n  become fulfilled with the result of running `mapFn` on the values the promises\n  become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(result){\n    // result is [ 2, 3, 4 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.map` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\n  say you want to get all comments from a set of blog posts, but you need\n  the blog posts first because they contain a url to those comments.\n\n  ```javscript\n\n  let mapFn = function(blogPost){\n    // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n    // with some comments data\n    return getComments(blogPost.comments_url);\n  };\n\n  // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n  // with some blog post data\n  RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n    // comments is the result of asking the server for the comments\n    // of all blog posts returned from getBlogPosts()\n  });\n  ```\n\n  @method map\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} mapFn function to be called on each fulfilled promise.\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with the result of calling\n  `mapFn` on each fulfilled promise or value when they become fulfilled.\n   The promise will be rejected if any of the given `promises` become rejected.\n  @static\n*/\nfunction map(promises, mapFn, label) {\n  return Promise.all(promises, label).then(function (values) {\n    if (!isFunction(mapFn)) {\n      throw new TypeError(\"You must pass a function as map's second argument.\");\n    }\n\n    var length = values.length;\n    var results = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      results[i] = mapFn(values[i]);\n    }\n\n    return Promise.all(results, label);\n  });\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.resolve`.\n\n  @method resolve\n  @static\n  @for RSVP\n  @param {*} value value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$2(value, label) {\n  return Promise.resolve(value, label);\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.reject`.\n\n  @method reject\n  @static\n  @for RSVP\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$2(reason, label) {\n  return Promise.reject(reason, label);\n}\n\n/**\n `RSVP.filter` is similar to JavaScript's native `filter` method, except that it\n  waits for all promises to become fulfilled before running the `filterFn` on\n  each item in given to `promises`. `RSVP.filter` returns a promise that will\n  become fulfilled with the result of running `filterFn` on the values the\n  promises become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n\n  let promises = [promise1, promise2, promise3];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(result){\n    // result is [ 2, 3 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.filter` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.filter` will also wait for any promises returned from `filterFn`.\n  For instance, you may want to fetch a list of users then return a subset\n  of those users based on some asynchronous operation:\n\n  ```javascript\n\n  let alice = { name: 'alice' };\n  let bob   = { name: 'bob' };\n  let users = [ alice, bob ];\n\n  let promises = users.map(function(user){\n    return RSVP.resolve(user);\n  });\n\n  let filterFn = function(user){\n    // Here, Alice has permissions to create a blog post, but Bob does not.\n    return getPrivilegesForUser(user).then(function(privs){\n      return privs.can_create_blog_post === true;\n    });\n  };\n  RSVP.filter(promises, filterFn).then(function(users){\n    // true, because the server told us only Alice can create a blog post.\n    users.length === 1;\n    // false, because Alice is the only user present in `users`\n    users[0] === bob;\n  });\n  ```\n\n  @method filter\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} filterFn - function to be called on each resolved value to\n  filter the final results.\n  @param {String} label optional string describing the promise. Useful for\n  tooling.\n  @return {Promise}\n*/\n\nfunction resolveAll(promises, label) {\n  return Promise.all(promises, label);\n}\n\nfunction resolveSingle(promise, label) {\n  return Promise.resolve(promise, label).then(function (promises) {\n    return resolveAll(promises, label);\n  });\n}\nfunction filter(promises, filterFn, label) {\n  var promise = isArray(promises) ? resolveAll(promises, label) : resolveSingle(promises, label);\n  return promise.then(function (values) {\n    if (!isFunction(filterFn)) {\n      throw new TypeError(\"You must pass a function as filter's second argument.\");\n    }\n\n    var length = values.length;\n    var filtered = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      filtered[i] = filterFn(values[i]);\n    }\n\n    return resolveAll(filtered, label).then(function (filtered) {\n      var results = new Array(length);\n      var newLength = 0;\n\n      for (var i = 0; i < length; i++) {\n        if (filtered[i]) {\n          results[newLength] = values[i];\n          newLength++;\n        }\n      }\n\n      results.length = newLength;\n\n      return results;\n    });\n  });\n}\n\nvar len = 0;\nvar vertxNext = undefined;\nfunction asap(callback, arg) {\n  queue$1[len] = callback;\n  queue$1[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 1, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    scheduleFlush$1();\n  }\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  var nextTick = process.nextTick;\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // setImmediate should be used instead instead\n  var version = process.versions.node.match(/^(?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)$/);\n  if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {\n    nextTick = setImmediate;\n  }\n  return function () {\n    return nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    return node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  return function () {\n    return setTimeout(flush, 1);\n  };\n}\n\nvar queue$1 = new Array(1000);\n\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue$1[i];\n    var arg = queue$1[i + 1];\n\n    callback(arg);\n\n    queue$1[i] = undefined;\n    queue$1[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertex() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush$1 = undefined;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush$1 = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush$1 = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush$1 = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush$1 = attemptVertex();\n} else {\n  scheduleFlush$1 = useSetTimeout();\n}\n\nvar platform = undefined;\n\n/* global self */\nif (typeof self === 'object') {\n  platform = self;\n\n  /* global global */\n} else if (typeof global === 'object') {\n    platform = global;\n  } else {\n    throw new Error('no global: `self` or `global` found');\n  }\n\nvar _async$filter;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// defaults\n\n// the default export here is for backwards compat:\n//   https://github.com/tildeio/rsvp.js/issues/434\nconfig.async = asap;\nconfig.after = function (cb) {\n  return setTimeout(cb, 0);\n};\nvar cast = resolve$2;\n\nvar async = function async(callback, arg) {\n  return config.async(callback, arg);\n};\n\nfunction on() {\n  config['on'].apply(config, arguments);\n}\n\nfunction off() {\n  config['off'].apply(config, arguments);\n}\n\n// Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`\nif (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {\n  var callbacks = window['__PROMISE_INSTRUMENTATION__'];\n  configure('instrument', true);\n  for (var eventName in callbacks) {\n    if (callbacks.hasOwnProperty(eventName)) {\n      on(eventName, callbacks[eventName]);\n    }\n  }\n}var rsvp = (_async$filter = {\n  cast: cast,\n  Promise: Promise,\n  EventTarget: EventTarget,\n  all: all$1,\n  allSettled: allSettled,\n  race: race$1,\n  hash: hash,\n  hashSettled: hashSettled,\n  rethrow: rethrow,\n  defer: defer,\n  denodeify: denodeify,\n  configure: configure,\n  on: on,\n  off: off,\n  resolve: resolve$2,\n  reject: reject$2,\n  map: map\n}, _defineProperty(_async$filter, 'async', async), _defineProperty(_async$filter, 'filter', // babel seems to error if async isn't a computed prop here...\nfilter), _async$filter);\n\nexports['default'] = rsvp;\nexports.cast = cast;\nexports.Promise = Promise;\nexports.EventTarget = EventTarget;\nexports.all = all$1;\nexports.allSettled = allSettled;\nexports.race = race$1;\nexports.hash = hash;\nexports.hashSettled = hashSettled;\nexports.rethrow = rethrow;\nexports.defer = defer;\nexports.denodeify = denodeify;\nexports.configure = configure;\nexports.on = on;\nexports.off = off;\nexports.resolve = resolve$2;\nexports.reject = reject$2;\nexports.map = map;\nexports.async = async;\nexports.filter = filter;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":40}]},{},[5])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}