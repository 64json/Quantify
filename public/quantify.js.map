{"version":3,"sources":["quantify.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_$","$","extend","_this","this","unitClasses","addUnitClass","Unit","type","TYPE","symbol","SYMBOL","hasOwnProperty","getUnitClass","getDerivedQuantities","quantities","quantityName","unitClass","Object","keys","BASE","name","types","UNITLESS","getUnitClasses","quantity","2","3","setupMain","./setup_main","4","Server","search","../../server","5","RSVP","DOM","app","App","on","reason","console","assert","register","window","main","./app","./app/constructor","./dom","./server","./unit","rsvp","6","./search","7","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","Util","Combination","derivedQuantities","baseQuantities","countCalculation","arguments","undefined","calculateCount","value","count","Math","abs","_type","inverse","factor","new_","_type2","str","mulSymbols","divSymbols","mulPairs","divPairs","forEach","mul","mulClass","identifyUnit","push","div","divClass","_Util$getMulAndDivCla","getMulAndDivClasses","mulClasses","divClasses","unitless","getUnitless","queue","log","minCount","minCombinations","shift","countDerivedUnits","create","../app","../util","8","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","constructor","setPrototypeOf","__proto__","BaseUnit","base","QUANTITY","parentSymbol","ParentUnit","_ParentUnit","getPrototypeOf","9","DerivedUnit","MULS","muls","DIVS","divs","10","./base_unit","./derived_unit","./register","11","../derived_unit","12","../base_unit","13","14","15","16","17","18","mass","time","angle","current","temp","matter","intensity","storage","joule","pascal","Newton","hertz","watt","coulomb","volt","farad","ohm","siemens","weber","tesla","henry","lux","./Newton","./angle","./coulomb","./current","./farad","./henry","./hertz","./intensity","./joule","./length","./lux","./mass","./matter","./ohm","./pascal","./siemens","./storage","./temp","./tesla","./time","./volt","./watt","./weber","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","mulPair","cls","divPair","_loop","36","refinedTypes","37","unitSymbol","38","./get_mul_and_div_classes","./get_unitless","./identify_unit","39","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","concat","queueIndex","drainQueue","timeout","len","run","Item","array","noop","process","nextTick","args","Array","apply","title","browser","env","argv","version","versions","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","dir","umask","40","global","factory","define","amd","indexOf","callbacks","callback","callbacksFor","object","_promiseCallbacks","configure","config","objectOrFunction","x","isFunction","isMaybeThenable","F","scheduleFlush","entry","payload","guid","id","childGuid","childId","error","stack","instrument","eventName","promise","child","_guidKey","_id","detail","_result","label","_label","timeStamp","now","resolve$1","resolve","withOwnPromise","getThen","then","GET_THEN_ERROR","tryThen","fulfillmentHandler","rejectionHandler","handleForeignThenable","thenable","async","sealed","fulfill","reject","handleOwnThenable","_state","FULFILLED","REJECTED","_onError","subscribe","handleMaybeThenable","maybeThenable","then$$","publishRejection","publish","PENDING","_subscribers","parent","onFulfillment","onRejection","subscribers","settled","invokeCallback","ErrorObject","tryCatch","TRY_CATCH_ERROR","hasCallback","succeeded","failed","initializePromise","resolver","resolved","_arguments","state","result","makeSettledResult","position","Enumerator","input","abortOnReject","_instanceConstructor","_abortOnReject","_validateInput","_input","_remaining","_init","_enumerate","_validationError","all","entries","race","isArray","reject$1","needsResolver","needsNew","Promise","counter","Result","getThen$1","obj","ERROR","tryApply","makeObject","_","argumentNames","_name","arrayResult","wrapThenable","_then","onFulFillment","denodeify","nodeFunc","options","fn","promiseInput","arg","needsPromiseInput","GET_THEN_ERROR$1","p","err","val","handlePromiseInput","handleValueInput","all$1","AllSettled","_superConstructor","allSettled","race$1","PromiseHash","hash","HashSettled","hashSettled","rethrow","defer","deferred","map","promises","mapFn","values","results","resolve$2","reject$2","resolveAll","resolveSingle","filter","filterFn","filtered","newLength","asap","queue$1","scheduleFlush$1","useNextTick","node","match","setImmediate","flush","useVertxTimer","vertxNext","useSetTimeout","useMutationObserver","iterations","observer","BrowserMutationObserver","document","createTextNode","observe","characterData","data","useMessageChannel","channel","MessageChannel","port1","onmessage","port2","postMessage","attemptVertex","vertx","runOnLoop","runOnContext","_defineProperty","EventTarget","mixin","allCallbacks","index","splice","trigger","_isArray","toString","Date","getTime","o_create","_eachEntry","_settleMaybeThenable","c","_settledAt","_makeResult","_willSettleAt","enumerator","guidKey","cast","after","catch","finally","browserWindow","browserGlobal","MutationObserver","WebKitMutationObserver","isNode","isWorker","Uint8ClampedArray","importScripts","platform","_async$filter","cb","_process"],"mappings":"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","file":"quantify.js","sourcesContent":["/**\n * quantify - Unit Simplifier\n * @version v0.0.1\n * @author Jason Park and Rounak Bastola\n * @link https://github.com/parkjs814/Quantify\n * @license MIT\n */\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nvar _$ = $,\n    extend = _$.extend;\n\n\nmodule.exports = function () {\n  var _this = this;\n\n  this.unitClasses = {};\n\n  this.addUnitClass = function (Unit) {\n    var type = Unit.TYPE;\n    var symbol = Unit.SYMBOL;\n    if (!_this.unitClasses.hasOwnProperty(type)) {\n      _this.unitClasses[type] = {};\n    }\n    _this.unitClasses[type][symbol] = Unit;\n  };\n\n  this.getUnitClass = function (type, symbol) {\n    return _this.unitClasses[type][symbol];\n  };\n\n  this.getDerivedQuantities = function () {\n    var quantities = {};\n    for (var quantityName in _this.unitClasses) {\n      var unitClasses = _this.unitClasses[quantityName];\n      var unitClass = unitClasses[Object.keys(unitClasses)[0]];\n      if (unitClass.BASE) continue;\n      quantities[quantityName] = {\n        name: quantityName,\n        types: unitClass.UNITLESS.types\n      };\n    }\n    return quantities;\n  };\n\n  this.getUnitClasses = function () {\n    var unitClasses = {};\n    for (var quantity in _this.unitClasses) {\n      extend(true, unitClasses, _this.unitClasses[quantity]);\n    }\n    return unitClasses;\n  };\n};\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {};\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nvar setupMain = require('./setup_main');\n\nmodule.exports = {\n  setupMain: setupMain\n};\n\n},{\"./setup_main\":4}],4:[function(require,module,exports){\n'use strict';\n\nvar Server = require('../../server');\n\nmodule.exports = function () {\n  Server.search('8.14 kg m2 / s2');\n};\n\n},{\"../../server\":6}],5:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar DOM = require('./dom');\nvar Server = require('./server');\nvar app = require('./app');\nvar App = require('./app/constructor');\nvar Unit = require('./unit');\nvar _$ = $,\n    extend = _$.extend;\n\n// set global promise error handler\n\nRSVP.on('error', function (reason) {\n  console.assert(false, reason);\n});\n\nextend(true, app, new App());\n\nUnit.register();\n\nextend(true, window, {\n  main: DOM.setupMain\n});\n\n},{\"./app\":2,\"./app/constructor\":1,\"./dom\":3,\"./server\":6,\"./unit\":10,\"rsvp\":40}],6:[function(require,module,exports){\n'use strict';\n\nvar search = require('./search');\n\nmodule.exports = {\n  search: search\n};\n\n},{\"./search\":7}],7:[function(require,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Util = require('../util');\nvar app = require('../app');\n\nvar _$ = $,\n    extend = _$.extend;\n\nvar Combination = function () {\n  function Combination(derivedQuantities, baseQuantities) {\n    var countCalculation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    _classCallCheck(this, Combination);\n\n    this.derivedQuantities = derivedQuantities;\n    this.baseQuantities = baseQuantities;\n    if (countCalculation) this.calculateCount();\n  }\n\n  _createClass(Combination, [{\n    key: 'calculateCount',\n    value: function calculateCount() {\n      var count = 0;\n      for (var type in this.derivedQuantities) {\n        count += Math.abs(this.derivedQuantities[type]);\n      }\n      for (var _type in this.baseQuantities) {\n        count += Math.abs(this.baseQuantities[_type]);\n      }\n      this.count = count;\n    }\n  }, {\n    key: 'countDerivedUnits',\n    value: function countDerivedUnits() {\n      var count = 0;\n      for (var type in this.derivedQuantities) {\n        count += Math.abs(this.derivedQuantities[type]);\n      }\n      return count;\n    }\n  }, {\n    key: 'create',\n    value: function create(quantity, inverse) {\n      var factor = inverse ? -1 : 1;\n      var new_ = new Combination(extend(true, {}, this.derivedQuantities), extend(true, {}, this.baseQuantities), false);\n\n      var type = quantity.name;\n      if (!new_.derivedQuantities.hasOwnProperty(type)) {\n        new_.derivedQuantities[type] = factor;\n      } else {\n        if (new_.derivedQuantities[type] / factor < 0) return null;\n        new_.derivedQuantities[type] += factor;\n      }\n\n      var types = quantity.types;\n      for (var _type2 in types) {\n        if (!new_.baseQuantities.hasOwnProperty(_type2)) {\n          new_.baseQuantities[_type2] = -factor * types[_type2];\n        } else {\n          new_.baseQuantities[_type2] -= factor * types[_type2];\n        }\n        if (new_.baseQuantities[_type2] == 0) {\n          delete new_.baseQuantities[_type2];\n        }\n      }\n\n      new_.calculateCount();\n      return new_;\n    }\n  }]);\n\n  return Combination;\n}();\n\nmodule.exports = function (str) {\n  var value = 1;\n  var mulSymbols = ['N', 's', 's'];\n  var divSymbols = [];\n\n  var mulPairs = [];\n  var divPairs = [];\n  mulSymbols.forEach(function (mul) {\n    var mulClass = Util.identifyUnit(mul);\n    mulPairs.push([mulClass.TYPE, mulClass.SYMBOL]);\n  });\n  divSymbols.forEach(function (div) {\n    var divClass = Util.identifyUnit(div);\n    divPairs.push([divClass.TYPE, divClass.SYMBOL]);\n  });\n\n  var _Util$getMulAndDivCla = Util.getMulAndDivClasses(mulPairs, divPairs),\n      mulClasses = _Util$getMulAndDivCla.mulClasses,\n      divClasses = _Util$getMulAndDivCla.divClasses;\n\n  var unitless = Util.getUnitless(mulClasses, divClasses);\n  var queue = [new Combination({}, unitless.types)];\n\n  var quantities = app.getDerivedQuantities();\n  console.log(quantities);\n  var minCount = 0x7fffffff;\n  var minCombinations = [];\n  while (queue.length > 0) {\n    var e = queue.shift();\n    if (e == null) continue;\n    if (minCount > e.count) {\n      minCount = e.count;\n      minCombinations = [e];\n    } else if (minCount == e.count) {\n      minCombinations.push(e);\n    }\n    if (e.countDerivedUnits() < 4) {\n      for (var quantityName in quantities) {\n        var quantity = quantities[quantityName];\n        queue.push(e.create(quantity, false));\n        queue.push(e.create(quantity, true));\n      }\n    }\n  }\n  console.log(minCombinations);\n};\n\n},{\"../app\":2,\"../util\":38}],8:[function(require,module,exports){\n'use strict';\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar app = require('../app');\n\nvar BaseUnit = function BaseUnit(value) {\n  _classCallCheck(this, BaseUnit);\n\n  this.value = value;\n};\n\nBaseUnit.BASE = BaseUnit.prototype.base = true;\nBaseUnit.QUANTITY = BaseUnit.prototype.quantity = 1;\n\nBaseUnit.register = function (type, symbol) {\n  var quantity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var parentSymbol = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var ParentUnit = parentSymbol ? app.getUnitClass(type, parentSymbol) : BaseUnit;\n  quantity *= ParentUnit.QUANTITY;\n\n  var Unit = function (_ParentUnit) {\n    _inherits(Unit, _ParentUnit);\n\n    function Unit(value) {\n      _classCallCheck(this, Unit);\n\n      return _possibleConstructorReturn(this, (Unit.__proto__ || Object.getPrototypeOf(Unit)).call(this, value));\n    }\n\n    return Unit;\n  }(ParentUnit);\n\n  Unit.TYPE = Unit.prototype.type = type;\n  Unit.SYMBOL = Unit.prototype.symbol = symbol;\n  Unit.QUANTITY = Unit.prototype.quantity = quantity;\n  Unit.UNITLESS = { types: {}, quantity: quantity };\n  Unit.UNITLESS.types[type] = 1;\n\n  app.addUnitClass(Unit);\n};\n\nmodule.exports = BaseUnit;\n\n},{\"../app\":2}],9:[function(require,module,exports){\n'use strict';\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar app = require('../app');\nvar Util = require('../util');\n\nvar DerivedUnit = function DerivedUnit(value) {\n  _classCallCheck(this, DerivedUnit);\n\n  this.value = value;\n};\n\nDerivedUnit.BASE = DerivedUnit.prototype.base = false;\nDerivedUnit.QUANTITY = DerivedUnit.prototype.quantity = 1;\n\nDerivedUnit.register = function (type, symbol, mulPairs, divPairs) {\n  var quantity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var parentSymbol = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n\n  var _Util$getMulAndDivCla = Util.getMulAndDivClasses(mulPairs, divPairs),\n      mulClasses = _Util$getMulAndDivCla.mulClasses,\n      divClasses = _Util$getMulAndDivCla.divClasses;\n\n  var ParentUnit = parentSymbol ? app.getUnitClass(type, parentSymbol) : DerivedUnit;\n  quantity *= ParentUnit.QUANTITY;\n\n  var Unit = function (_ParentUnit) {\n    _inherits(Unit, _ParentUnit);\n\n    function Unit(value) {\n      _classCallCheck(this, Unit);\n\n      return _possibleConstructorReturn(this, (Unit.__proto__ || Object.getPrototypeOf(Unit)).call(this, value));\n    }\n\n    return Unit;\n  }(ParentUnit);\n\n  Unit.TYPE = Unit.prototype.type = type;\n  Unit.SYMBOL = Unit.prototype.symbol = symbol;\n  Unit.MULS = Unit.prototype.muls = mulClasses;\n  Unit.DIVS = Unit.prototype.divs = divClasses;\n  Unit.QUANTITY = Unit.prototype.quantity = quantity;\n  Unit.UNITLESS = Util.getUnitless(mulClasses, divClasses);\n\n  app.addUnitClass(Unit);\n};\n\nmodule.exports = DerivedUnit;\n\n},{\"../app\":2,\"../util\":38}],10:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('./base_unit');\nvar DerivedUnit = require('./derived_unit');\nvar register = require('./register');\n\nmodule.exports = {\n  BaseUnit: BaseUnit,\n  DerivedUnit: DerivedUnit,\n  register: register\n};\n\n},{\"./base_unit\":8,\"./derived_unit\":9,\"./register\":18}],11:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'Newton';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'N', [['mass', 'kg'], ['length', 'm']], [['time', 's'], ['time', 's']]);\n  DerivedUnit.register(type, 'KN', [], [], 1e3, 'N');\n  DerivedUnit.register(type, 'MN', [], [], 1e6, 'N');\n  DerivedUnit.register(type, 'GN', [], [], 1e9, 'N');\n  DerivedUnit.register(type, 'mN', [], [], 1e-3, 'N');\n  DerivedUnit.register(type, 'μN', [], [], 1e-6, 'N');\n  DerivedUnit.register(type, 'nN', [], [], 1e-9, 'N');\n};\n\n},{\"../derived_unit\":9}],12:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'angle';\n\nmodule.exports = function () {\n  BaseUnit.register(type, '', 1);\n  BaseUnit.register(type, 'rad', 1);\n  BaseUnit.register(type, '°', 57.2958, '');\n};\n\n},{\"../base_unit\":8}],13:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'coulomb';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'C', [['current', 'A'], ['time', 's']], []);\n  DerivedUnit.register(type, 'KC', [], [], 1e3, 'C');\n  DerivedUnit.register(type, 'MC', [], [], 1e6, 'C');\n  DerivedUnit.register(type, 'GC', [], [], 1e9, 'C');\n  DerivedUnit.register(type, 'mC', [], [], 1e-3, 'C');\n  DerivedUnit.register(type, 'μC', [], [], 1e-6, 'C');\n  DerivedUnit.register(type, 'nC', [], [], 1e-9, 'C');\n};\n\n},{\"../derived_unit\":9}],14:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'current';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'A', 1);\n  BaseUnit.register(type, 'cA', 1e-2, 'A');\n  BaseUnit.register(type, 'kA', 1e3, 'A');\n  BaseUnit.register(type, 'mA', 1e-3, 'A');\n  BaseUnit.register(type, 'µA', 1e-6, 'A');\n  BaseUnit.register(type, 'nA', 1e-9, 'A');\n  BaseUnit.register(type, 'pA', 1e-12, 'A');\n};\n\n},{\"../base_unit\":8}],15:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'farad';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'F', [['time', 's'], ['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']], [['mass', 'kg'], ['length', 'm'], ['length', 'm']]);\n  DerivedUnit.register(type, 'KF', [], [], 1e3, 'F');\n  DerivedUnit.register(type, 'MF', [], [], 1e6, 'F');\n  DerivedUnit.register(type, 'GF', [], [], 1e9, 'F');\n  DerivedUnit.register(type, 'mF', [], [], 1e-3, 'F');\n  DerivedUnit.register(type, 'μF', [], [], 1e-6, 'F');\n  DerivedUnit.register(type, 'nF', [], [], 1e-9, 'F');\n};\n\n},{\"../derived_unit\":9}],16:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'henry';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'H', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']]);\n  DerivedUnit.register(type, 'KH', [], [], 1e3, 'H');\n  DerivedUnit.register(type, 'MH', [], [], 1e6, 'H');\n  DerivedUnit.register(type, 'GH', [], [], 1e9, 'H');\n  DerivedUnit.register(type, 'mH', [], [], 1e-3, 'H');\n  DerivedUnit.register(type, 'μH', [], [], 1e-6, 'H');\n  DerivedUnit.register(type, 'nH', [], [], 1e-9, 'H');\n};\n\n},{\"../derived_unit\":9}],17:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'hertz';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'Hz', [], [['time', 's']]);\n  DerivedUnit.register(type, 'KHz', [], [], 1e3, 'Hz');\n  DerivedUnit.register(type, 'MHz', [], [], 1e6, 'Hz');\n  DerivedUnit.register(type, 'GHz', [], [], 1e9, 'Hz');\n  DerivedUnit.register(type, 'mHz', [], [], 1e-3, 'Hz');\n  DerivedUnit.register(type, 'μHz', [], [], 1e-6, 'Hz');\n  DerivedUnit.register(type, 'nHz', [], [], 1e-9, 'Hz');\n};\n\n},{\"../derived_unit\":9}],18:[function(require,module,exports){\n'use strict';\n\nvar length = require('./length');\nvar mass = require('./mass');\nvar time = require('./time');\nvar angle = require('./angle');\nvar current = require('./current');\nvar temp = require('./temp');\nvar matter = require('./matter');\nvar intensity = require('./intensity');\nvar storage = require('./storage');\nvar joule = require('./joule');\nvar pascal = require('./pascal');\nvar Newton = require('./Newton');\nvar hertz = require('./hertz');\nvar watt = require('./watt');\nvar coulomb = require('./coulomb');\nvar volt = require('./volt');\nvar farad = require('./farad');\nvar ohm = require('./ohm');\nvar siemens = require('./siemens');\nvar weber = require('./weber');\nvar tesla = require('./tesla');\nvar henry = require('./henry');\nvar lux = require('./lux');\n\nmodule.exports = function () {\n  length();\n  mass();\n  time();\n  angle();\n  current();\n  temp();\n  matter();\n  intensity();\n  storage();\n  joule();\n  pascal();\n  Newton();\n  hertz();\n  watt();\n  coulomb();\n  volt();\n  farad();\n  ohm();\n  siemens();\n  weber();\n  tesla();\n  henry();\n  lux();\n};\n\n},{\"./Newton\":11,\"./angle\":12,\"./coulomb\":13,\"./current\":14,\"./farad\":15,\"./henry\":16,\"./hertz\":17,\"./intensity\":19,\"./joule\":20,\"./length\":21,\"./lux\":22,\"./mass\":23,\"./matter\":24,\"./ohm\":25,\"./pascal\":26,\"./siemens\":27,\"./storage\":28,\"./temp\":29,\"./tesla\":30,\"./time\":31,\"./volt\":32,\"./watt\":33,\"./weber\":34}],19:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'intensity';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'cd', 1);\n};\n\n},{\"../base_unit\":8}],20:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'joule';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'J', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's']]);\n  DerivedUnit.register(type, 'KJ', [], [], 1e3, 'J');\n  DerivedUnit.register(type, 'MJ', [], [], 1e6, 'J');\n  DerivedUnit.register(type, 'GJ', [], [], 1e9, 'J');\n  DerivedUnit.register(type, 'mJ', [], [], 1e-3, 'J');\n  DerivedUnit.register(type, 'μJ', [], [], 1e-6, 'J');\n  DerivedUnit.register(type, 'nJ', [], [], 1e-9, 'J');\n};\n\n},{\"../derived_unit\":9}],21:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'length';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'm', 1);\n  BaseUnit.register(type, 'cm', 1e-2, 'm');\n  BaseUnit.register(type, 'km', 1e3, 'm');\n  BaseUnit.register(type, 'mm', 1e-3, 'm');\n  BaseUnit.register(type, 'µm', 1e-6, 'm');\n  BaseUnit.register(type, 'nm', 1e-9, 'm');\n  BaseUnit.register(type, 'pm', 1e-12, 'm');\n  BaseUnit.register(type, 'ft', 0.3048, 'm');\n  BaseUnit.register(type, 'yd', 3.000, 'ft');\n  BaseUnit.register(type, 'mi', 1760, 'yd');\n  BaseUnit.register(type, 'in', 1.5783e-5, 'mi');\n};\n\n},{\"../base_unit\":8}],22:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'lux';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'lx', [['intensity', 'cd']], [['length', 'm'], ['length', 'm']]);\n  DerivedUnit.register(type, 'Klx', [], [], 1e3, 'lx');\n  DerivedUnit.register(type, 'Mlx', [], [], 1e6, 'lx');\n  DerivedUnit.register(type, 'Glx', [], [], 1e9, 'lx');\n  DerivedUnit.register(type, 'mlx', [], [], 1e-3, 'lx');\n  DerivedUnit.register(type, 'μlx', [], [], 1e-6, 'lx');\n  DerivedUnit.register(type, 'nlx', [], [], 1e-9, 'lx');\n};\n\n},{\"../derived_unit\":9}],23:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'mass';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'g', 1);\n  BaseUnit.register(type, 'dg', 1e-1, 'g');\n  BaseUnit.register(type, 'cg', 1e-2, 'g');\n  BaseUnit.register(type, 'kg', 1e3, 'g');\n  BaseUnit.register(type, 'mg', 1e-3, 'g');\n  BaseUnit.register(type, 'ng', 1e-9, 'g');\n  BaseUnit.register(type, 'pg', 1e-12, 'g');\n  BaseUnit.register(type, 'lb', 453.59237, 'g');\n  BaseUnit.register(type, 'oz', 0.0625, 'lb');\n};\n\n},{\"../base_unit\":8}],24:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'matter';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'mol', 1);\n  BaseUnit.register(type, 'atoms', 6.02e23, 'mol');\n};\n\n},{\"../base_unit\":8}],25:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'ohm';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'Ω', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']]);\n  DerivedUnit.register(type, 'KΩ', [], [], 1e3, 'Ω');\n  DerivedUnit.register(type, 'MΩ', [], [], 1e6, 'Ω');\n  DerivedUnit.register(type, 'GΩ', [], [], 1e9, 'Ω');\n  DerivedUnit.register(type, 'mΩ', [], [], 1e-3, 'Ω');\n  DerivedUnit.register(type, 'μΩ', [], [], 1e-6, 'Ω');\n  DerivedUnit.register(type, 'nΩ', [], [], 1e-9, 'Ω');\n};\n\n},{\"../derived_unit\":9}],26:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'pascal';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'Pa', [['mass', 'kg']], [['length', 'm'], ['time', 's'], ['time', 's']]);\n  DerivedUnit.register(type, 'KPa', [], [], 1e3, 'Pa');\n  DerivedUnit.register(type, 'MPa', [], [], 1e6, 'Pa');\n  DerivedUnit.register(type, 'GPa', [], [], 1e9, 'Pa');\n  DerivedUnit.register(type, 'mPa', [], [], 1e-3, 'Pa');\n  DerivedUnit.register(type, 'μPa', [], [], 1e-6, 'Pa');\n  DerivedUnit.register(type, 'nPa', [], [], 1e-9, 'Pa');\n};\n\n},{\"../derived_unit\":9}],27:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'siemens';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'S', [['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']], [['mass', 'kg'], ['length', 'm'], ['length', 'm']]);\n  DerivedUnit.register(type, 'KS', [], [], 1e3, 'S');\n  DerivedUnit.register(type, 'MS', [], [], 1e6, 'S');\n  DerivedUnit.register(type, 'GS', [], [], 1e9, 'S');\n  DerivedUnit.register(type, 'mS', [], [], 1e-3, 'S');\n  DerivedUnit.register(type, 'μS', [], [], 1e-6, 'S');\n  DerivedUnit.register(type, 'nS', [], [], 1e-9, 'S');\n};\n\n},{\"../derived_unit\":9}],28:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'storage';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'bit', 1);\n  BaseUnit.register(type, 'byte', 0.125, 'bit');\n  BaseUnit.register(type, 'kbyte', 1e3, 'byte');\n  BaseUnit.register(type, 'Mbyte', 1e6, 'byte');\n  BaseUnit.register(type, 'Gbyte', 1e9, 'byte');\n  BaseUnit.register(type, 'Tbyte', 1e12, 'byte');\n  BaseUnit.register(type, 'Pm', 1e15, 'byte');\n  BaseUnit.register(type, 'Ebyte', 1e18, 'byte');\n  BaseUnit.register(type, 'Zbyte', 1e21, 'byte');\n  BaseUnit.register(type, 'Ybyte', 1e24, 'byte');\n};\n\n},{\"../base_unit\":8}],29:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'temp';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'K', 1);\n  BaseUnit.register(type, '°C', 1, 'K'); // TODO\n  BaseUnit.register(type, '°F', 9 / 5, '°C');\n};\n\n},{\"../base_unit\":8}],30:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'telsa';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'T', [['mass', 'kg']], [['time', 's'], ['time', 's'], ['current', 'A']]);\n  DerivedUnit.register(type, 'KT', [], [], 1e3, 'T');\n  DerivedUnit.register(type, 'MT', [], [], 1e6, 'T');\n  DerivedUnit.register(type, 'GT', [], [], 1e9, 'T');\n  DerivedUnit.register(type, 'mT', [], [], 1e-3, 'T');\n  DerivedUnit.register(type, 'μT', [], [], 1e-6, 'T');\n  DerivedUnit.register(type, 'nT', [], [], 1e-9, 'T');\n};\n\n},{\"../derived_unit\":9}],31:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'time';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 's', 1);\n  BaseUnit.register(type, 'ds', 1e-1, 's');\n  BaseUnit.register(type, 'cs', 1e-2, 's');\n  BaseUnit.register(type, 'ks', 1e3, 's');\n  BaseUnit.register(type, 'ms', 1e-3, 's');\n  BaseUnit.register(type, 'µs', 1e-6, 's');\n  BaseUnit.register(type, 'ns', 1e-9, 's');\n  BaseUnit.register(type, 'ps', 1e-12, 's');\n  BaseUnit.register(type, 'min', 60, 's');\n  BaseUnit.register(type, 'hr', 60, 'min');\n  BaseUnit.register(type, 'd', 24, 'hr');\n  BaseUnit.register(type, 'w', 7, 'd');\n  BaseUnit.register(type, 'mon', 4, 'w');\n};\n\n},{\"../base_unit\":8}],32:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'volt';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'V', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A']]);\n  DerivedUnit.register(type, 'KV', [], [], 1e3, 'V');\n  DerivedUnit.register(type, 'MV', [], [], 1e6, 'V');\n  DerivedUnit.register(type, 'GV', [], [], 1e9, 'V');\n  DerivedUnit.register(type, 'mV', [], [], 1e-3, 'V');\n  DerivedUnit.register(type, 'μV', [], [], 1e-6, 'V');\n  DerivedUnit.register(type, 'nV', [], [], 1e-9, 'V');\n};\n\n},{\"../derived_unit\":9}],33:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'watt';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'W', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['time', 's']]);\n  DerivedUnit.register(type, 'KW', [], [], 1e3, 'W');\n  DerivedUnit.register(type, 'MW', [], [], 1e6, 'W');\n  DerivedUnit.register(type, 'GW', [], [], 1e9, 'W');\n  DerivedUnit.register(type, 'mW', [], [], 1e-3, 'W');\n  DerivedUnit.register(type, 'μW', [], [], 1e-6, 'W');\n  DerivedUnit.register(type, 'nW', [], [], 1e-9, 'W');\n};\n\n},{\"../derived_unit\":9}],34:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'weber';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'Wb', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['current', 'A']]);\n  DerivedUnit.register(type, 'KWb', [], [], 1e3, 'Wb');\n  DerivedUnit.register(type, 'MWb', [], [], 1e6, 'Wb');\n  DerivedUnit.register(type, 'GWb', [], [], 1e9, 'Wb');\n  DerivedUnit.register(type, 'mWb', [], [], 1e-3, 'Wb');\n  DerivedUnit.register(type, 'μWb', [], [], 1e-6, 'Wb');\n  DerivedUnit.register(type, 'nWb', [], [], 1e-9, 'Wb');\n};\n\n},{\"../derived_unit\":9}],35:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\n\nmodule.exports = function (mulPairs, divPairs) {\n  var mulClasses = [];\n  var divClasses = [];\n\n  var queue = [];\n  mulPairs.forEach(function (mulPair) {\n    var type = mulPair[0];\n    var symbol = mulPair[1];\n    queue.push({\n      cls: app.getUnitClass(type, symbol),\n      inverse: false\n    });\n  });\n  divPairs.forEach(function (divPair) {\n    var type = divPair[0];\n    var symbol = divPair[1];\n    queue.push({\n      cls: app.getUnitClass(type, symbol),\n      inverse: true\n    });\n  });\n\n  var _loop = function _loop() {\n    var e = queue.shift();\n    if (e.cls.BASE) {\n      (e.inverse ? divClasses : mulClasses).push(e.cls);\n    } else {\n      e.cls.MULS.forEach(function (mulClass) {\n        queue.push({\n          cls: mulClass,\n          inverse: e.inverse\n        });\n      });\n      e.cls.DIVS.forEach(function (divClass) {\n        queue.push({\n          cls: divClass,\n          inverse: !e.inverse\n        });\n      });\n    }\n  };\n\n  while (queue.length > 0) {\n    _loop();\n  }\n\n  return { mulClasses: mulClasses, divClasses: divClasses };\n};\n\n},{\"../app\":2}],36:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (mulClasses, divClasses) {\n  var quantity = 1;\n  var types = {};\n  mulClasses.forEach(function (mulClass) {\n    quantity *= mulClass.QUANTITY;\n    if (types.hasOwnProperty(mulClass.TYPE)) {\n      types[mulClass.TYPE]++;\n    } else {\n      types[mulClass.TYPE] = 1;\n    }\n  });\n  divClasses.forEach(function (divClass) {\n    quantity /= divClass.QUANTITY;\n    if (types.hasOwnProperty(divClass.TYPE)) {\n      types[divClass.TYPE]--;\n    } else {\n      types[divClass.TYPE] = -1;\n    }\n  });\n  var refinedTypes = {};\n  for (var type in types) {\n    var n = types[type];\n    if (n != 0) refinedTypes[type] = n;\n  }\n\n  return { types: types, quantity: quantity };\n};\n\n},{}],37:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\n\nmodule.exports = function (symbol) {\n  var unitClasses = app.getUnitClasses();\n  for (var unitSymbol in unitClasses) {\n    var unitClass = unitClasses[unitSymbol];\n    if (unitClass.SYMBOL == symbol) return unitClass;\n  }\n};\n\n},{\"../app\":2}],38:[function(require,module,exports){\n'use strict';\n\nvar getMulAndDivClasses = require('./get_mul_and_div_classes');\nvar identifyUnit = require('./identify_unit');\nvar getUnitless = require('./get_unitless');\n\nmodule.exports = {\n  getMulAndDivClasses: getMulAndDivClasses,\n  identifyUnit: identifyUnit,\n  getUnitless: getUnitless\n};\n\n},{\"./get_mul_and_div_classes\":35,\"./get_unitless\":36,\"./identify_unit\":37}],39:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],40:[function(require,module,exports){\n(function (process,global){\n/*!\n * @overview RSVP - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2016 Yehuda Katz, Tom Dale, Stefan Penner and contributors\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/tildeio/rsvp.js/master/LICENSE\n * @version   3.3.3\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.RSVP = global.RSVP || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction indexOf(callbacks, callback) {\n  for (var i = 0, l = callbacks.length; i < l; i++) {\n    if (callbacks[i] === callback) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction callbacksFor(object) {\n  var callbacks = object._promiseCallbacks;\n\n  if (!callbacks) {\n    callbacks = object._promiseCallbacks = {};\n  }\n\n  return callbacks;\n}\n\n/**\n  @class RSVP.EventTarget\n*/\nvar EventTarget = {\n\n  /**\n    `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\n    Example:\n     ```javascript\n    let object = {};\n     RSVP.EventTarget.mixin(object);\n     object.on('finished', function(event) {\n      // handle event\n    });\n     object.trigger('finished', { detail: value });\n    ```\n     `EventTarget.mixin` also works with prototypes:\n     ```javascript\n    let Person = function() {};\n    RSVP.EventTarget.mixin(Person.prototype);\n     let yehuda = new Person();\n    let tom = new Person();\n     yehuda.on('poke', function(event) {\n      console.log('Yehuda says OW');\n    });\n     tom.on('poke', function(event) {\n      console.log('Tom says OW');\n    });\n     yehuda.trigger('poke');\n    tom.trigger('poke');\n    ```\n     @method mixin\n    @for RSVP.EventTarget\n    @private\n    @param {Object} object object to extend with EventTarget methods\n  */\n  mixin: function mixin(object) {\n    object['on'] = this['on'];\n    object['off'] = this['off'];\n    object['trigger'] = this['trigger'];\n    object._promiseCallbacks = undefined;\n    return object;\n  },\n\n  /**\n    Registers a callback to be executed when `eventName` is triggered\n     ```javascript\n    object.on('event', function(eventInfo){\n      // handle the event\n    });\n     object.trigger('event');\n    ```\n     @method on\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to listen for\n    @param {Function} callback function to be called when the event is triggered.\n  */\n  on: function on(eventName, callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback must be a function');\n    }\n\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined;\n\n    callbacks = allCallbacks[eventName];\n\n    if (!callbacks) {\n      callbacks = allCallbacks[eventName] = [];\n    }\n\n    if (indexOf(callbacks, callback) === -1) {\n      callbacks.push(callback);\n    }\n  },\n\n  /**\n    You can use `off` to stop firing a particular callback for an event:\n     ```javascript\n    function doStuff() { // do stuff! }\n    object.on('stuff', doStuff);\n     object.trigger('stuff'); // doStuff will be called\n     // Unregister ONLY the doStuff callback\n    object.off('stuff', doStuff);\n    object.trigger('stuff'); // doStuff will NOT be called\n    ```\n     If you don't pass a `callback` argument to `off`, ALL callbacks for the\n    event will not be executed when the event fires. For example:\n     ```javascript\n    let callback1 = function(){};\n    let callback2 = function(){};\n     object.on('stuff', callback1);\n    object.on('stuff', callback2);\n     object.trigger('stuff'); // callback1 and callback2 will be executed.\n     object.off('stuff');\n    object.trigger('stuff'); // callback1 and callback2 will not be executed!\n    ```\n     @method off\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName event to stop listening to\n    @param {Function} callback optional argument. If given, only the function\n    given will be removed from the event's callback queue. If no `callback`\n    argument is given, all callbacks will be removed from the event's callback\n    queue.\n  */\n  off: function off(eventName, callback) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        index = undefined;\n\n    if (!callback) {\n      allCallbacks[eventName] = [];\n      return;\n    }\n\n    callbacks = allCallbacks[eventName];\n\n    index = indexOf(callbacks, callback);\n\n    if (index !== -1) {\n      callbacks.splice(index, 1);\n    }\n  },\n\n  /**\n    Use `trigger` to fire custom events. For example:\n     ```javascript\n    object.on('foo', function(){\n      console.log('foo event happened!');\n    });\n    object.trigger('foo');\n    // 'foo event happened!' logged to the console\n    ```\n     You can also pass a value as a second argument to `trigger` that will be\n    passed as an argument to all event listeners for the event:\n     ```javascript\n    object.on('foo', function(value){\n      console.log(value.name);\n    });\n     object.trigger('foo', { name: 'bar' });\n    // 'bar' logged to the console\n    ```\n     @method trigger\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to be triggered\n    @param {*} options optional value to be passed to any event handlers for\n    the given `eventName`\n  */\n  trigger: function trigger(eventName, options, label) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        callback = undefined;\n\n    if (callbacks = allCallbacks[eventName]) {\n      // Don't cache the callbacks.length since it may grow\n      for (var i = 0; i < callbacks.length; i++) {\n        callback = callbacks[i];\n\n        callback(options, label);\n      }\n    }\n  }\n};\n\nvar config = {\n  instrument: false\n};\n\nEventTarget['mixin'](config);\n\nfunction configure(name, value) {\n  if (name === 'onerror') {\n    // handle for legacy users that expect the actual\n    // error to be passed to their function added via\n    // `RSVP.configure('onerror', someFunctionHere);`\n    config['on']('error', value);\n    return;\n  }\n\n  if (arguments.length === 2) {\n    config[name] = value;\n  } else {\n    return config[name];\n  }\n}\n\nfunction objectOrFunction(x) {\n  return typeof x === 'function' || typeof x === 'object' && x !== null;\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nfunction isMaybeThenable(x) {\n  return typeof x === 'object' && x !== null;\n}\n\nvar _isArray = undefined;\nif (!Array.isArray) {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n} else {\n  _isArray = Array.isArray;\n}\n\nvar isArray = _isArray;\n\n// Date.now is not available in browsers < IE9\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility\nvar now = Date.now || function () {\n  return new Date().getTime();\n};\n\nfunction F() {}\n\nvar o_create = Object.create || function (o) {\n  if (arguments.length > 1) {\n    throw new Error('Second argument not supported');\n  }\n  if (typeof o !== 'object') {\n    throw new TypeError('Argument must be an object');\n  }\n  F.prototype = o;\n  return new F();\n};\n\nvar queue = [];\n\nfunction scheduleFlush() {\n  setTimeout(function () {\n    for (var i = 0; i < queue.length; i++) {\n      var entry = queue[i];\n\n      var payload = entry.payload;\n\n      payload.guid = payload.key + payload.id;\n      payload.childGuid = payload.key + payload.childId;\n      if (payload.error) {\n        payload.stack = payload.error.stack;\n      }\n\n      config['trigger'](entry.name, entry.payload);\n    }\n    queue.length = 0;\n  }, 50);\n}\nfunction instrument(eventName, promise, child) {\n  if (1 === queue.push({\n    name: eventName,\n    payload: {\n      key: promise._guidKey,\n      id: promise._id,\n      eventName: eventName,\n      detail: promise._result,\n      childId: child && child._id,\n      label: promise._label,\n      timeStamp: now(),\n      error: config[\"instrument-with-stack\"] ? new Error(promise._label) : null\n    } })) {\n    scheduleFlush();\n  }\n}\n\n/**\n  `RSVP.Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {*} object value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop, label);\n  resolve(promise, object);\n  return promise;\n}\n\nfunction withOwnPromise() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then) {\n  config.async(function (promise) {\n    var sealed = false;\n    var error = tryThen(then, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    thenable._onError = null;\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$) {\n  if (maybeThenable.constructor === promise.constructor && then$$ === then && promise.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$ === GET_THEN_ERROR) {\n      reject(promise, GET_THEN_ERROR.error);\n    } else if (then$$ === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$)) {\n      handleForeignThenable(promise, maybeThenable, then$$);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    fulfill(promise, value);\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onError) {\n    promise._onError(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length === 0) {\n    if (config.instrument) {\n      instrument('fulfilled', promise);\n    }\n  } else {\n    config.async(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n  config.async(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var subscribers = parent._subscribers;\n  var length = subscribers.length;\n\n  parent._onError = null;\n\n  subscribers[length] = child;\n  subscribers[length + FULFILLED] = onFulfillment;\n  subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    config.async(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (config.instrument) {\n    instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);\n  }\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = undefined,\n      callback = undefined,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = undefined,\n      error = undefined,\n      succeeded = undefined,\n      failed = undefined;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, withOwnPromise());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n      resolve(promise, value);\n    } else if (failed) {\n      reject(promise, error);\n    } else if (settled === FULFILLED) {\n      fulfill(promise, value);\n    } else if (settled === REJECTED) {\n      reject(promise, value);\n    }\n}\n\nfunction initializePromise(promise, resolver) {\n  var resolved = false;\n  try {\n    resolver(function (value) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      resolve(promise, value);\n    }, function (reason) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nfunction then(onFulfillment, onRejection, label) {\n  var _arguments = arguments;\n\n  var parent = this;\n  var state = parent._state;\n\n  if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {\n    config.instrument && instrument('chained', parent, parent);\n    return parent;\n  }\n\n  parent._onError = null;\n\n  var child = new parent.constructor(noop, label);\n  var result = parent._result;\n\n  config.instrument && instrument('chained', parent, child);\n\n  if (state) {\n    (function () {\n      var callback = _arguments[state - 1];\n      config.async(function () {\n        return invokeCallback(state, child, callback, result);\n      });\n    })();\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\nfunction makeSettledResult(state, position, value) {\n  if (state === FULFILLED) {\n    return {\n      state: 'fulfilled',\n      value: value\n    };\n  } else {\n    return {\n      state: 'rejected',\n      reason: value\n    };\n  }\n}\n\nfunction Enumerator(Constructor, input, abortOnReject, label) {\n  this._instanceConstructor = Constructor;\n  this.promise = new Constructor(noop, label);\n  this._abortOnReject = abortOnReject;\n\n  if (this._validateInput(input)) {\n    this._input = input;\n    this.length = input.length;\n    this._remaining = input.length;\n\n    this._init();\n\n    if (this.length === 0) {\n      fulfill(this.promise, this._result);\n    } else {\n      this.length = this.length || 0;\n      this._enumerate();\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    }\n  } else {\n    reject(this.promise, this._validationError());\n  }\n}\n\nEnumerator.prototype._validateInput = function (input) {\n  return isArray(input);\n};\n\nEnumerator.prototype._validationError = function () {\n  return new Error('Array Methods must be provided an Array');\n};\n\nEnumerator.prototype._init = function () {\n  this._result = new Array(this.length);\n};\n\nEnumerator.prototype._enumerate = function () {\n  var length = this.length;\n  var promise = this.promise;\n  var input = this._input;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    this._eachEntry(input[i], i);\n  }\n};\n\nEnumerator.prototype._settleMaybeThenable = function (entry, i) {\n  var c = this._instanceConstructor;\n  var resolve = c.resolve;\n\n  if (resolve === resolve$1) {\n    var then$$ = getThen(entry);\n\n    if (then$$ === then && entry._state !== PENDING) {\n      entry._onError = null;\n      this._settledAt(entry._state, i, entry._result);\n    } else if (typeof then$$ !== 'function') {\n      this._remaining--;\n      this._result[i] = this._makeResult(FULFILLED, i, entry);\n    } else if (c === Promise) {\n      var promise = new c(noop);\n      handleMaybeThenable(promise, entry, then$$);\n      this._willSettleAt(promise, i);\n    } else {\n      this._willSettleAt(new c(function (resolve) {\n        return resolve(entry);\n      }), i);\n    }\n  } else {\n    this._willSettleAt(resolve(entry), i);\n  }\n};\n\nEnumerator.prototype._eachEntry = function (entry, i) {\n  if (isMaybeThenable(entry)) {\n    this._settleMaybeThenable(entry, i);\n  } else {\n    this._remaining--;\n    this._result[i] = this._makeResult(FULFILLED, i, entry);\n  }\n};\n\nEnumerator.prototype._settledAt = function (state, i, value) {\n  var promise = this.promise;\n\n  if (promise._state === PENDING) {\n    this._remaining--;\n\n    if (this._abortOnReject && state === REJECTED) {\n      reject(promise, value);\n    } else {\n      this._result[i] = this._makeResult(state, i, value);\n    }\n  }\n\n  if (this._remaining === 0) {\n    fulfill(promise, this._result);\n  }\n};\n\nEnumerator.prototype._makeResult = function (state, i, value) {\n  return value;\n};\n\nEnumerator.prototype._willSettleAt = function (promise, i) {\n  var enumerator = this;\n\n  subscribe(promise, undefined, function (value) {\n    return enumerator._settledAt(FULFILLED, i, value);\n  }, function (reason) {\n    return enumerator._settledAt(REJECTED, i, reason);\n  });\n};\n\n/**\n  `RSVP.Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error(\"2\"));\n  let promise3 = RSVP.reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries, label) {\n  return new Enumerator(this, entries, true, /* abort on reject */label).promise;\n}\n\n/**\n  `RSVP.Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `RSVP.Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  RSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} entries array of promises to observe\n  @param {String} label optional string for describing the promise returned.\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  var promise = new Constructor(noop, label);\n\n  if (!isArray(entries)) {\n    reject(promise, new TypeError('You must pass an array to race.'));\n    return promise;\n  }\n\n  for (var i = 0; promise._state === PENDING && i < entries.length; i++) {\n    subscribe(Constructor.resolve(entries[i]), undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n\n  return promise;\n}\n\n/**\n  `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop, label);\n  reject(promise, reason);\n  return promise;\n}\n\nvar guidKey = 'rsvp_' + now() + '-';\nvar counter = 0;\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise’s eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class RSVP.Promise\n  @param {function} resolver\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @constructor\n*/\nfunction Promise(resolver, label) {\n  this._id = counter++;\n  this._label = label;\n  this._state = undefined;\n  this._result = undefined;\n  this._subscribers = [];\n\n  config.instrument && instrument('created', this);\n\n  if (noop !== resolver) {\n    typeof resolver !== 'function' && needsResolver();\n    this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n  }\n}\n\nPromise.cast = resolve$1; // deprecated\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = resolve$1;\nPromise.reject = reject$1;\n\nPromise.prototype = {\n  constructor: Promise,\n\n  _guidKey: guidKey,\n\n  _onError: function _onError(reason) {\n    var promise = this;\n    config.after(function () {\n      if (promise._onError) {\n        config['trigger']('error', reason, promise._label);\n      }\n    });\n  },\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we\\'re unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we\\'re unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfillment\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  then: then,\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn\\'t find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'catch': function _catch(onRejection, label) {\n    return this.then(undefined, onRejection, label);\n  },\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'finally': function _finally(callback, label) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    return promise.then(function (value) {\n      return constructor.resolve(callback()).then(function () {\n        return value;\n      });\n    }, function (reason) {\n      return constructor.resolve(callback()).then(function () {\n        throw reason;\n      });\n    }, label);\n  }\n};\n\nfunction Result() {\n  this.value = undefined;\n}\n\nvar ERROR = new Result();\nvar GET_THEN_ERROR$1 = new Result();\n\nfunction getThen$1(obj) {\n  try {\n    return obj.then;\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction tryApply(f, s, a) {\n  try {\n    f.apply(s, a);\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction makeObject(_, argumentNames) {\n  var obj = {};\n  var length = _.length;\n  var args = new Array(length);\n\n  for (var x = 0; x < length; x++) {\n    args[x] = _[x];\n  }\n\n  for (var i = 0; i < argumentNames.length; i++) {\n    var _name = argumentNames[i];\n    obj[_name] = args[i + 1];\n  }\n\n  return obj;\n}\n\nfunction arrayResult(_) {\n  var length = _.length;\n  var args = new Array(length - 1);\n\n  for (var i = 1; i < length; i++) {\n    args[i - 1] = _[i];\n  }\n\n  return args;\n}\n\nfunction wrapThenable(_then, promise) {\n  return {\n    then: function then(onFulFillment, onRejection) {\n      return _then.call(promise, onFulFillment, onRejection);\n    }\n  };\n}\n\n/**\n  `RSVP.denodeify` takes a 'node-style' function and returns a function that\n  will return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\n  browser when you'd prefer to use promises over using callbacks. For example,\n  `denodeify` transforms the following:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) return handleError(err);\n    handleData(data);\n  });\n  ```\n\n  into:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n\n  readFile('myfile.txt').then(handleData, handleError);\n  ```\n\n  If the node function has multiple success parameters, then `denodeify`\n  just returns the first one:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'));\n\n  request('http://example.com').then(function(res) {\n    // ...\n  });\n  ```\n\n  However, if you need all success parameters, setting `denodeify`'s\n  second parameter to `true` causes it to return all success parameters\n  as an array:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), true);\n\n  request('http://example.com').then(function(result) {\n    // result[0] -> res\n    // result[1] -> body\n  });\n  ```\n\n  Or if you pass it an array with names it returns the parameters as a hash:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), ['res', 'body']);\n\n  request('http://example.com').then(function(result) {\n    // result.res\n    // result.body\n  });\n  ```\n\n  Sometimes you need to retain the `this`:\n\n  ```javascript\n  let app = require('express')();\n  let render = RSVP.denodeify(app.render.bind(app));\n  ```\n\n  The denodified function inherits from the original function. It works in all\n  environments, except IE 10 and below. Consequently all properties of the original\n  function are available to you. However, any properties you change on the\n  denodeified function won't be changed on the original function. Example:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request')),\n      cookieJar = request.jar(); // <- Inheritance is used here\n\n  request('http://example.com', {jar: cookieJar}).then(function(res) {\n    // cookieJar.cookies holds now the cookies returned by example.com\n  });\n  ```\n\n  Using `denodeify` makes it easier to compose asynchronous operations instead\n  of using callbacks. For example, instead of:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) { ... } // Handle error\n    fs.writeFile('myfile2.txt', data, function(err){\n      if (err) { ... } // Handle error\n      console.log('done')\n    });\n  });\n  ```\n\n  you can chain the operations together using `then` from the returned promise:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n  let writeFile = RSVP.denodeify(fs.writeFile);\n\n  readFile('myfile.txt').then(function(data){\n    return writeFile('myfile2.txt', data);\n  }).then(function(){\n    console.log('done')\n  }).catch(function(error){\n    // Handle error\n  });\n  ```\n\n  @method denodeify\n  @static\n  @for RSVP\n  @param {Function} nodeFunc a 'node-style' function that takes a callback as\n  its last argument. The callback expects an error to be passed as its first\n  argument (if an error occurred, otherwise null), and the value from the\n  operation as its second argument ('function(err, value){ }').\n  @param {Boolean|Array} [options] An optional paramter that if set\n  to `true` causes the promise to fulfill with the callback's success arguments\n  as an array. This is useful if the node function has multiple success\n  paramters. If you set this paramter to an array with names, the promise will\n  fulfill with a hash with these names as keys and the success parameters as\n  values.\n  @return {Function} a function that wraps `nodeFunc` to return an\n  `RSVP.Promise`\n  @static\n*/\nfunction denodeify(nodeFunc, options) {\n  var fn = function fn() {\n    var self = this;\n    var l = arguments.length;\n    var args = new Array(l + 1);\n    var promiseInput = false;\n\n    for (var i = 0; i < l; ++i) {\n      var arg = arguments[i];\n\n      if (!promiseInput) {\n        // TODO: clean this up\n        promiseInput = needsPromiseInput(arg);\n        if (promiseInput === GET_THEN_ERROR$1) {\n          var p = new Promise(noop);\n          reject(p, GET_THEN_ERROR$1.value);\n          return p;\n        } else if (promiseInput && promiseInput !== true) {\n          arg = wrapThenable(promiseInput, arg);\n        }\n      }\n      args[i] = arg;\n    }\n\n    var promise = new Promise(noop);\n\n    args[l] = function (err, val) {\n      if (err) reject(promise, err);else if (options === undefined) resolve(promise, val);else if (options === true) resolve(promise, arrayResult(arguments));else if (isArray(options)) resolve(promise, makeObject(arguments, options));else resolve(promise, val);\n    };\n\n    if (promiseInput) {\n      return handlePromiseInput(promise, args, nodeFunc, self);\n    } else {\n      return handleValueInput(promise, args, nodeFunc, self);\n    }\n  };\n\n  fn.__proto__ = nodeFunc;\n\n  return fn;\n}\n\nfunction handleValueInput(promise, args, nodeFunc, self) {\n  var result = tryApply(nodeFunc, self, args);\n  if (result === ERROR) {\n    reject(promise, result.value);\n  }\n  return promise;\n}\n\nfunction handlePromiseInput(promise, args, nodeFunc, self) {\n  return Promise.all(args).then(function (args) {\n    var result = tryApply(nodeFunc, self, args);\n    if (result === ERROR) {\n      reject(promise, result.value);\n    }\n    return promise;\n  });\n}\n\nfunction needsPromiseInput(arg) {\n  if (arg && typeof arg === 'object') {\n    if (arg.constructor === Promise) {\n      return true;\n    } else {\n      return getThen$1(arg);\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.all`.\n\n  @method all\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n*/\nfunction all$1(array, label) {\n  return Promise.all(array, label);\n}\n\nfunction AllSettled(Constructor, entries, label) {\n  this._superConstructor(Constructor, entries, false, /* don't abort on reject */label);\n}\n\nAllSettled.prototype = o_create(Enumerator.prototype);\nAllSettled.prototype._superConstructor = Enumerator;\nAllSettled.prototype._makeResult = makeSettledResult;\nAllSettled.prototype._validationError = function () {\n  return new Error('allSettled must be called with an array');\n};\n\n/**\n  `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\n  a fail-fast method, it waits until all the promises have returned and\n  shows you all the results. This is useful if you want to handle multiple\n  promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled. The return promise is fulfilled with an array of the states of\n  the promises passed into the `promises` array argument.\n\n  Each state object will either indicate fulfillment or rejection, and\n  provide the corresponding value or reason. The states will take one of\n  the following formats:\n\n  ```javascript\n  { state: 'fulfilled', value: value }\n    or\n  { state: 'rejected', reason: reason }\n  ```\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.Promise.resolve(1);\n  let promise2 = RSVP.Promise.reject(new Error('2'));\n  let promise3 = RSVP.Promise.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.allSettled(promises).then(function(array){\n    // array == [\n    //   { state: 'fulfilled', value: 1 },\n    //   { state: 'rejected', reason: Error },\n    //   { state: 'rejected', reason: Error }\n    // ]\n    // Note that for the second item, reason.message will be '2', and for the\n    // third item, reason.message will be '3'.\n  }, function(error) {\n    // Not run. (This block would only be called if allSettled had failed,\n    // for instance if passed an incorrect argument type.)\n  });\n  ```\n\n  @method allSettled\n  @static\n  @for RSVP\n  @param {Array} entries\n  @param {String} label - optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with an array of the settled\n  states of the constituent promises.\n*/\nfunction allSettled(entries, label) {\n  return new AllSettled(Promise, entries, label).promise;\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.race`.\n\n  @method race\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n */\nfunction race$1(array, label) {\n  return Promise.race(array, label);\n}\n\nfunction PromiseHash(Constructor, object, label) {\n  this._superConstructor(Constructor, object, true, label);\n}\n\nPromiseHash.prototype = o_create(Enumerator.prototype);\nPromiseHash.prototype._superConstructor = Enumerator;\nPromiseHash.prototype._init = function () {\n  this._result = {};\n};\n\nPromiseHash.prototype._validateInput = function (input) {\n  return input && typeof input === 'object';\n};\n\nPromiseHash.prototype._validationError = function () {\n  return new Error('Promise.hash must be called with an object');\n};\n\nPromiseHash.prototype._enumerate = function () {\n  var enumerator = this;\n  var promise = enumerator.promise;\n  var input = enumerator._input;\n  var results = [];\n\n  for (var key in input) {\n    if (promise._state === PENDING && Object.prototype.hasOwnProperty.call(input, key)) {\n      results.push({\n        position: key,\n        entry: input[key]\n      });\n    }\n  }\n\n  var length = results.length;\n  enumerator._remaining = length;\n  var result = undefined;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    result = results[i];\n    enumerator._eachEntry(result.entry, result.position);\n  }\n};\n\n/**\n  `RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\n  for its `promises` argument.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  fulfilled, or rejected if any of them become rejected. The returned promise\n  is fulfilled with a hash that has the same key names as the `promises` object\n  argument. If any of the values in the object are not promises, they will\n  simply be copied over to the fulfilled object.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    yourPromise: RSVP.resolve(2),\n    theirPromise: RSVP.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: 1,\n    //   yourPromise: 2,\n    //   theirPromise: 3,\n    //   notAPromise: 4\n    // }\n  });\n  ````\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the first promise\n  that is rejected will be given as the reason to the rejection handler.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    rejectedPromise: RSVP.reject(new Error('rejectedPromise')),\n    anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === 'rejectedPromise'\n  });\n  ```\n\n  An important note: `RSVP.hash` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hash` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hash(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: 'Example'\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hash\n  @static\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all properties of `promises`\n  have been fulfilled, or rejected if any of them become rejected.\n*/\nfunction hash(object, label) {\n  return new PromiseHash(Promise, object, label).promise;\n}\n\nfunction HashSettled(Constructor, object, label) {\n  this._superConstructor(Constructor, object, false, label);\n}\n\nHashSettled.prototype = o_create(PromiseHash.prototype);\nHashSettled.prototype._superConstructor = Enumerator;\nHashSettled.prototype._makeResult = makeSettledResult;\n\nHashSettled.prototype._validationError = function () {\n  return new Error('hashSettled must be called with an object');\n};\n\n/**\n  `RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\n  instead of an array for its `promises` argument.\n\n  Unlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\n  but like `RSVP.allSettled`, `hashSettled` waits until all the\n  constituent promises have returned and then shows you all the results\n  with their states and values/reasons. This is useful if you want to\n  handle multiple promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled, or rejected if the passed parameters are invalid.\n\n  The returned promise is fulfilled with a hash that has the same key names as\n  the `promises` object argument. If any of the values in the object are not\n  promises, they will be copied over to the fulfilled object and marked with state\n  'fulfilled'.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    yourPromise: RSVP.Promise.resolve(2),\n    theirPromise: RSVP.Promise.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: { state: 'fulfilled', value: 1 },\n    //   yourPromise: { state: 'fulfilled', value: 2 },\n    //   theirPromise: { state: 'fulfilled', value: 3 },\n    //   notAPromise: { state: 'fulfilled', value: 4 }\n    // }\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the state will\n  be set to 'rejected' and the reason for rejection provided.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    rejectedPromise: RSVP.Promise.reject(new Error('rejection')),\n    anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise:              { state: 'fulfilled', value: 1 },\n    //   rejectedPromise:        { state: 'rejected', reason: Error },\n    //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n    // }\n    // Note that for rejectedPromise, reason.message == 'rejection',\n    // and for anotherRejectedPromise, reason.message == 'more rejection'.\n  });\n  ```\n\n  An important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.Promise.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.Promise.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hashSettled(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: { state: 'fulfilled', value: 'Example' }\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hashSettled\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when when all properties of `promises`\n  have been settled.\n  @static\n*/\nfunction hashSettled(object, label) {\n  return new HashSettled(Promise, object, label).promise;\n}\n\nfunction rethrow(reason) {\n  setTimeout(function () {\n    throw reason;\n  });\n  throw reason;\n}\n\n/**\n  `RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n  `RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\n  interface. New code should use the `RSVP.Promise` constructor instead.\n\n  The object returned from `RSVP.defer` is a plain object with three properties:\n\n  * promise - an `RSVP.Promise`.\n  * reject - a function that causes the `promise` property on this object to\n    become rejected\n  * resolve - a function that causes the `promise` property on this object to\n    become fulfilled.\n\n  Example:\n\n   ```javascript\n   let deferred = RSVP.defer();\n\n   deferred.resolve(\"Success!\");\n\n   deferred.promise.then(function(value){\n     // value here is \"Success!\"\n   });\n   ```\n\n  @method defer\n  @static\n  @for RSVP\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Object}\n */\nfunction defer(label) {\n  var deferred = { resolve: undefined, reject: undefined };\n\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  }, label);\n\n  return deferred;\n}\n\n/**\n `RSVP.map` is similar to JavaScript's native `map` method, except that it\n  waits for all promises to become fulfilled before running the `mapFn` on\n  each item in given to `promises`. `RSVP.map` returns a promise that will\n  become fulfilled with the result of running `mapFn` on the values the promises\n  become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(result){\n    // result is [ 2, 3, 4 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.map` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\n  say you want to get all comments from a set of blog posts, but you need\n  the blog posts first because they contain a url to those comments.\n\n  ```javscript\n\n  let mapFn = function(blogPost){\n    // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n    // with some comments data\n    return getComments(blogPost.comments_url);\n  };\n\n  // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n  // with some blog post data\n  RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n    // comments is the result of asking the server for the comments\n    // of all blog posts returned from getBlogPosts()\n  });\n  ```\n\n  @method map\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} mapFn function to be called on each fulfilled promise.\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with the result of calling\n  `mapFn` on each fulfilled promise or value when they become fulfilled.\n   The promise will be rejected if any of the given `promises` become rejected.\n  @static\n*/\nfunction map(promises, mapFn, label) {\n  return Promise.all(promises, label).then(function (values) {\n    if (!isFunction(mapFn)) {\n      throw new TypeError(\"You must pass a function as map's second argument.\");\n    }\n\n    var length = values.length;\n    var results = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      results[i] = mapFn(values[i]);\n    }\n\n    return Promise.all(results, label);\n  });\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.resolve`.\n\n  @method resolve\n  @static\n  @for RSVP\n  @param {*} value value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$2(value, label) {\n  return Promise.resolve(value, label);\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.reject`.\n\n  @method reject\n  @static\n  @for RSVP\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$2(reason, label) {\n  return Promise.reject(reason, label);\n}\n\n/**\n `RSVP.filter` is similar to JavaScript's native `filter` method, except that it\n  waits for all promises to become fulfilled before running the `filterFn` on\n  each item in given to `promises`. `RSVP.filter` returns a promise that will\n  become fulfilled with the result of running `filterFn` on the values the\n  promises become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n\n  let promises = [promise1, promise2, promise3];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(result){\n    // result is [ 2, 3 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.filter` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.filter` will also wait for any promises returned from `filterFn`.\n  For instance, you may want to fetch a list of users then return a subset\n  of those users based on some asynchronous operation:\n\n  ```javascript\n\n  let alice = { name: 'alice' };\n  let bob   = { name: 'bob' };\n  let users = [ alice, bob ];\n\n  let promises = users.map(function(user){\n    return RSVP.resolve(user);\n  });\n\n  let filterFn = function(user){\n    // Here, Alice has permissions to create a blog post, but Bob does not.\n    return getPrivilegesForUser(user).then(function(privs){\n      return privs.can_create_blog_post === true;\n    });\n  };\n  RSVP.filter(promises, filterFn).then(function(users){\n    // true, because the server told us only Alice can create a blog post.\n    users.length === 1;\n    // false, because Alice is the only user present in `users`\n    users[0] === bob;\n  });\n  ```\n\n  @method filter\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} filterFn - function to be called on each resolved value to\n  filter the final results.\n  @param {String} label optional string describing the promise. Useful for\n  tooling.\n  @return {Promise}\n*/\n\nfunction resolveAll(promises, label) {\n  return Promise.all(promises, label);\n}\n\nfunction resolveSingle(promise, label) {\n  return Promise.resolve(promise, label).then(function (promises) {\n    return resolveAll(promises, label);\n  });\n}\nfunction filter(promises, filterFn, label) {\n  var promise = isArray(promises) ? resolveAll(promises, label) : resolveSingle(promises, label);\n  return promise.then(function (values) {\n    if (!isFunction(filterFn)) {\n      throw new TypeError(\"You must pass a function as filter's second argument.\");\n    }\n\n    var length = values.length;\n    var filtered = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      filtered[i] = filterFn(values[i]);\n    }\n\n    return resolveAll(filtered, label).then(function (filtered) {\n      var results = new Array(length);\n      var newLength = 0;\n\n      for (var i = 0; i < length; i++) {\n        if (filtered[i]) {\n          results[newLength] = values[i];\n          newLength++;\n        }\n      }\n\n      results.length = newLength;\n\n      return results;\n    });\n  });\n}\n\nvar len = 0;\nvar vertxNext = undefined;\nfunction asap(callback, arg) {\n  queue$1[len] = callback;\n  queue$1[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 1, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    scheduleFlush$1();\n  }\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  var nextTick = process.nextTick;\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // setImmediate should be used instead instead\n  var version = process.versions.node.match(/^(?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)$/);\n  if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {\n    nextTick = setImmediate;\n  }\n  return function () {\n    return nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    return node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  return function () {\n    return setTimeout(flush, 1);\n  };\n}\n\nvar queue$1 = new Array(1000);\n\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue$1[i];\n    var arg = queue$1[i + 1];\n\n    callback(arg);\n\n    queue$1[i] = undefined;\n    queue$1[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertex() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush$1 = undefined;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush$1 = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush$1 = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush$1 = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush$1 = attemptVertex();\n} else {\n  scheduleFlush$1 = useSetTimeout();\n}\n\nvar platform = undefined;\n\n/* global self */\nif (typeof self === 'object') {\n  platform = self;\n\n  /* global global */\n} else if (typeof global === 'object') {\n    platform = global;\n  } else {\n    throw new Error('no global: `self` or `global` found');\n  }\n\nvar _async$filter;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// defaults\n\n// the default export here is for backwards compat:\n//   https://github.com/tildeio/rsvp.js/issues/434\nconfig.async = asap;\nconfig.after = function (cb) {\n  return setTimeout(cb, 0);\n};\nvar cast = resolve$2;\n\nvar async = function async(callback, arg) {\n  return config.async(callback, arg);\n};\n\nfunction on() {\n  config['on'].apply(config, arguments);\n}\n\nfunction off() {\n  config['off'].apply(config, arguments);\n}\n\n// Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`\nif (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {\n  var callbacks = window['__PROMISE_INSTRUMENTATION__'];\n  configure('instrument', true);\n  for (var eventName in callbacks) {\n    if (callbacks.hasOwnProperty(eventName)) {\n      on(eventName, callbacks[eventName]);\n    }\n  }\n}var rsvp = (_async$filter = {\n  cast: cast,\n  Promise: Promise,\n  EventTarget: EventTarget,\n  all: all$1,\n  allSettled: allSettled,\n  race: race$1,\n  hash: hash,\n  hashSettled: hashSettled,\n  rethrow: rethrow,\n  defer: defer,\n  denodeify: denodeify,\n  configure: configure,\n  on: on,\n  off: off,\n  resolve: resolve$2,\n  reject: reject$2,\n  map: map\n}, _defineProperty(_async$filter, 'async', async), _defineProperty(_async$filter, 'filter', // babel seems to error if async isn't a computed prop here...\nfilter), _async$filter);\n\nexports['default'] = rsvp;\nexports.cast = cast;\nexports.Promise = Promise;\nexports.EventTarget = EventTarget;\nexports.all = all$1;\nexports.allSettled = allSettled;\nexports.race = race$1;\nexports.hash = hash;\nexports.hashSettled = hashSettled;\nexports.rethrow = rethrow;\nexports.defer = defer;\nexports.denodeify = denodeify;\nexports.configure = configure;\nexports.on = on;\nexports.off = off;\nexports.resolve = resolve$2;\nexports.reject = reject$2;\nexports.map = map;\nexports.async = async;\nexports.filter = filter;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":39}]},{},[5])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}