{"version":3,"sources":["quantify.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_$","$","extend","_this","this","units","prefixed","addUnit","Unit","type","TYPE","symbol","SYMBOL","addPrefixed","name","push","getUnit","getDerivedQuantities","quantities","quantityName","unit","Object","keys","BASE","types","UNITLESS","getUnits","q","quantity","getStandardUnit","STANDARD","isPrefixed","indexOf","2","3","setupMain","./setup_main","4","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","value","err","Array","isArray","TypeError","Server","app","PER_PAGE","scrollHandler","$input","config","handlers","edit","removeClass","mathField","MQ","MathField","$equal","click","unitless","evalLaTeX","latex","combinations","search","remove","window","off","$lastContainer","last","scrollBottom","scrollTop","height","offset","top","outerHeight","combination","shift","renderCombination","each","addClass","prop","scroll","animate","console","error","keyup","event","keyCode","$templateUnitWrapper","$unitWrapper","clone","find","text","$li","NAME","append","insertBefore","$unitContainer","change","toggleClass","factor","powers","derivedQuantities","baseQuantities","Math","pow","QUANTITY","getLaTeX","$templateResultContainer","$resultContainer","$answer","staticMath","StaticMath","$templateSelectorWrapper","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","_step$value","$selectorWrapper","$selected","$ul","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","power","_unit","return","_iterator","mulSymbols","divSymbols","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","abs","toExponential","toPrecision","join","../../app","../../server","5","RSVP","DOM","App","on","reason","assert","register","main","./app","./app/constructor","./dom","./server","./unit","rsvp","6","replace","replaced","infiniteReplace","match","JSON","stringify","isNaN","toLowerCase","Number","content","unitless1","unitless2","powerUnitlesses","parse","sign","multiplyDivideUnitlesses","plusUnitlesses","substring","split","str","src","dst","../app/index","7","mulPairs","divPairs","muls","divs","queue","forEach","mulPair","cls","inverse","divPair","MULS","mul","DIVS","div","8","common","9","refinedTypes","10","unitSymbol","11","getMulsAndDivs","identifyUnit","getUnitless","getSIPrefixes","./eval_latex","./get_muls_and_divs","./get_si_prefixes","./get_unitless","./identify_unit","./search","12","_classCallCheck","instance","Constructor","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","Combination","lastQuantity","countCalculation","arguments","calculateCount","count","_type","new_","_type2","MAX_COMBINATION","countDerivedUnits","start","create","plain","cs","c","../app","13","BaseUnit","parentSymbol","ParentUnit","registerCommonSIPrefixes","registerSIPrefixes","registerUncommonSIPrefixes","prefixes","../server","14","DerivedUnit","arg1","arg2","_Server$getMulsAndDiv","concat","log","15","./base_unit","./derived_unit","./register","16","PI","../base_unit","17","../derived_unit","18","19","20","21","22","23","24","25","26","mass","time","angle","current","temp","matter","intensity","fileSize","energy","pressure","force","hertz","watt","coulomb","volt","farad","ohm","siemens","weber","tesla","henry","lux","volume","area","./angle","./area","./coulomb","./current","./energy","./farad","./file_size","./force","./henry","./hertz","./intensity","./length","./lux","./mass","./matter","./ohm","./pressure","./siemens","./temp","./tesla","./time","./volt","./volume","./watt","./weber","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queueIndex","drainQueue","timeout","len","run","Item","array","noop","process","nextTick","args","apply","title","browser","env","argv","version","versions","addListener","once","removeListener","removeAllListeners","emit","binding","cwd","chdir","dir","umask","43","global","factory","define","amd","callbacks","callback","callbacksFor","object","_promiseCallbacks","configure","objectOrFunction","x","isFunction","isMaybeThenable","F","scheduleFlush","entry","payload","guid","id","childGuid","childId","stack","instrument","eventName","promise","child","_guidKey","_id","detail","_result","label","_label","timeStamp","now","resolve$1","constructor","resolve","withOwnPromise","getThen","then","GET_THEN_ERROR","tryThen","fulfillmentHandler","rejectionHandler","handleForeignThenable","thenable","async","sealed","fulfill","reject","handleOwnThenable","_state","FULFILLED","REJECTED","_onError","subscribe","handleMaybeThenable","maybeThenable","then$$","publishRejection","publish","PENDING","_subscribers","parent","onFulfillment","onRejection","subscribers","settled","invokeCallback","ErrorObject","tryCatch","TRY_CATCH_ERROR","hasCallback","succeeded","failed","initializePromise","resolver","resolved","_arguments","state","result","makeSettledResult","position","Enumerator","input","abortOnReject","_instanceConstructor","_abortOnReject","_validateInput","_input","_remaining","_init","_enumerate","_validationError","all","entries","race","reject$1","needsResolver","needsNew","Promise","counter","Result","getThen$1","obj","ERROR","tryApply","makeObject","_","argumentNames","_name","arrayResult","wrapThenable","_then","onFulFillment","denodeify","nodeFunc","options","fn","self","promiseInput","arg","needsPromiseInput","GET_THEN_ERROR$1","p","val","handlePromiseInput","handleValueInput","__proto__","all$1","AllSettled","_superConstructor","allSettled","race$1","PromiseHash","hash","HashSettled","hashSettled","rethrow","defer","deferred","map","promises","mapFn","values","results","resolve$2","reject$2","resolveAll","resolveSingle","filter","filterFn","filtered","newLength","asap","queue$1","scheduleFlush$1","useNextTick","node","setImmediate","flush","useVertxTimer","vertxNext","useSetTimeout","useMutationObserver","iterations","observer","BrowserMutationObserver","document","createTextNode","observe","characterData","data","useMessageChannel","channel","MessageChannel","port1","onmessage","port2","postMessage","attemptVertex","vertx","runOnLoop","runOnContext","_defineProperty","EventTarget","mixin","allCallbacks","index","splice","trigger","_isArray","toString","Date","getTime","o_create","_eachEntry","_settleMaybeThenable","_settledAt","_makeResult","_willSettleAt","enumerator","guidKey","cast","after","catch","finally","hasOwnProperty","browserWindow","browserGlobal","MutationObserver","WebKitMutationObserver","isNode","isWorker","Uint8ClampedArray","importScripts","platform","_async$filter","cb","_process"],"mappings":"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","file":"quantify.js","sourcesContent":["/**\n * Quantify - Unit Simplifier\n * @version v0.0.1\n * @author Jason Park and Rounak Bastola\n * @link https://github.com/parkjs814/Quantify\n * @license MIT\n */\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nvar _$ = $,\n    extend = _$.extend;\n\n\nmodule.exports = function () {\n  var _this = this;\n\n  this.units = {};\n  this.prefixed = [];\n\n  this.addUnit = function (Unit) {\n    var type = Unit.TYPE;\n    var symbol = Unit.SYMBOL;\n    if (!(type in _this.units)) {\n      _this.units[type] = {};\n    }\n    _this.units[type][symbol] = Unit;\n  };\n\n  this.addPrefixed = function (name) {\n    _this.prefixed.push(name);\n  };\n\n  this.getUnit = function (type, symbol) {\n    return _this.units[type][symbol];\n  };\n\n  this.getDerivedQuantities = function () {\n    var quantities = {};\n    for (var quantityName in _this.units) {\n      var units = _this.units[quantityName];\n      var unit = units[Object.keys(units)[0]];\n      if (unit.BASE) continue;\n      quantities[quantityName] = {\n        name: quantityName,\n        types: unit.UNITLESS.types\n      };\n    }\n    return quantities;\n  };\n\n  this.getUnits = function (q) {\n    if (q == true) return _this.units;\n    if (q) return _this.units[q];\n    var units = {};\n    for (var quantity in _this.units) {\n      extend(true, units, _this.units[quantity]);\n    }\n    return units;\n  };\n\n  this.getStandardUnit = function (quantity) {\n    var units = _this.units[quantity];\n    for (var symbol in units) {\n      var unit = units[symbol];\n      if (unit.STANDARD) {\n        return unit;\n      }\n    }\n    return units[Object.keys(units)[0]];\n  };\n\n  this.isPrefixed = function (name) {\n    return ~_this.prefixed.indexOf(name);\n  };\n};\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {};\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nvar setupMain = require('./setup_main');\n\nmodule.exports = {\n  setupMain: setupMain\n};\n\n},{\"./setup_main\":4}],4:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar Server = require('../../server');\nvar app = require('../../app');\n\nvar PER_PAGE = 10;\nvar scrollHandler = null;\n\nmodule.exports = function () {\n  var $input = $('#input');\n  var config = {\n    handlers: {\n      edit: function edit() {\n        $input.removeClass('active error');\n      }\n    }\n  };\n  var mathField = MQ.MathField($input[0], config);\n  var $equal = $('#equal');\n  $equal.click(function () {\n    try {\n      (function () {\n        var unitless = Server.evalLaTeX(mathField.latex());\n        var combinations = Server.search(unitless);\n        $('.result-container:not(.template)').remove();\n\n        if (scrollHandler) $(window).off('scroll', scrollHandler);\n        scrollHandler = function scrollHandler() {\n          var $lastContainer = $('.container:not(.template)').last();\n          var scrollBottom = $(window).scrollTop() + $(window).height();\n          if ($lastContainer.offset().top + $lastContainer.outerHeight() < scrollBottom) {\n            var i = 0;\n            while (combinations.length) {\n              var combination = combinations.shift();\n              renderCombination(unitless, combination);\n              if (i++ >= PER_PAGE) break;\n            }\n          }\n          $('.result-container:not(.appear):not(.template)').each(function () {\n            if ($(this).offset().top < scrollBottom) {\n              $(this).addClass('appear');\n            }\n          });\n        };\n        $('.unit-container #expander').prop('checked', false);\n        scrollHandler();\n        $(window).scroll(scrollHandler);\n\n        $('html, body').animate({\n          scrollTop: $('.search-container').offset().top\n        }, 300);\n        $input.addClass('active');\n      })();\n    } catch (err) {\n      console.error(err);\n      $input.addClass('error');\n    }\n  });\n  $input.keyup(function (event) {\n    if (event.keyCode == 13) {\n      $equal.click();\n    }\n  });\n\n  var $templateUnitWrapper = $('.unit-wrapper.template');\n  var units = app.getUnits(true);\n  for (var quantity in units) {\n    var $unitWrapper = $templateUnitWrapper.clone();\n    $unitWrapper.removeClass('template');\n    $unitWrapper.find('.quantity').text(quantity);\n    for (var symbol in units[quantity]) {\n      var unit = units[quantity][symbol];\n      var $li = $('<li>' + symbol + ' (' + unit.NAME + ')</li>');\n      if (app.isPrefixed(unit.NAME)) $li.addClass('prefixed');\n      $unitWrapper.find('ul').append($li);\n    }\n    $unitWrapper.insertBefore($templateUnitWrapper);\n  }\n  var $unitContainer = $('.unit-container');\n  $('#show-all').change(function () {\n    $unitContainer.toggleClass('show-prefixed');\n  });\n};\n\nvar renderCombination = function renderCombination(unitless, combination) {\n  var factor = 1;\n  var powers = [];\n\n  var _arr = [combination.derivedQuantities, combination.baseQuantities];\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var quantities = _arr[_i];\n    for (var quantity in quantities) {\n      var unit = app.getStandardUnit(quantity);\n      factor *= Math.pow(unit.QUANTITY, quantities[quantity]);\n      powers.push([unit, quantities[quantity]]);\n    }\n  }\n\n  var latex = getLaTeX(unitless, factor, powers);\n\n  var $templateResultContainer = $('.result-container.template');\n  var $resultContainer = $templateResultContainer.clone();\n  var $answer = $resultContainer.find('.answer');\n  $resultContainer.removeClass('template');\n  $answer.text(latex);\n  var staticMath = MQ.StaticMath($answer[0]);\n  $resultContainer.insertBefore($templateResultContainer);\n  var $templateSelectorWrapper = $resultContainer.find('.selector-wrapper.template');\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var _step$value = _slicedToArray(_step.value, 1),\n          unit = _step$value[0];\n\n      var quantity = unit.TYPE;\n      var $selectorWrapper = $templateSelectorWrapper.clone();\n      $selectorWrapper.removeClass('template');\n      $selectorWrapper.find('.quantity').text(quantity);\n      var $selected = $selectorWrapper.find('.selected');\n      $selected.text(unit.SYMBOL);\n      var $ul = $selectorWrapper.find('ul');\n      var units = app.getUnits(quantity);\n      for (var symbol in units) {\n        var $li = $('<li>' + symbol + '</li>');\n        $li.click(function () {\n          var symbol = $(this).text();\n          $selected.text(symbol);\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = powers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var power = _step2.value;\n\n              var _unit = units[symbol];\n              if (power[0].TYPE == quantity) {\n                factor /= Math.pow(power[0].QUANTITY, power[1]);\n                power[0] = _unit;\n                factor *= Math.pow(power[0].QUANTITY, power[1]);\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          var latex = getLaTeX(unitless, factor, powers);\n          staticMath.latex(latex);\n        });\n        $ul.append($li);\n      }\n      $selectorWrapper.insertBefore($templateSelectorWrapper);\n    };\n\n    for (var _iterator = powers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      _loop();\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n};\n\nvar getLaTeX = function getLaTeX(unitless, factor, powers) {\n  var mulSymbols = [],\n      divSymbols = [];\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = powers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var power = _step3.value;\n\n      if (power[1] > 0) {\n        if (power[1] > 1) {\n          mulSymbols.push(power[0].SYMBOL + '^' + power[1]);\n        } else {\n          mulSymbols.push(power[0].SYMBOL);\n        }\n      } else {\n        if (power[1] < -1) {\n          divSymbols.push(power[0].SYMBOL + '^' + -power[1]);\n        } else {\n          divSymbols.push(power[0].SYMBOL);\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  var value = unitless.quantity / factor;\n  if (Math.abs(value) > 1e5 || Math.abs(value) < 1e-5) {\n    value = value.toExponential(5);\n  } else {\n    value = value.toPrecision(6);\n  }\n  var latex = value + '\\\\ ' + mulSymbols.join('\\\\cdot ');\n  if (divSymbols.length) {\n    if (divSymbols.length > 1) {\n      latex += ' / (' + divSymbols.join('\\\\cdot ') + ')';\n    } else {\n      latex += ' / ' + divSymbols[0];\n    }\n  }\n  return latex;\n};\n\n},{\"../../app\":2,\"../../server\":11}],5:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar DOM = require('./dom');\nvar Server = require('./server');\nvar app = require('./app');\nvar App = require('./app/constructor');\nvar Unit = require('./unit');\nvar _$ = $,\n    extend = _$.extend;\n\n// set global promise error handler\n\nRSVP.on('error', function (reason) {\n  console.assert(false, reason);\n});\n\nextend(true, app, new App());\n\nUnit.register();\n\nextend(true, window, {\n  main: DOM.setupMain\n});\n\n},{\"./app\":2,\"./app/constructor\":1,\"./dom\":3,\"./server\":11,\"./unit\":15,\"rsvp\":43}],6:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app/index');\n\nmodule.exports = function (latex) {\n  var units = app.getUnits();\n  latex = latex.replace(/\\\\ /g, '');\n  latex = latex.replace(/\\\\left\\(/g, '(');\n  latex = latex.replace(/\\\\right\\)/g, ')');\n  var replaced = null;\n  while (replaced != latex) {\n    latex = replaced || latex;\n    replaced = latex;\n    replaced = infiniteReplace(replaced, /\\^{([^{}]+)}/g, '^($1)');\n    replaced = infiniteReplace(replaced, /\\\\frac{([^{}]+)}{([^{}]+)}/g, '($1)/($2)');\n  }\n  latex = latex.replace(/\\\\cdot/g, '*');\n  latex = latex.replace(/(\\\\| )/g, '');\n  latex = latex.replace(/(-|(?!a-zA-ZΩ°µ)((?:[a-zA-Z]|Ω|°|µ)+)(?!a-zA-ZΩ°µ)|([0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?))/g, function (match, value) {\n    if (value == '-') {\n      return '+$$' + JSON.stringify({ types: {}, quantity: -1 }) + '$$*';\n    } else if (isNaN(value)) {\n      if (value.toLowerCase() == 'e') return value;\n      return '$$' + JSON.stringify(units[value].UNITLESS) + '$$';\n    } else {\n      return '$$' + JSON.stringify({ types: {}, quantity: Number(value) }) + '$$';\n    }\n  });\n  latex = infiniteReplace(latex, /(?:\\(|^)([^()]+)(?:\\)|$)/g, function (match, content) {\n    content = infiniteReplace(content, /\\$\\$([^($$)]+)\\$\\$\\^\\$\\$([^($$)]+)\\$\\$/g, function (match, unitless1, unitless2) {\n      return powerUnitlesses(JSON.parse(unitless1), JSON.parse(unitless2));\n    });\n\n    content = infiniteReplace(content, /\\$\\$([^($$)]+)\\$\\$(\\*|\\/|)\\$\\$([^($$)]+)\\$\\$/, function (match, unitless1, sign, unitless2) {\n      return multiplyDivideUnitlesses(JSON.parse(unitless1), sign, JSON.parse(unitless2));\n    });\n\n    content = infiniteReplace(content, /\\+?\\$\\$([^($$)]+)\\$\\$\\+\\$\\$([^($$)]+)\\$\\$/g, function (match, unitless1, unitless2) {\n      return plusUnitlesses(JSON.parse(unitless1), JSON.parse(unitless2));\n    });\n\n    if (content[0] == '+') content = content.substring(1);\n    return content;\n  });\n\n  return JSON.parse(latex.split('$$')[1]);\n};\n\nvar powerUnitlesses = function powerUnitlesses(unitless1, unitless2) {\n  if (Object.keys(unitless2.types).length) return null;\n  var power = unitless2.quantity;\n  unitless1.quantity = Math.pow(unitless1.quantity, power);\n  for (var type in unitless1.types) {\n    unitless1.types[type] *= power;\n    if (unitless1.types[type] == 0) {\n      delete unitless1.types[type];\n    }\n  }\n  return '$$' + JSON.stringify(unitless1) + '$$';\n};\n\nvar multiplyDivideUnitlesses = function multiplyDivideUnitlesses(unitless1, sign, unitless2) {\n  if (sign == '/') {\n    unitless1.quantity /= unitless2.quantity;\n  } else {\n    unitless1.quantity *= unitless2.quantity;\n  }\n  for (var type in unitless2.types) {\n    if (!(type in unitless1.types)) {\n      unitless1.types[type] = (sign == '/' ? -1 : 1) * unitless2.types[type];\n    } else {\n      unitless1.types[type] += (sign == '/' ? -1 : 1) * unitless2.types[type];\n    }\n    if (unitless1.types[type] == 0) {\n      delete unitless1.types[type];\n    }\n  }\n  return '$$' + JSON.stringify(unitless1) + '$$';\n};\n\nvar plusUnitlesses = function plusUnitlesses(unitless1, unitless2) {\n  if (Object.keys(unitless1.types).length != Object.keys(unitless2.types).length) return null;\n  for (var type in unitless2.types) {\n    if (unitless2.types[type] != unitless1.types[type]) return null;\n  }\n  unitless1.quantity += unitless2.quantity;\n  return '+$$' + JSON.stringify(unitless1) + '$$';\n};\n\nvar infiniteReplace = function infiniteReplace(str, src, dst) {\n  var replaced = null;\n  while (replaced != str) {\n    str = replaced || str;\n    replaced = str.replace(src, dst);\n  }\n  return str;\n};\n\n},{\"../app/index\":2}],7:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app/index');\n\nmodule.exports = function (mulPairs, divPairs) {\n  var muls = [];\n  var divs = [];\n\n  var queue = [];\n  mulPairs.forEach(function (mulPair) {\n    var type = mulPair[0];\n    var symbol = mulPair[1];\n    queue.push({\n      cls: app.getUnit(type, symbol),\n      inverse: false\n    });\n  });\n  divPairs.forEach(function (divPair) {\n    var type = divPair[0];\n    var symbol = divPair[1];\n    queue.push({\n      cls: app.getUnit(type, symbol),\n      inverse: true\n    });\n  });\n\n  var _loop = function _loop() {\n    var e = queue.shift();\n    if (e.cls.BASE) {\n      (e.inverse ? divs : muls).push(e.cls);\n    } else {\n      e.cls.MULS.forEach(function (mul) {\n        queue.push({\n          cls: mul,\n          inverse: e.inverse\n        });\n      });\n      e.cls.DIVS.forEach(function (div) {\n        queue.push({\n          cls: div,\n          inverse: !e.inverse\n        });\n      });\n    }\n  };\n\n  while (queue.length > 0) {\n    _loop();\n  }\n\n  return { muls: muls, divs: divs };\n};\n\n},{\"../app/index\":2}],8:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (common) {\n  return common ? [[1e3, 'k', 'kilo'], [1e-2, 'c', 'centi'], [1e-3, 'm', 'milli'], [1e-6, 'µ', 'micro'], [1e-9, 'n', 'nano']] : [[1e24, 'Y', 'yotta'], [1e21, 'Z', 'zetta'], [1e18, 'E', 'exa'], [1e15, 'P', 'peta'], [1e12, 'T', 'tera'], [1e9, 'G', 'giga'], [1e6, 'M', 'mega'], [1e2, 'h', 'hecto'], [1e1, 'da', 'deka'], [1e-1, 'd', 'deci'], [1e-12, 'p', 'pico'], [1e-15, 'f', 'femto'], [1e-18, 'a', 'atto'], [1e-21, 'z', 'zepto'], [1e-24, 'y', 'yocto']];\n};\n\n},{}],9:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (muls, divs) {\n  var quantity = 1;\n  var types = {};\n  muls.forEach(function (mul) {\n    quantity *= mul.QUANTITY;\n    if (mul.TYPE in types) {\n      types[mul.TYPE]++;\n    } else {\n      types[mul.TYPE] = 1;\n    }\n  });\n  divs.forEach(function (div) {\n    quantity /= div.QUANTITY;\n    if (div.TYPE in types) {\n      types[div.TYPE]--;\n    } else {\n      types[div.TYPE] = -1;\n    }\n  });\n  var refinedTypes = {};\n  for (var type in types) {\n    var n = types[type];\n    if (n != 0) refinedTypes[type] = n;\n  }\n\n  return { types: types, quantity: quantity };\n};\n\n},{}],10:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app/index');\n\nmodule.exports = function (symbol) {\n  var units = app.getUnits();\n  for (var unitSymbol in units) {\n    var unit = units[unitSymbol];\n    if (unit.SYMBOL == symbol) return unit;\n  }\n};\n\n},{\"../app/index\":2}],11:[function(require,module,exports){\n'use strict';\n\nvar getMulsAndDivs = require('./get_muls_and_divs');\nvar identifyUnit = require('./identify_unit');\nvar getUnitless = require('./get_unitless');\nvar evalLaTeX = require('./eval_latex');\nvar search = require('./search');\nvar getSIPrefixes = require('./get_si_prefixes');\n\nmodule.exports = {\n  getMulsAndDivs: getMulsAndDivs,\n  identifyUnit: identifyUnit,\n  getUnitless: getUnitless,\n  evalLaTeX: evalLaTeX,\n  search: search,\n  getSIPrefixes: getSIPrefixes\n};\n\n},{\"./eval_latex\":6,\"./get_muls_and_divs\":7,\"./get_si_prefixes\":8,\"./get_unitless\":9,\"./identify_unit\":10,\"./search\":12}],12:[function(require,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar app = require('../app');\n\nvar _$ = $,\n    extend = _$.extend;\n\nvar Combination = function () {\n  function Combination(derivedQuantities, baseQuantities, lastQuantity) {\n    var countCalculation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    _classCallCheck(this, Combination);\n\n    this.derivedQuantities = derivedQuantities;\n    this.baseQuantities = baseQuantities;\n    this.lastQuantity = lastQuantity;\n    if (countCalculation) this.calculateCount();\n  }\n\n  _createClass(Combination, [{\n    key: 'calculateCount',\n    value: function calculateCount() {\n      var count = 0;\n      for (var type in this.derivedQuantities) {\n        count += Math.abs(this.derivedQuantities[type]);\n      }\n      for (var _type in this.baseQuantities) {\n        count += Math.abs(this.baseQuantities[_type]);\n      }\n      this.count = count;\n    }\n  }, {\n    key: 'countDerivedUnits',\n    value: function countDerivedUnits() {\n      var count = 0;\n      for (var type in this.derivedQuantities) {\n        count += Math.abs(this.derivedQuantities[type]);\n      }\n      return count;\n    }\n  }, {\n    key: 'create',\n    value: function create(quantity, inverse) {\n      var factor = inverse ? -1 : 1;\n      var new_ = new Combination(extend(true, {}, this.derivedQuantities), extend(true, {}, this.baseQuantities), quantity.name, false);\n\n      var type = quantity.name;\n      if (!(type in new_.derivedQuantities)) {\n        new_.derivedQuantities[type] = factor;\n      } else {\n        if (new_.derivedQuantities[type] / factor < 0) return null;\n        new_.derivedQuantities[type] += factor;\n      }\n\n      var types = quantity.types;\n      for (var _type2 in types) {\n        if (!(_type2 in new_.baseQuantities)) {\n          new_.baseQuantities[_type2] = -factor * types[_type2];\n        } else {\n          new_.baseQuantities[_type2] -= factor * types[_type2];\n        }\n        if (new_.baseQuantities[_type2] == 0) {\n          delete new_.baseQuantities[_type2];\n        }\n      }\n\n      new_.calculateCount();\n      return new_;\n    }\n  }]);\n\n  return Combination;\n}();\n\nmodule.exports = function (unitless) {\n  var MAX_COMBINATION = 10;\n  var queue = [new Combination({}, unitless.types, null)];\n  var quantities = app.getDerivedQuantities();\n  var combinations = [];\n  for (var i = 0; i < MAX_COMBINATION; i++) {\n    combinations.push([]);\n  }\n  while (queue.length) {\n    var e = queue.shift();\n    if (e == null) continue;\n    if (e.count < MAX_COMBINATION) {\n      combinations[e.count].push(e);\n    }\n    if (e.countDerivedUnits() < 4) {\n      var start = e.lastQuantity == null;\n      for (var quantityName in quantities) {\n        if (quantityName == e.lastQuantity) start = true;\n        if (!start) continue;\n        var quantity = quantities[quantityName];\n        queue.push(e.create(quantity, false));\n        queue.push(e.create(quantity, true));\n      }\n    }\n  }\n  var plain = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = combinations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var cs = _step.value;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = cs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var c = _step2.value;\n\n          plain.push(c);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return plain;\n};\n\n},{\"../app\":2}],13:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar app = require('../app');\nvar Server = require('../server');\n\nvar _$ = $,\n    extend = _$.extend;\n\n\nvar BaseUnit = {\n  BASE: true,\n  QUANTITY: 1\n};\n\nBaseUnit.register = function (type, name, symbol) {\n  var quantity = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var parentSymbol = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n  var ParentUnit = parentSymbol ? app.getUnit(type, parentSymbol) : BaseUnit;\n\n  var unitless = { types: {}, quantity: quantity };\n  unitless.types[type] = 1;\n  unitless.quantity = ParentUnit.QUANTITY * quantity;\n\n  var Unit = extend(true, {}, ParentUnit, {\n    TYPE: type,\n    NAME: name,\n    SYMBOL: symbol,\n    QUANTITY: unitless.quantity,\n    UNITLESS: unitless,\n    STANDARD: parentSymbol == null\n  });\n\n  app.addUnit(Unit);\n\n  if (type == 'file size' && !~['bit', 'byte'].indexOf(name)) {\n    app.addPrefixed(name);\n  }\n};\n\nBaseUnit.registerCommonSIPrefixes = function (type, parentSymbol) {\n  return registerSIPrefixes(Server.getSIPrefixes(true), type, parentSymbol);\n};\n\nBaseUnit.registerUncommonSIPrefixes = function (type, parentSymbol) {\n  return registerSIPrefixes(Server.getSIPrefixes(false), type, parentSymbol);\n};\n\nvar registerSIPrefixes = function registerSIPrefixes(prefixes, type, parentSymbol) {\n  var ParentUnit = app.getUnit(type, parentSymbol);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = prefixes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _step$value = _slicedToArray(_step.value, 3),\n          quantity = _step$value[0],\n          symbol = _step$value[1],\n          name = _step$value[2];\n\n      BaseUnit.register(type, name + ParentUnit.NAME, symbol + ParentUnit.SYMBOL, quantity, parentSymbol);\n      app.addPrefixed(name + ParentUnit.NAME);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n};\n\nmodule.exports = BaseUnit;\n\n},{\"../app\":2,\"../server\":11}],14:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar app = require('../app');\nvar Server = require('../server');\n\nvar _$ = $,\n    extend = _$.extend;\n\n\nvar DerivedUnit = {\n  BASE: false,\n  QUANTITY: 1,\n  MULS: [],\n  DIVS: []\n};\n\nDerivedUnit.register = function (type, name, symbol, quantity, arg1, arg2) {\n  var parentSymbol, divPairs, mulPairs;\n  if (arg1 && arg2) {\n    parentSymbol = null;\n    mulPairs = arg1;\n    divPairs = arg2;\n  } else {\n    parentSymbol = arg1;\n    mulPairs = [];\n    divPairs = [];\n  }\n  var ParentUnit = parentSymbol ? app.getUnit(type, parentSymbol) : DerivedUnit;\n\n  var _Server$getMulsAndDiv = Server.getMulsAndDivs(mulPairs, divPairs),\n      muls = _Server$getMulsAndDiv.muls,\n      divs = _Server$getMulsAndDiv.divs;\n\n  muls = ParentUnit.MULS.concat(muls);\n  divs = ParentUnit.DIVS.concat(divs);\n\n  var unitless = Server.getUnitless(muls, divs);\n  if (parentSymbol) unitless.quantity = ParentUnit.QUANTITY * quantity;else unitless.quantity *= quantity;\n\n  var Unit = extend(true, {}, DerivedUnit, {\n    TYPE: type,\n    NAME: name,\n    SYMBOL: symbol,\n    MULS: muls,\n    DIVS: divs,\n    QUANTITY: unitless.quantity,\n    UNITLESS: unitless,\n    STANDARD: parentSymbol == null\n  });\n\n  app.addUnit(Unit);\n\n  console.log(type, name);\n};\n\nDerivedUnit.registerCommonSIPrefixes = function (type, parentSymbol) {\n  return registerSIPrefixes(Server.getSIPrefixes(true), type, parentSymbol);\n};\n\nDerivedUnit.registerUncommonSIPrefixes = function (type, parentSymbol) {\n  return registerSIPrefixes(Server.getSIPrefixes(false), type, parentSymbol);\n};\n\nvar registerSIPrefixes = function registerSIPrefixes(prefixes, type, parentSymbol) {\n  var ParentUnit = app.getUnit(type, parentSymbol);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = prefixes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _step$value = _slicedToArray(_step.value, 3),\n          quantity = _step$value[0],\n          symbol = _step$value[1],\n          name = _step$value[2];\n\n      DerivedUnit.register(type, name + ParentUnit.NAME, symbol + ParentUnit.SYMBOL, quantity, parentSymbol);\n      app.addPrefixed(name + ParentUnit.NAME);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n};\n\nmodule.exports = DerivedUnit;\n\n},{\"../app\":2,\"../server\":11}],15:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('./base_unit');\nvar DerivedUnit = require('./derived_unit');\nvar register = require('./register');\n\nmodule.exports = {\n  BaseUnit: BaseUnit,\n  DerivedUnit: DerivedUnit,\n  register: register\n};\n\n},{\"./base_unit\":13,\"./derived_unit\":14,\"./register\":26}],16:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'angle';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'radian', '', 1);\n  BaseUnit.register(type, 'radian', 'rad', 1);\n  BaseUnit.register(type, 'degree', '°', 180 / Math.PI, 'rad');\n};\n\n},{\"../base_unit\":13}],17:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'area';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'acre', 'acre', 4840, [['length', 'yd'], ['length', 'yd']], []);\n  DerivedUnit.register(type, 'hectare', 'ha', 10000, [['length', 'm'], ['length', 'm']], []);\n};\n\n},{\"../derived_unit\":14}],18:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'coulomb';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'coulomb', 'C', 1, [['current', 'A'], ['time', 's']], []);\n  DerivedUnit.registerCommonSIPrefixes(type, 'C');\n  DerivedUnit.registerUncommonSIPrefixes(type, 'C');\n};\n\n},{\"../derived_unit\":14}],19:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'current';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'Ampere', 'A', 1);\n  BaseUnit.registerCommonSIPrefixes(type, 'A');\n  BaseUnit.registerUncommonSIPrefixes(type, 'A');\n};\n\n},{\"../base_unit\":13}],20:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'energy';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'joule', 'J', 1, [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's']]);\n  DerivedUnit.registerCommonSIPrefixes(type, 'J');\n  DerivedUnit.register(type, 'foot pound', 'ft-lb', 0.737562, 'J');\n  DerivedUnit.register(type, 'electron volt', 'eV', 8.462e+18, 'ft-lb');\n  DerivedUnit.registerUncommonSIPrefixes(type, 'J');\n};\n\n},{\"../derived_unit\":14}],21:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'farad';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'farad', 'F', 1, [['time', 's'], ['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']], [['mass', 'kg'], ['length', 'm'], ['length', 'm']]);\n  DerivedUnit.registerCommonSIPrefixes(type, 'F');\n  DerivedUnit.registerUncommonSIPrefixes(type, 'F');\n};\n\n},{\"../derived_unit\":14}],22:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'file size';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'byte', 'byte', 1);\n  BaseUnit.register(type, 'kilobyte', 'kb', 1024, 'byte');\n  BaseUnit.register(type, 'megabyte', 'Mb', 1024, 'kb');\n  BaseUnit.register(type, 'gigabyte', 'Gb', 1024, 'Mb');\n  BaseUnit.register(type, 'terabyte', 'Tb', 1024, 'Gb');\n  BaseUnit.register(type, 'petabyte', 'Pb', 1024, 'Tb');\n  BaseUnit.register(type, 'exabyte', 'Eb', 1024, 'Pb');\n  BaseUnit.register(type, 'zettabyte', 'Zb', 1024, 'Eb');\n  BaseUnit.register(type, 'yottabyte', 'Yb', 1024, 'Zb');\n  BaseUnit.register(type, 'bit', 'bit', 1 / 8, 'byte');\n  BaseUnit.register(type, 'kilobit', 'kbit', 1024, 'bit');\n  BaseUnit.register(type, 'megabit', 'Mbit', 1024, 'kbit');\n  BaseUnit.register(type, 'gigabit', 'Gbit', 1024, 'Mbit');\n  BaseUnit.register(type, 'terabit', 'Tbit', 1024, 'Gbit');\n  BaseUnit.register(type, 'petabit', 'Pbit', 1024, 'Tbit');\n  BaseUnit.register(type, 'exabit', 'Ebit', 1024, 'Pbit');\n  BaseUnit.register(type, 'zettabit', 'Zbit', 1024, 'Ebit');\n  BaseUnit.register(type, 'yottabit', 'Ybit', 1024, 'Zbit');\n};\n\n},{\"../base_unit\":13}],23:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'force';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'newton', 'N', 1, [['mass', 'kg'], ['length', 'm']], [['time', 's'], ['time', 's']]);\n  DerivedUnit.registerCommonSIPrefixes(type, 'N');\n  DerivedUnit.registerUncommonSIPrefixes(type, 'N');\n};\n\n},{\"../derived_unit\":14}],24:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'henry';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'henry', 'H', 1, [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']]);\n  DerivedUnit.registerCommonSIPrefixes(type, 'H');\n  DerivedUnit.registerUncommonSIPrefixes(type, 'H');\n};\n\n},{\"../derived_unit\":14}],25:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'hertz';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'hertz', 'Hz', 1, [], [['time', 's']]);\n  DerivedUnit.registerCommonSIPrefixes(type, 'Hz');\n  DerivedUnit.registerUncommonSIPrefixes(type, 'Hz');\n};\n\n},{\"../derived_unit\":14}],26:[function(require,module,exports){\n'use strict';\n\nvar length = require('./length');\nvar mass = require('./mass');\nvar time = require('./time');\nvar angle = require('./angle');\nvar current = require('./current');\nvar temp = require('./temp');\nvar matter = require('./matter');\nvar intensity = require('./intensity');\nvar fileSize = require('./file_size');\nvar energy = require('./energy');\nvar pressure = require('./pressure');\nvar force = require('./force');\nvar hertz = require('./hertz');\nvar watt = require('./watt');\nvar coulomb = require('./coulomb');\nvar volt = require('./volt');\nvar farad = require('./farad');\nvar ohm = require('./ohm');\nvar siemens = require('./siemens');\nvar weber = require('./weber');\nvar tesla = require('./tesla');\nvar henry = require('./henry');\nvar lux = require('./lux');\nvar volume = require('./volume');\nvar area = require('./area');\n\nmodule.exports = function () {\n  length();\n  mass();\n  time();\n  angle();\n  current();\n  temp();\n  matter();\n  intensity();\n  fileSize();\n  energy();\n  pressure();\n  force();\n  hertz();\n  watt();\n  coulomb();\n  volt();\n  farad();\n  ohm();\n  siemens();\n  weber();\n  tesla();\n  henry();\n  lux();\n  volume();\n  area();\n};\n\n},{\"./angle\":16,\"./area\":17,\"./coulomb\":18,\"./current\":19,\"./energy\":20,\"./farad\":21,\"./file_size\":22,\"./force\":23,\"./henry\":24,\"./hertz\":25,\"./intensity\":27,\"./length\":28,\"./lux\":29,\"./mass\":30,\"./matter\":31,\"./ohm\":32,\"./pressure\":33,\"./siemens\":34,\"./temp\":35,\"./tesla\":36,\"./time\":37,\"./volt\":38,\"./volume\":39,\"./watt\":40,\"./weber\":41}],27:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'intensity';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'candela', 'cd', 1);\n};\n\n},{\"../base_unit\":13}],28:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'length';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'meter', 'm', 1);\n  BaseUnit.registerCommonSIPrefixes(type, 'm');\n  BaseUnit.register(type, 'feet', 'ft', 0.3048, 'm');\n  BaseUnit.register(type, 'yard', 'yd', 3, 'ft');\n  BaseUnit.register(type, 'mile', 'mi', 1760, 'yd');\n  BaseUnit.register(type, 'inch', 'in', 2.54, 'cm');\n  BaseUnit.registerUncommonSIPrefixes(type, 'm');\n};\n\n},{\"../base_unit\":13}],29:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'lux';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'lux', 'lx', 1, [['intensity', 'cd']], [['length', 'm'], ['length', 'm']]);\n  DerivedUnit.registerCommonSIPrefixes(type, 'lx');\n  DerivedUnit.registerUncommonSIPrefixes(type, 'lx');\n};\n\n},{\"../derived_unit\":14}],30:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'mass';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'grams', 'g', 1);\n  BaseUnit.registerCommonSIPrefixes(type, 'g');\n  BaseUnit.register(type, 'pounds', 'lb', 453.59237, 'g');\n  BaseUnit.register(type, 'ounces', 'oz', 0.0625, 'lb');\n  BaseUnit.registerUncommonSIPrefixes(type, 'g');\n};\n\n},{\"../base_unit\":13}],31:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'matter';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'atom', 'atom', 1);\n  BaseUnit.register(type, 'mole', 'mol', 6.022140857e23, 'atom');\n};\n\n},{\"../base_unit\":13}],32:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'ohm';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'ohm', 'Ω', 1, [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']]);\n  DerivedUnit.registerCommonSIPrefixes(type, 'Ω');\n  DerivedUnit.registerUncommonSIPrefixes(type, 'Ω');\n};\n\n},{\"../derived_unit\":14}],33:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'pressure';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'pascal', 'Pa', 1, [['mass', 'kg']], [['length', 'm'], ['time', 's'], ['time', 's']]);\n  DerivedUnit.register(type, 'bar', 'bar', 1e5, 'Pa');\n  DerivedUnit.registerCommonSIPrefixes(type, 'Pa');\n  DerivedUnit.register(type, 'atmosphere', 'atm', 101325, 'Pa');\n  DerivedUnit.registerUncommonSIPrefixes(type, 'Pa');\n};\n\n},{\"../derived_unit\":14}],34:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'siemens';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'siemens', 'S', 1, [['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']], [['mass', 'kg'], ['length', 'm'], ['length', 'm']]);\n  DerivedUnit.registerCommonSIPrefixes(type, 'S');\n  DerivedUnit.registerUncommonSIPrefixes(type, 'S');\n};\n\n},{\"../derived_unit\":14}],35:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'temp';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'kelvin', 'K', 1);\n  BaseUnit.register(type, 'celsius', '°C', 1, 'K'); // TODO\n  BaseUnit.register(type, 'fahrenheit', '°F', 9 / 5, '°C');\n};\n\n},{\"../base_unit\":13}],36:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'telsa';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'telsa', 'T', 1, [['mass', 'kg']], [['time', 's'], ['time', 's'], ['current', 'A']]);\n  DerivedUnit.registerCommonSIPrefixes(type, 'T');\n  DerivedUnit.registerUncommonSIPrefixes(type, 'T');\n};\n\n},{\"../derived_unit\":14}],37:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'time';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'second', 's', 1);\n  BaseUnit.register(type, 'minute', 'min', 60, 's');\n  BaseUnit.register(type, 'hour', 'hr', 60, 'min');\n  BaseUnit.register(type, 'day', 'd', 24, 'hr');\n  BaseUnit.register(type, 'week', 'w', 7, 'd');\n  BaseUnit.register(type, 'month', 'mon', 4, 'w');\n  BaseUnit.register(type, 'year', 'yr', 12, 'mon');\n  BaseUnit.register(type, 'century', 'century', 100, 'yr');\n  BaseUnit.registerCommonSIPrefixes(type, 's');\n  BaseUnit.registerUncommonSIPrefixes(type, 's');\n};\n\n},{\"../base_unit\":13}],38:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'volt';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'volt', 'V', 1, [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A']]);\n  DerivedUnit.registerCommonSIPrefixes(type, 'V');\n  DerivedUnit.registerUncommonSIPrefixes(type, 'V');\n};\n\n},{\"../derived_unit\":14}],39:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'volume';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'liters', 'L', 1000, [['length', 'cm'], ['length', 'cm'], ['length', 'cm']], []);\n  DerivedUnit.registerCommonSIPrefixes(type, 'L');\n  DerivedUnit.register(type, 'teaspoon', 'tsp', 4.92892159375, 'mL');\n  DerivedUnit.register(type, 'tablespoon', 'Tbsp', 3, 'tsp');\n  DerivedUnit.register(type, 'US fluid ounce', 'fl oz', 2, 'Tbsp');\n  DerivedUnit.register(type, 'US cup', 'cp', 8, 'fl oz');\n  DerivedUnit.register(type, 'US pint', 'pt', 2, 'cp');\n  DerivedUnit.register(type, 'US quart', 'qt', 2, 'pt');\n  DerivedUnit.register(type, 'US gallon', 'gal', 4, 'qt');\n  DerivedUnit.register(type, 'barrel', 'bbl', 31.5, 'gal');\n  DerivedUnit.registerUncommonSIPrefixes(type, 'L');\n};\n\n},{\"../derived_unit\":14}],40:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'watt';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'watt', 'W', 1, [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['time', 's']]);\n  DerivedUnit.registerCommonSIPrefixes(type, 'W');\n  DerivedUnit.registerUncommonSIPrefixes(type, 'W');\n};\n\n},{\"../derived_unit\":14}],41:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'weber';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'weber', 'Wb', 1, [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['current', 'A']]);\n  DerivedUnit.registerCommonSIPrefixes(type, 'Wb');\n  DerivedUnit.registerUncommonSIPrefixes(type, 'Wb');\n};\n\n},{\"../derived_unit\":14}],42:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],43:[function(require,module,exports){\n(function (process,global){\n/*!\n * @overview RSVP - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2016 Yehuda Katz, Tom Dale, Stefan Penner and contributors\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/tildeio/rsvp.js/master/LICENSE\n * @version   3.3.3\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.RSVP = global.RSVP || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction indexOf(callbacks, callback) {\n  for (var i = 0, l = callbacks.length; i < l; i++) {\n    if (callbacks[i] === callback) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction callbacksFor(object) {\n  var callbacks = object._promiseCallbacks;\n\n  if (!callbacks) {\n    callbacks = object._promiseCallbacks = {};\n  }\n\n  return callbacks;\n}\n\n/**\n  @class RSVP.EventTarget\n*/\nvar EventTarget = {\n\n  /**\n    `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\n    Example:\n     ```javascript\n    let object = {};\n     RSVP.EventTarget.mixin(object);\n     object.on('finished', function(event) {\n      // handle event\n    });\n     object.trigger('finished', { detail: value });\n    ```\n     `EventTarget.mixin` also works with prototypes:\n     ```javascript\n    let Person = function() {};\n    RSVP.EventTarget.mixin(Person.prototype);\n     let yehuda = new Person();\n    let tom = new Person();\n     yehuda.on('poke', function(event) {\n      console.log('Yehuda says OW');\n    });\n     tom.on('poke', function(event) {\n      console.log('Tom says OW');\n    });\n     yehuda.trigger('poke');\n    tom.trigger('poke');\n    ```\n     @method mixin\n    @for RSVP.EventTarget\n    @private\n    @param {Object} object object to extend with EventTarget methods\n  */\n  mixin: function mixin(object) {\n    object['on'] = this['on'];\n    object['off'] = this['off'];\n    object['trigger'] = this['trigger'];\n    object._promiseCallbacks = undefined;\n    return object;\n  },\n\n  /**\n    Registers a callback to be executed when `eventName` is triggered\n     ```javascript\n    object.on('event', function(eventInfo){\n      // handle the event\n    });\n     object.trigger('event');\n    ```\n     @method on\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to listen for\n    @param {Function} callback function to be called when the event is triggered.\n  */\n  on: function on(eventName, callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback must be a function');\n    }\n\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined;\n\n    callbacks = allCallbacks[eventName];\n\n    if (!callbacks) {\n      callbacks = allCallbacks[eventName] = [];\n    }\n\n    if (indexOf(callbacks, callback) === -1) {\n      callbacks.push(callback);\n    }\n  },\n\n  /**\n    You can use `off` to stop firing a particular callback for an event:\n     ```javascript\n    function doStuff() { // do stuff! }\n    object.on('stuff', doStuff);\n     object.trigger('stuff'); // doStuff will be called\n     // Unregister ONLY the doStuff callback\n    object.off('stuff', doStuff);\n    object.trigger('stuff'); // doStuff will NOT be called\n    ```\n     If you don't pass a `callback` argument to `off`, ALL callbacks for the\n    event will not be executed when the event fires. For example:\n     ```javascript\n    let callback1 = function(){};\n    let callback2 = function(){};\n     object.on('stuff', callback1);\n    object.on('stuff', callback2);\n     object.trigger('stuff'); // callback1 and callback2 will be executed.\n     object.off('stuff');\n    object.trigger('stuff'); // callback1 and callback2 will not be executed!\n    ```\n     @method off\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName event to stop listening to\n    @param {Function} callback optional argument. If given, only the function\n    given will be removed from the event's callback queue. If no `callback`\n    argument is given, all callbacks will be removed from the event's callback\n    queue.\n  */\n  off: function off(eventName, callback) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        index = undefined;\n\n    if (!callback) {\n      allCallbacks[eventName] = [];\n      return;\n    }\n\n    callbacks = allCallbacks[eventName];\n\n    index = indexOf(callbacks, callback);\n\n    if (index !== -1) {\n      callbacks.splice(index, 1);\n    }\n  },\n\n  /**\n    Use `trigger` to fire custom events. For example:\n     ```javascript\n    object.on('foo', function(){\n      console.log('foo event happened!');\n    });\n    object.trigger('foo');\n    // 'foo event happened!' logged to the console\n    ```\n     You can also pass a value as a second argument to `trigger` that will be\n    passed as an argument to all event listeners for the event:\n     ```javascript\n    object.on('foo', function(value){\n      console.log(value.name);\n    });\n     object.trigger('foo', { name: 'bar' });\n    // 'bar' logged to the console\n    ```\n     @method trigger\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to be triggered\n    @param {*} options optional value to be passed to any event handlers for\n    the given `eventName`\n  */\n  trigger: function trigger(eventName, options, label) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        callback = undefined;\n\n    if (callbacks = allCallbacks[eventName]) {\n      // Don't cache the callbacks.length since it may grow\n      for (var i = 0; i < callbacks.length; i++) {\n        callback = callbacks[i];\n\n        callback(options, label);\n      }\n    }\n  }\n};\n\nvar config = {\n  instrument: false\n};\n\nEventTarget['mixin'](config);\n\nfunction configure(name, value) {\n  if (name === 'onerror') {\n    // handle for legacy users that expect the actual\n    // error to be passed to their function added via\n    // `RSVP.configure('onerror', someFunctionHere);`\n    config['on']('error', value);\n    return;\n  }\n\n  if (arguments.length === 2) {\n    config[name] = value;\n  } else {\n    return config[name];\n  }\n}\n\nfunction objectOrFunction(x) {\n  return typeof x === 'function' || typeof x === 'object' && x !== null;\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nfunction isMaybeThenable(x) {\n  return typeof x === 'object' && x !== null;\n}\n\nvar _isArray = undefined;\nif (!Array.isArray) {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n} else {\n  _isArray = Array.isArray;\n}\n\nvar isArray = _isArray;\n\n// Date.now is not available in browsers < IE9\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility\nvar now = Date.now || function () {\n  return new Date().getTime();\n};\n\nfunction F() {}\n\nvar o_create = Object.create || function (o) {\n  if (arguments.length > 1) {\n    throw new Error('Second argument not supported');\n  }\n  if (typeof o !== 'object') {\n    throw new TypeError('Argument must be an object');\n  }\n  F.prototype = o;\n  return new F();\n};\n\nvar queue = [];\n\nfunction scheduleFlush() {\n  setTimeout(function () {\n    for (var i = 0; i < queue.length; i++) {\n      var entry = queue[i];\n\n      var payload = entry.payload;\n\n      payload.guid = payload.key + payload.id;\n      payload.childGuid = payload.key + payload.childId;\n      if (payload.error) {\n        payload.stack = payload.error.stack;\n      }\n\n      config['trigger'](entry.name, entry.payload);\n    }\n    queue.length = 0;\n  }, 50);\n}\nfunction instrument(eventName, promise, child) {\n  if (1 === queue.push({\n    name: eventName,\n    payload: {\n      key: promise._guidKey,\n      id: promise._id,\n      eventName: eventName,\n      detail: promise._result,\n      childId: child && child._id,\n      label: promise._label,\n      timeStamp: now(),\n      error: config[\"instrument-with-stack\"] ? new Error(promise._label) : null\n    } })) {\n    scheduleFlush();\n  }\n}\n\n/**\n  `RSVP.Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {*} object value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop, label);\n  resolve(promise, object);\n  return promise;\n}\n\nfunction withOwnPromise() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then) {\n  config.async(function (promise) {\n    var sealed = false;\n    var error = tryThen(then, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    thenable._onError = null;\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$) {\n  if (maybeThenable.constructor === promise.constructor && then$$ === then && promise.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$ === GET_THEN_ERROR) {\n      reject(promise, GET_THEN_ERROR.error);\n    } else if (then$$ === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$)) {\n      handleForeignThenable(promise, maybeThenable, then$$);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    fulfill(promise, value);\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onError) {\n    promise._onError(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length === 0) {\n    if (config.instrument) {\n      instrument('fulfilled', promise);\n    }\n  } else {\n    config.async(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n  config.async(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var subscribers = parent._subscribers;\n  var length = subscribers.length;\n\n  parent._onError = null;\n\n  subscribers[length] = child;\n  subscribers[length + FULFILLED] = onFulfillment;\n  subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    config.async(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (config.instrument) {\n    instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);\n  }\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = undefined,\n      callback = undefined,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = undefined,\n      error = undefined,\n      succeeded = undefined,\n      failed = undefined;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, withOwnPromise());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n      resolve(promise, value);\n    } else if (failed) {\n      reject(promise, error);\n    } else if (settled === FULFILLED) {\n      fulfill(promise, value);\n    } else if (settled === REJECTED) {\n      reject(promise, value);\n    }\n}\n\nfunction initializePromise(promise, resolver) {\n  var resolved = false;\n  try {\n    resolver(function (value) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      resolve(promise, value);\n    }, function (reason) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nfunction then(onFulfillment, onRejection, label) {\n  var _arguments = arguments;\n\n  var parent = this;\n  var state = parent._state;\n\n  if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {\n    config.instrument && instrument('chained', parent, parent);\n    return parent;\n  }\n\n  parent._onError = null;\n\n  var child = new parent.constructor(noop, label);\n  var result = parent._result;\n\n  config.instrument && instrument('chained', parent, child);\n\n  if (state) {\n    (function () {\n      var callback = _arguments[state - 1];\n      config.async(function () {\n        return invokeCallback(state, child, callback, result);\n      });\n    })();\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\nfunction makeSettledResult(state, position, value) {\n  if (state === FULFILLED) {\n    return {\n      state: 'fulfilled',\n      value: value\n    };\n  } else {\n    return {\n      state: 'rejected',\n      reason: value\n    };\n  }\n}\n\nfunction Enumerator(Constructor, input, abortOnReject, label) {\n  this._instanceConstructor = Constructor;\n  this.promise = new Constructor(noop, label);\n  this._abortOnReject = abortOnReject;\n\n  if (this._validateInput(input)) {\n    this._input = input;\n    this.length = input.length;\n    this._remaining = input.length;\n\n    this._init();\n\n    if (this.length === 0) {\n      fulfill(this.promise, this._result);\n    } else {\n      this.length = this.length || 0;\n      this._enumerate();\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    }\n  } else {\n    reject(this.promise, this._validationError());\n  }\n}\n\nEnumerator.prototype._validateInput = function (input) {\n  return isArray(input);\n};\n\nEnumerator.prototype._validationError = function () {\n  return new Error('Array Methods must be provided an Array');\n};\n\nEnumerator.prototype._init = function () {\n  this._result = new Array(this.length);\n};\n\nEnumerator.prototype._enumerate = function () {\n  var length = this.length;\n  var promise = this.promise;\n  var input = this._input;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    this._eachEntry(input[i], i);\n  }\n};\n\nEnumerator.prototype._settleMaybeThenable = function (entry, i) {\n  var c = this._instanceConstructor;\n  var resolve = c.resolve;\n\n  if (resolve === resolve$1) {\n    var then$$ = getThen(entry);\n\n    if (then$$ === then && entry._state !== PENDING) {\n      entry._onError = null;\n      this._settledAt(entry._state, i, entry._result);\n    } else if (typeof then$$ !== 'function') {\n      this._remaining--;\n      this._result[i] = this._makeResult(FULFILLED, i, entry);\n    } else if (c === Promise) {\n      var promise = new c(noop);\n      handleMaybeThenable(promise, entry, then$$);\n      this._willSettleAt(promise, i);\n    } else {\n      this._willSettleAt(new c(function (resolve) {\n        return resolve(entry);\n      }), i);\n    }\n  } else {\n    this._willSettleAt(resolve(entry), i);\n  }\n};\n\nEnumerator.prototype._eachEntry = function (entry, i) {\n  if (isMaybeThenable(entry)) {\n    this._settleMaybeThenable(entry, i);\n  } else {\n    this._remaining--;\n    this._result[i] = this._makeResult(FULFILLED, i, entry);\n  }\n};\n\nEnumerator.prototype._settledAt = function (state, i, value) {\n  var promise = this.promise;\n\n  if (promise._state === PENDING) {\n    this._remaining--;\n\n    if (this._abortOnReject && state === REJECTED) {\n      reject(promise, value);\n    } else {\n      this._result[i] = this._makeResult(state, i, value);\n    }\n  }\n\n  if (this._remaining === 0) {\n    fulfill(promise, this._result);\n  }\n};\n\nEnumerator.prototype._makeResult = function (state, i, value) {\n  return value;\n};\n\nEnumerator.prototype._willSettleAt = function (promise, i) {\n  var enumerator = this;\n\n  subscribe(promise, undefined, function (value) {\n    return enumerator._settledAt(FULFILLED, i, value);\n  }, function (reason) {\n    return enumerator._settledAt(REJECTED, i, reason);\n  });\n};\n\n/**\n  `RSVP.Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error(\"2\"));\n  let promise3 = RSVP.reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries, label) {\n  return new Enumerator(this, entries, true, /* abort on reject */label).promise;\n}\n\n/**\n  `RSVP.Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `RSVP.Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  RSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} entries array of promises to observe\n  @param {String} label optional string for describing the promise returned.\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  var promise = new Constructor(noop, label);\n\n  if (!isArray(entries)) {\n    reject(promise, new TypeError('You must pass an array to race.'));\n    return promise;\n  }\n\n  for (var i = 0; promise._state === PENDING && i < entries.length; i++) {\n    subscribe(Constructor.resolve(entries[i]), undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n\n  return promise;\n}\n\n/**\n  `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop, label);\n  reject(promise, reason);\n  return promise;\n}\n\nvar guidKey = 'rsvp_' + now() + '-';\nvar counter = 0;\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise’s eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class RSVP.Promise\n  @param {function} resolver\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @constructor\n*/\nfunction Promise(resolver, label) {\n  this._id = counter++;\n  this._label = label;\n  this._state = undefined;\n  this._result = undefined;\n  this._subscribers = [];\n\n  config.instrument && instrument('created', this);\n\n  if (noop !== resolver) {\n    typeof resolver !== 'function' && needsResolver();\n    this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n  }\n}\n\nPromise.cast = resolve$1; // deprecated\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = resolve$1;\nPromise.reject = reject$1;\n\nPromise.prototype = {\n  constructor: Promise,\n\n  _guidKey: guidKey,\n\n  _onError: function _onError(reason) {\n    var promise = this;\n    config.after(function () {\n      if (promise._onError) {\n        config['trigger']('error', reason, promise._label);\n      }\n    });\n  },\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we\\'re unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we\\'re unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfillment\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  then: then,\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn\\'t find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'catch': function _catch(onRejection, label) {\n    return this.then(undefined, onRejection, label);\n  },\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'finally': function _finally(callback, label) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    return promise.then(function (value) {\n      return constructor.resolve(callback()).then(function () {\n        return value;\n      });\n    }, function (reason) {\n      return constructor.resolve(callback()).then(function () {\n        throw reason;\n      });\n    }, label);\n  }\n};\n\nfunction Result() {\n  this.value = undefined;\n}\n\nvar ERROR = new Result();\nvar GET_THEN_ERROR$1 = new Result();\n\nfunction getThen$1(obj) {\n  try {\n    return obj.then;\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction tryApply(f, s, a) {\n  try {\n    f.apply(s, a);\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction makeObject(_, argumentNames) {\n  var obj = {};\n  var length = _.length;\n  var args = new Array(length);\n\n  for (var x = 0; x < length; x++) {\n    args[x] = _[x];\n  }\n\n  for (var i = 0; i < argumentNames.length; i++) {\n    var _name = argumentNames[i];\n    obj[_name] = args[i + 1];\n  }\n\n  return obj;\n}\n\nfunction arrayResult(_) {\n  var length = _.length;\n  var args = new Array(length - 1);\n\n  for (var i = 1; i < length; i++) {\n    args[i - 1] = _[i];\n  }\n\n  return args;\n}\n\nfunction wrapThenable(_then, promise) {\n  return {\n    then: function then(onFulFillment, onRejection) {\n      return _then.call(promise, onFulFillment, onRejection);\n    }\n  };\n}\n\n/**\n  `RSVP.denodeify` takes a 'node-style' function and returns a function that\n  will return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\n  browser when you'd prefer to use promises over using callbacks. For example,\n  `denodeify` transforms the following:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) return handleError(err);\n    handleData(data);\n  });\n  ```\n\n  into:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n\n  readFile('myfile.txt').then(handleData, handleError);\n  ```\n\n  If the node function has multiple success parameters, then `denodeify`\n  just returns the first one:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'));\n\n  request('http://example.com').then(function(res) {\n    // ...\n  });\n  ```\n\n  However, if you need all success parameters, setting `denodeify`'s\n  second parameter to `true` causes it to return all success parameters\n  as an array:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), true);\n\n  request('http://example.com').then(function(result) {\n    // result[0] -> res\n    // result[1] -> body\n  });\n  ```\n\n  Or if you pass it an array with names it returns the parameters as a hash:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), ['res', 'body']);\n\n  request('http://example.com').then(function(result) {\n    // result.res\n    // result.body\n  });\n  ```\n\n  Sometimes you need to retain the `this`:\n\n  ```javascript\n  let app = require('express')();\n  let render = RSVP.denodeify(app.render.bind(app));\n  ```\n\n  The denodified function inherits from the original function. It works in all\n  environments, except IE 10 and below. Consequently all properties of the original\n  function are available to you. However, any properties you change on the\n  denodeified function won't be changed on the original function. Example:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request')),\n      cookieJar = request.jar(); // <- Inheritance is used here\n\n  request('http://example.com', {jar: cookieJar}).then(function(res) {\n    // cookieJar.cookies holds now the cookies returned by example.com\n  });\n  ```\n\n  Using `denodeify` makes it easier to compose asynchronous operations instead\n  of using callbacks. For example, instead of:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) { ... } // Handle error\n    fs.writeFile('myfile2.txt', data, function(err){\n      if (err) { ... } // Handle error\n      console.log('done')\n    });\n  });\n  ```\n\n  you can chain the operations together using `then` from the returned promise:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n  let writeFile = RSVP.denodeify(fs.writeFile);\n\n  readFile('myfile.txt').then(function(data){\n    return writeFile('myfile2.txt', data);\n  }).then(function(){\n    console.log('done')\n  }).catch(function(error){\n    // Handle error\n  });\n  ```\n\n  @method denodeify\n  @static\n  @for RSVP\n  @param {Function} nodeFunc a 'node-style' function that takes a callback as\n  its last argument. The callback expects an error to be passed as its first\n  argument (if an error occurred, otherwise null), and the value from the\n  operation as its second argument ('function(err, value){ }').\n  @param {Boolean|Array} [options] An optional paramter that if set\n  to `true` causes the promise to fulfill with the callback's success arguments\n  as an array. This is useful if the node function has multiple success\n  paramters. If you set this paramter to an array with names, the promise will\n  fulfill with a hash with these names as keys and the success parameters as\n  values.\n  @return {Function} a function that wraps `nodeFunc` to return an\n  `RSVP.Promise`\n  @static\n*/\nfunction denodeify(nodeFunc, options) {\n  var fn = function fn() {\n    var self = this;\n    var l = arguments.length;\n    var args = new Array(l + 1);\n    var promiseInput = false;\n\n    for (var i = 0; i < l; ++i) {\n      var arg = arguments[i];\n\n      if (!promiseInput) {\n        // TODO: clean this up\n        promiseInput = needsPromiseInput(arg);\n        if (promiseInput === GET_THEN_ERROR$1) {\n          var p = new Promise(noop);\n          reject(p, GET_THEN_ERROR$1.value);\n          return p;\n        } else if (promiseInput && promiseInput !== true) {\n          arg = wrapThenable(promiseInput, arg);\n        }\n      }\n      args[i] = arg;\n    }\n\n    var promise = new Promise(noop);\n\n    args[l] = function (err, val) {\n      if (err) reject(promise, err);else if (options === undefined) resolve(promise, val);else if (options === true) resolve(promise, arrayResult(arguments));else if (isArray(options)) resolve(promise, makeObject(arguments, options));else resolve(promise, val);\n    };\n\n    if (promiseInput) {\n      return handlePromiseInput(promise, args, nodeFunc, self);\n    } else {\n      return handleValueInput(promise, args, nodeFunc, self);\n    }\n  };\n\n  fn.__proto__ = nodeFunc;\n\n  return fn;\n}\n\nfunction handleValueInput(promise, args, nodeFunc, self) {\n  var result = tryApply(nodeFunc, self, args);\n  if (result === ERROR) {\n    reject(promise, result.value);\n  }\n  return promise;\n}\n\nfunction handlePromiseInput(promise, args, nodeFunc, self) {\n  return Promise.all(args).then(function (args) {\n    var result = tryApply(nodeFunc, self, args);\n    if (result === ERROR) {\n      reject(promise, result.value);\n    }\n    return promise;\n  });\n}\n\nfunction needsPromiseInput(arg) {\n  if (arg && typeof arg === 'object') {\n    if (arg.constructor === Promise) {\n      return true;\n    } else {\n      return getThen$1(arg);\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.all`.\n\n  @method all\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n*/\nfunction all$1(array, label) {\n  return Promise.all(array, label);\n}\n\nfunction AllSettled(Constructor, entries, label) {\n  this._superConstructor(Constructor, entries, false, /* don't abort on reject */label);\n}\n\nAllSettled.prototype = o_create(Enumerator.prototype);\nAllSettled.prototype._superConstructor = Enumerator;\nAllSettled.prototype._makeResult = makeSettledResult;\nAllSettled.prototype._validationError = function () {\n  return new Error('allSettled must be called with an array');\n};\n\n/**\n  `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\n  a fail-fast method, it waits until all the promises have returned and\n  shows you all the results. This is useful if you want to handle multiple\n  promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled. The return promise is fulfilled with an array of the states of\n  the promises passed into the `promises` array argument.\n\n  Each state object will either indicate fulfillment or rejection, and\n  provide the corresponding value or reason. The states will take one of\n  the following formats:\n\n  ```javascript\n  { state: 'fulfilled', value: value }\n    or\n  { state: 'rejected', reason: reason }\n  ```\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.Promise.resolve(1);\n  let promise2 = RSVP.Promise.reject(new Error('2'));\n  let promise3 = RSVP.Promise.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.allSettled(promises).then(function(array){\n    // array == [\n    //   { state: 'fulfilled', value: 1 },\n    //   { state: 'rejected', reason: Error },\n    //   { state: 'rejected', reason: Error }\n    // ]\n    // Note that for the second item, reason.message will be '2', and for the\n    // third item, reason.message will be '3'.\n  }, function(error) {\n    // Not run. (This block would only be called if allSettled had failed,\n    // for instance if passed an incorrect argument type.)\n  });\n  ```\n\n  @method allSettled\n  @static\n  @for RSVP\n  @param {Array} entries\n  @param {String} label - optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with an array of the settled\n  states of the constituent promises.\n*/\nfunction allSettled(entries, label) {\n  return new AllSettled(Promise, entries, label).promise;\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.race`.\n\n  @method race\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n */\nfunction race$1(array, label) {\n  return Promise.race(array, label);\n}\n\nfunction PromiseHash(Constructor, object, label) {\n  this._superConstructor(Constructor, object, true, label);\n}\n\nPromiseHash.prototype = o_create(Enumerator.prototype);\nPromiseHash.prototype._superConstructor = Enumerator;\nPromiseHash.prototype._init = function () {\n  this._result = {};\n};\n\nPromiseHash.prototype._validateInput = function (input) {\n  return input && typeof input === 'object';\n};\n\nPromiseHash.prototype._validationError = function () {\n  return new Error('Promise.hash must be called with an object');\n};\n\nPromiseHash.prototype._enumerate = function () {\n  var enumerator = this;\n  var promise = enumerator.promise;\n  var input = enumerator._input;\n  var results = [];\n\n  for (var key in input) {\n    if (promise._state === PENDING && Object.prototype.hasOwnProperty.call(input, key)) {\n      results.push({\n        position: key,\n        entry: input[key]\n      });\n    }\n  }\n\n  var length = results.length;\n  enumerator._remaining = length;\n  var result = undefined;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    result = results[i];\n    enumerator._eachEntry(result.entry, result.position);\n  }\n};\n\n/**\n  `RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\n  for its `promises` argument.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  fulfilled, or rejected if any of them become rejected. The returned promise\n  is fulfilled with a hash that has the same key names as the `promises` object\n  argument. If any of the values in the object are not promises, they will\n  simply be copied over to the fulfilled object.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    yourPromise: RSVP.resolve(2),\n    theirPromise: RSVP.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: 1,\n    //   yourPromise: 2,\n    //   theirPromise: 3,\n    //   notAPromise: 4\n    // }\n  });\n  ````\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the first promise\n  that is rejected will be given as the reason to the rejection handler.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    rejectedPromise: RSVP.reject(new Error('rejectedPromise')),\n    anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === 'rejectedPromise'\n  });\n  ```\n\n  An important note: `RSVP.hash` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hash` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hash(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: 'Example'\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hash\n  @static\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all properties of `promises`\n  have been fulfilled, or rejected if any of them become rejected.\n*/\nfunction hash(object, label) {\n  return new PromiseHash(Promise, object, label).promise;\n}\n\nfunction HashSettled(Constructor, object, label) {\n  this._superConstructor(Constructor, object, false, label);\n}\n\nHashSettled.prototype = o_create(PromiseHash.prototype);\nHashSettled.prototype._superConstructor = Enumerator;\nHashSettled.prototype._makeResult = makeSettledResult;\n\nHashSettled.prototype._validationError = function () {\n  return new Error('hashSettled must be called with an object');\n};\n\n/**\n  `RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\n  instead of an array for its `promises` argument.\n\n  Unlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\n  but like `RSVP.allSettled`, `hashSettled` waits until all the\n  constituent promises have returned and then shows you all the results\n  with their states and values/reasons. This is useful if you want to\n  handle multiple promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled, or rejected if the passed parameters are invalid.\n\n  The returned promise is fulfilled with a hash that has the same key names as\n  the `promises` object argument. If any of the values in the object are not\n  promises, they will be copied over to the fulfilled object and marked with state\n  'fulfilled'.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    yourPromise: RSVP.Promise.resolve(2),\n    theirPromise: RSVP.Promise.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: { state: 'fulfilled', value: 1 },\n    //   yourPromise: { state: 'fulfilled', value: 2 },\n    //   theirPromise: { state: 'fulfilled', value: 3 },\n    //   notAPromise: { state: 'fulfilled', value: 4 }\n    // }\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the state will\n  be set to 'rejected' and the reason for rejection provided.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    rejectedPromise: RSVP.Promise.reject(new Error('rejection')),\n    anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise:              { state: 'fulfilled', value: 1 },\n    //   rejectedPromise:        { state: 'rejected', reason: Error },\n    //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n    // }\n    // Note that for rejectedPromise, reason.message == 'rejection',\n    // and for anotherRejectedPromise, reason.message == 'more rejection'.\n  });\n  ```\n\n  An important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.Promise.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.Promise.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hashSettled(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: { state: 'fulfilled', value: 'Example' }\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hashSettled\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when when all properties of `promises`\n  have been settled.\n  @static\n*/\nfunction hashSettled(object, label) {\n  return new HashSettled(Promise, object, label).promise;\n}\n\nfunction rethrow(reason) {\n  setTimeout(function () {\n    throw reason;\n  });\n  throw reason;\n}\n\n/**\n  `RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n  `RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\n  interface. New code should use the `RSVP.Promise` constructor instead.\n\n  The object returned from `RSVP.defer` is a plain object with three properties:\n\n  * promise - an `RSVP.Promise`.\n  * reject - a function that causes the `promise` property on this object to\n    become rejected\n  * resolve - a function that causes the `promise` property on this object to\n    become fulfilled.\n\n  Example:\n\n   ```javascript\n   let deferred = RSVP.defer();\n\n   deferred.resolve(\"Success!\");\n\n   deferred.promise.then(function(value){\n     // value here is \"Success!\"\n   });\n   ```\n\n  @method defer\n  @static\n  @for RSVP\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Object}\n */\nfunction defer(label) {\n  var deferred = { resolve: undefined, reject: undefined };\n\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  }, label);\n\n  return deferred;\n}\n\n/**\n `RSVP.map` is similar to JavaScript's native `map` method, except that it\n  waits for all promises to become fulfilled before running the `mapFn` on\n  each item in given to `promises`. `RSVP.map` returns a promise that will\n  become fulfilled with the result of running `mapFn` on the values the promises\n  become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(result){\n    // result is [ 2, 3, 4 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.map` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\n  say you want to get all comments from a set of blog posts, but you need\n  the blog posts first because they contain a url to those comments.\n\n  ```javscript\n\n  let mapFn = function(blogPost){\n    // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n    // with some comments data\n    return getComments(blogPost.comments_url);\n  };\n\n  // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n  // with some blog post data\n  RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n    // comments is the result of asking the server for the comments\n    // of all blog posts returned from getBlogPosts()\n  });\n  ```\n\n  @method map\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} mapFn function to be called on each fulfilled promise.\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with the result of calling\n  `mapFn` on each fulfilled promise or value when they become fulfilled.\n   The promise will be rejected if any of the given `promises` become rejected.\n  @static\n*/\nfunction map(promises, mapFn, label) {\n  return Promise.all(promises, label).then(function (values) {\n    if (!isFunction(mapFn)) {\n      throw new TypeError(\"You must pass a function as map's second argument.\");\n    }\n\n    var length = values.length;\n    var results = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      results[i] = mapFn(values[i]);\n    }\n\n    return Promise.all(results, label);\n  });\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.resolve`.\n\n  @method resolve\n  @static\n  @for RSVP\n  @param {*} value value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$2(value, label) {\n  return Promise.resolve(value, label);\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.reject`.\n\n  @method reject\n  @static\n  @for RSVP\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$2(reason, label) {\n  return Promise.reject(reason, label);\n}\n\n/**\n `RSVP.filter` is similar to JavaScript's native `filter` method, except that it\n  waits for all promises to become fulfilled before running the `filterFn` on\n  each item in given to `promises`. `RSVP.filter` returns a promise that will\n  become fulfilled with the result of running `filterFn` on the values the\n  promises become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n\n  let promises = [promise1, promise2, promise3];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(result){\n    // result is [ 2, 3 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.filter` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.filter` will also wait for any promises returned from `filterFn`.\n  For instance, you may want to fetch a list of users then return a subset\n  of those users based on some asynchronous operation:\n\n  ```javascript\n\n  let alice = { name: 'alice' };\n  let bob   = { name: 'bob' };\n  let users = [ alice, bob ];\n\n  let promises = users.map(function(user){\n    return RSVP.resolve(user);\n  });\n\n  let filterFn = function(user){\n    // Here, Alice has permissions to create a blog post, but Bob does not.\n    return getPrivilegesForUser(user).then(function(privs){\n      return privs.can_create_blog_post === true;\n    });\n  };\n  RSVP.filter(promises, filterFn).then(function(users){\n    // true, because the server told us only Alice can create a blog post.\n    users.length === 1;\n    // false, because Alice is the only user present in `users`\n    users[0] === bob;\n  });\n  ```\n\n  @method filter\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} filterFn - function to be called on each resolved value to\n  filter the final results.\n  @param {String} label optional string describing the promise. Useful for\n  tooling.\n  @return {Promise}\n*/\n\nfunction resolveAll(promises, label) {\n  return Promise.all(promises, label);\n}\n\nfunction resolveSingle(promise, label) {\n  return Promise.resolve(promise, label).then(function (promises) {\n    return resolveAll(promises, label);\n  });\n}\nfunction filter(promises, filterFn, label) {\n  var promise = isArray(promises) ? resolveAll(promises, label) : resolveSingle(promises, label);\n  return promise.then(function (values) {\n    if (!isFunction(filterFn)) {\n      throw new TypeError(\"You must pass a function as filter's second argument.\");\n    }\n\n    var length = values.length;\n    var filtered = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      filtered[i] = filterFn(values[i]);\n    }\n\n    return resolveAll(filtered, label).then(function (filtered) {\n      var results = new Array(length);\n      var newLength = 0;\n\n      for (var i = 0; i < length; i++) {\n        if (filtered[i]) {\n          results[newLength] = values[i];\n          newLength++;\n        }\n      }\n\n      results.length = newLength;\n\n      return results;\n    });\n  });\n}\n\nvar len = 0;\nvar vertxNext = undefined;\nfunction asap(callback, arg) {\n  queue$1[len] = callback;\n  queue$1[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 1, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    scheduleFlush$1();\n  }\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  var nextTick = process.nextTick;\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // setImmediate should be used instead instead\n  var version = process.versions.node.match(/^(?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)$/);\n  if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {\n    nextTick = setImmediate;\n  }\n  return function () {\n    return nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    return node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  return function () {\n    return setTimeout(flush, 1);\n  };\n}\n\nvar queue$1 = new Array(1000);\n\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue$1[i];\n    var arg = queue$1[i + 1];\n\n    callback(arg);\n\n    queue$1[i] = undefined;\n    queue$1[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertex() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush$1 = undefined;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush$1 = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush$1 = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush$1 = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush$1 = attemptVertex();\n} else {\n  scheduleFlush$1 = useSetTimeout();\n}\n\nvar platform = undefined;\n\n/* global self */\nif (typeof self === 'object') {\n  platform = self;\n\n  /* global global */\n} else if (typeof global === 'object') {\n    platform = global;\n  } else {\n    throw new Error('no global: `self` or `global` found');\n  }\n\nvar _async$filter;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// defaults\n\n// the default export here is for backwards compat:\n//   https://github.com/tildeio/rsvp.js/issues/434\nconfig.async = asap;\nconfig.after = function (cb) {\n  return setTimeout(cb, 0);\n};\nvar cast = resolve$2;\n\nvar async = function async(callback, arg) {\n  return config.async(callback, arg);\n};\n\nfunction on() {\n  config['on'].apply(config, arguments);\n}\n\nfunction off() {\n  config['off'].apply(config, arguments);\n}\n\n// Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`\nif (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {\n  var callbacks = window['__PROMISE_INSTRUMENTATION__'];\n  configure('instrument', true);\n  for (var eventName in callbacks) {\n    if (callbacks.hasOwnProperty(eventName)) {\n      on(eventName, callbacks[eventName]);\n    }\n  }\n}var rsvp = (_async$filter = {\n  cast: cast,\n  Promise: Promise,\n  EventTarget: EventTarget,\n  all: all$1,\n  allSettled: allSettled,\n  race: race$1,\n  hash: hash,\n  hashSettled: hashSettled,\n  rethrow: rethrow,\n  defer: defer,\n  denodeify: denodeify,\n  configure: configure,\n  on: on,\n  off: off,\n  resolve: resolve$2,\n  reject: reject$2,\n  map: map\n}, _defineProperty(_async$filter, 'async', async), _defineProperty(_async$filter, 'filter', // babel seems to error if async isn't a computed prop here...\nfilter), _async$filter);\n\nexports['default'] = rsvp;\nexports.cast = cast;\nexports.Promise = Promise;\nexports.EventTarget = EventTarget;\nexports.all = all$1;\nexports.allSettled = allSettled;\nexports.race = race$1;\nexports.hash = hash;\nexports.hashSettled = hashSettled;\nexports.rethrow = rethrow;\nexports.defer = defer;\nexports.denodeify = denodeify;\nexports.configure = configure;\nexports.on = on;\nexports.off = off;\nexports.resolve = resolve$2;\nexports.reject = reject$2;\nexports.map = map;\nexports.async = async;\nexports.filter = filter;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":42}]},{},[5])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}