{"version":3,"sources":["quantify.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_$","$","extend","_this","this","unitClasses","addUnitClass","Unit","type","TYPE","symbol","SYMBOL","hasOwnProperty","getUnitClass","getDerivedUnitClasses","getUnitClasses","derivedUnitClasses","unitSymbol","unitClass","BASE","quantity","2","3","setupMain","./setup_main","4","Server","search","../../server","5","RSVP","DOM","app","App","on","reason","console","assert","register","window","main","./app","./app/constructor","./dom","./server","./unit","rsvp","6","simplify","./search","./simplify","7","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Util","Combination","mulTypes","divTypes","unitless","countCalculation","arguments","undefined","calculateCount","value","count","types","Math","abs","mulClass","new_","slice","push","UNITLESS","divClass","str","mulSymbols","divSymbols","mulPairs","divPairs","forEach","mul","identifyUnit","div","_Util$getMulAndDivCla","getMulAndDivClasses","mulClasses","divClasses","getUnitless","queue","log","minCount","minCombinations","shift","createMulClassAdded","createDivClassAdded","../app","../util","8","muls","divs","val","9","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","BaseUnit","base","QUANTITY","parentSymbol","ParentUnit","_ParentUnit","getPrototypeOf","10","DerivedUnit","MULS","DIVS","11","./base_unit","./derived_unit","./register","12","../derived_unit","13","../base_unit","14","15","16","17","18","19","mass","time","angle","current","temp","matter","intensity","storage","joule","pascal","Newton","hertz","watt","coulomb","volt","farad","ohm","siemens","weber","tesla","henry","./Newton","./angle","./coulomb","./current","./farad","./henry","./hertz","./intensity","./joule","./length","./mass","./matter","./ohm","./pascal","./siemens","./storage","./temp","./tesla","./time","./volt","./watt","./weber","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","mulPair","cls","inverse","divPair","_loop","36","refinedTypes","37","38","./get_mul_and_div_classes","./get_unitless","./identify_unit","39","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","concat","queueIndex","drainQueue","timeout","len","run","Item","array","noop","process","nextTick","args","Array","apply","title","browser","env","argv","version","versions","addListener","once","off","removeListener","removeAllListeners","emit","binding","name","cwd","chdir","dir","umask","40","global","factory","define","amd","indexOf","callbacks","callback","callbacksFor","object","_promiseCallbacks","configure","config","objectOrFunction","x","isFunction","isMaybeThenable","F","scheduleFlush","entry","payload","guid","id","childGuid","childId","error","stack","instrument","eventName","promise","child","_guidKey","_id","detail","_result","label","_label","timeStamp","now","resolve$1","resolve","withOwnPromise","getThen","then","GET_THEN_ERROR","tryThen","fulfillmentHandler","rejectionHandler","handleForeignThenable","thenable","async","sealed","fulfill","reject","handleOwnThenable","_state","FULFILLED","REJECTED","_onError","subscribe","handleMaybeThenable","maybeThenable","then$$","publishRejection","publish","PENDING","_subscribers","parent","onFulfillment","onRejection","subscribers","settled","invokeCallback","ErrorObject","tryCatch","TRY_CATCH_ERROR","hasCallback","succeeded","failed","initializePromise","resolver","resolved","_arguments","state","result","makeSettledResult","position","Enumerator","input","abortOnReject","_instanceConstructor","_abortOnReject","_validateInput","_input","_remaining","_init","_enumerate","_validationError","all","entries","race","isArray","reject$1","needsResolver","needsNew","Promise","counter","Result","getThen$1","obj","ERROR","tryApply","makeObject","_","argumentNames","_name","arrayResult","wrapThenable","_then","onFulFillment","denodeify","nodeFunc","options","fn","promiseInput","arg","needsPromiseInput","GET_THEN_ERROR$1","p","err","handlePromiseInput","handleValueInput","all$1","AllSettled","_superConstructor","allSettled","race$1","PromiseHash","hash","HashSettled","hashSettled","rethrow","defer","deferred","map","promises","mapFn","values","results","resolve$2","reject$2","resolveAll","resolveSingle","filter","filterFn","filtered","newLength","asap","queue$1","scheduleFlush$1","useNextTick","node","match","setImmediate","flush","useVertxTimer","vertxNext","useSetTimeout","useMutationObserver","iterations","observer","BrowserMutationObserver","document","createTextNode","observe","characterData","data","useMessageChannel","channel","MessageChannel","port1","onmessage","port2","postMessage","attemptVertex","vertx","runOnLoop","runOnContext","_defineProperty","EventTarget","mixin","allCallbacks","index","splice","trigger","_isArray","toString","Date","getTime","o_create","_eachEntry","_settleMaybeThenable","c","_settledAt","_makeResult","_willSettleAt","enumerator","guidKey","cast","after","catch","finally","browserWindow","browserGlobal","MutationObserver","WebKitMutationObserver","isNode","isWorker","Uint8ClampedArray","importScripts","platform","_async$filter","cb","_process"],"mappings":"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","file":"quantify.js","sourcesContent":["/**\n * quantify - Unit Simplifier\n * @version v0.0.1\n * @author Jason Park and Rounak Bastola\n * @link https://github.com/parkjs814/Quantify\n * @license MIT\n */\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nvar _$ = $,\n    extend = _$.extend;\n\n\nmodule.exports = function () {\n  var _this = this;\n\n  this.unitClasses = {};\n\n  this.addUnitClass = function (Unit) {\n    var type = Unit.TYPE;\n    var symbol = Unit.SYMBOL;\n    if (!_this.unitClasses.hasOwnProperty(type)) {\n      _this.unitClasses[type] = {};\n    }\n    _this.unitClasses[type][symbol] = Unit;\n  };\n\n  this.getUnitClass = function (type, symbol) {\n    return _this.unitClasses[type][symbol];\n  };\n\n  this.getDerivedUnitClasses = function () {\n    var unitClasses = _this.getUnitClasses();\n    var derivedUnitClasses = {};\n    for (var unitSymbol in unitClasses) {\n      var unitClass = unitClasses[unitSymbol];\n      if (!unitClass.BASE) {\n        derivedUnitClasses[unitSymbol] = unitClass;\n      }\n    }\n    return derivedUnitClasses;\n  };\n\n  this.getUnitClasses = function () {\n    var unitClasses = {};\n    for (var quantity in _this.unitClasses) {\n      extend(true, unitClasses, _this.unitClasses[quantity]);\n    }\n    return unitClasses;\n  };\n};\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {};\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nvar setupMain = require('./setup_main');\n\nmodule.exports = {\n  setupMain: setupMain\n};\n\n},{\"./setup_main\":4}],4:[function(require,module,exports){\n'use strict';\n\nvar Server = require('../../server');\n\nmodule.exports = function () {\n  Server.search('8.14 kg m2 / s2');\n};\n\n},{\"../../server\":6}],5:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar DOM = require('./dom');\nvar Server = require('./server');\nvar app = require('./app');\nvar App = require('./app/constructor');\nvar Unit = require('./unit');\nvar _$ = $,\n    extend = _$.extend;\n\n// set global promise error handler\n\nRSVP.on('error', function (reason) {\n  console.assert(false, reason);\n});\n\nextend(true, app, new App());\n\nUnit.register();\n\nextend(true, window, {\n  main: DOM.setupMain\n});\n\n},{\"./app\":2,\"./app/constructor\":1,\"./dom\":3,\"./server\":6,\"./unit\":11,\"rsvp\":40}],6:[function(require,module,exports){\n'use strict';\n\nvar search = require('./search');\nvar simplify = require('./simplify');\n\nmodule.exports = {\n  search: search,\n  simplify: simplify\n};\n\n},{\"./search\":7,\"./simplify\":8}],7:[function(require,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Util = require('../util');\nvar app = require('../app');\n\nvar _$ = $,\n    extend = _$.extend;\n\nvar Combination = function () {\n  function Combination(mulTypes, divTypes, unitless) {\n    var countCalculation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    _classCallCheck(this, Combination);\n\n    this.mulTypes = mulTypes;\n    this.divTypes = divTypes;\n    this.unitless = unitless;\n    if (countCalculation) this.calculateCount();\n  }\n\n  _createClass(Combination, [{\n    key: 'calculateCount',\n    value: function calculateCount() {\n      var count = this.mulTypes.length + this.divTypes.length;\n      for (var type in this.unitless.types) {\n        count += Math.abs(this.unitless.types[type]);\n      }\n      this.count = count;\n    }\n  }, {\n    key: 'createMulClassAdded',\n    value: function createMulClassAdded(mulClass) {\n      var new_ = new Combination(this.mulTypes.slice(), this.divTypes.slice(), extend(true, {}, this.unitless), false);\n      new_.mulTypes.push(mulClass.TYPE);\n      var unitless = mulClass.UNITLESS;\n      for (var type in unitless.types) {\n        if (!new_.unitless.types.hasOwnProperty(type)) {\n          new_.unitless.types[type] = +unitless.types[type];\n        } else {\n          new_.unitless.types[type] += unitless.types[type];\n        }\n        if (new_.unitless.types[type] == 0) {\n          delete unitless.types[type];\n        }\n      }\n      new_.unitless.quantity *= unitless.quantity;\n      new_.calculateCount();\n      return new_;\n    }\n  }, {\n    key: 'createDivClassAdded',\n    value: function createDivClassAdded(divClass) {\n      var new_ = new Combination(this.mulTypes.slice(), this.divTypes.slice(), extend(true, {}, this.unitless), false);\n      new_.divTypes.push(divClass.TYPE);\n      var unitless = divClass.UNITLESS;\n      for (var type in unitless.types) {\n        if (!new_.unitless.types.hasOwnProperty(type)) {\n          new_.unitless.types[type] = -unitless.types[type];\n        } else {\n          new_.unitless.types[type] -= unitless.types[type];\n        }\n        if (new_.unitless.types[type] == 0) {\n          delete unitless.types[type];\n        }\n      }\n      new_.unitless.quantity /= unitless.quantity;\n      new_.calculateCount();\n      return new_;\n    }\n  }]);\n\n  return Combination;\n}();\n\nmodule.exports = function (str) {\n  var value = 1;\n  var mulSymbols = ['lb', 'm', 'm'];\n  var divSymbols = ['s', 's'];\n\n  var mulPairs = [];\n  var divPairs = [];\n  mulSymbols.forEach(function (mul) {\n    var mulClass = Util.identifyUnit(mul);\n    mulPairs.push([mulClass.TYPE, mulClass.SYMBOL]);\n  });\n  divSymbols.forEach(function (div) {\n    var divClass = Util.identifyUnit(div);\n    divPairs.push([divClass.TYPE, divClass.SYMBOL]);\n  });\n\n  var _Util$getMulAndDivCla = Util.getMulAndDivClasses(mulPairs, divPairs),\n      mulClasses = _Util$getMulAndDivCla.mulClasses,\n      divClasses = _Util$getMulAndDivCla.divClasses;\n\n  var unitless = Util.getUnitless(mulClasses, divClasses);\n  var queue = [new Combination([], [], unitless)];\n\n  var derivedUnitClasses = app.getDerivedUnitClasses();\n  console.log(derivedUnitClasses);\n  var minCount = 0x7fffffff;\n  var minCombinations = [];\n  while (queue.length > 0) {\n    var e = queue.shift();\n    console.log(e);\n    if (minCount > e.count) {\n      minCount = e.count;\n      minCombinations = [e];\n    } else if (minCount == e.count) {\n      minCombinations.push(e);\n    }\n    if (e.mulTypes.length + e.divTypes.length < 1) {\n      for (var unitSymbol in derivedUnitClasses) {\n        var unitClass = derivedUnitClasses[unitSymbol];\n        queue.push(e.createMulClassAdded(unitClass));\n        queue.push(e.createDivClassAdded(unitClass));\n      }\n    }\n  }\n  console.log(minCombinations);\n};\n\n},{\"../app\":2,\"../util\":38}],8:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\nvar Util = require('../util');\n\nmodule.exports = function (muls, divs, val) {};\n\n},{\"../app\":2,\"../util\":38}],9:[function(require,module,exports){\n'use strict';\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar app = require('../app');\n\nvar BaseUnit = function BaseUnit(value) {\n  _classCallCheck(this, BaseUnit);\n\n  this.value = value;\n};\n\nBaseUnit.BASE = BaseUnit.prototype.base = true;\nBaseUnit.QUANTITY = BaseUnit.prototype.quantity = 1;\n\nBaseUnit.register = function (type, symbol) {\n  var quantity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var parentSymbol = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var ParentUnit = parentSymbol ? app.getUnitClass(type, parentSymbol) : BaseUnit;\n  quantity *= ParentUnit.QUANTITY;\n\n  var Unit = function (_ParentUnit) {\n    _inherits(Unit, _ParentUnit);\n\n    function Unit(value) {\n      _classCallCheck(this, Unit);\n\n      return _possibleConstructorReturn(this, (Unit.__proto__ || Object.getPrototypeOf(Unit)).call(this, value));\n    }\n\n    return Unit;\n  }(ParentUnit);\n\n  Unit.TYPE = Unit.prototype.type = type;\n  Unit.SYMBOL = Unit.prototype.symbol = symbol;\n  Unit.QUANTITY = Unit.prototype.quantity = quantity;\n  Unit.UNITLESS = { types: {}, quantity: quantity };\n  Unit.UNITLESS.types[type] = 1;\n\n  app.addUnitClass(Unit);\n};\n\nmodule.exports = BaseUnit;\n\n},{\"../app\":2}],10:[function(require,module,exports){\n'use strict';\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar app = require('../app');\nvar Util = require('../util');\n\nvar DerivedUnit = function DerivedUnit(value) {\n  _classCallCheck(this, DerivedUnit);\n\n  this.value = value;\n};\n\nDerivedUnit.BASE = DerivedUnit.prototype.base = false;\nDerivedUnit.QUANTITY = DerivedUnit.prototype.quantity = 1;\n\nDerivedUnit.register = function (type, symbol, mulPairs, divPairs) {\n  var quantity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var parentSymbol = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n\n  var _Util$getMulAndDivCla = Util.getMulAndDivClasses(mulPairs, divPairs),\n      mulClasses = _Util$getMulAndDivCla.mulClasses,\n      divClasses = _Util$getMulAndDivCla.divClasses;\n\n  var ParentUnit = parentSymbol ? app.getUnitClass(type, parentSymbol) : DerivedUnit;\n  quantity *= ParentUnit.QUANTITY;\n\n  var Unit = function (_ParentUnit) {\n    _inherits(Unit, _ParentUnit);\n\n    function Unit(value) {\n      _classCallCheck(this, Unit);\n\n      return _possibleConstructorReturn(this, (Unit.__proto__ || Object.getPrototypeOf(Unit)).call(this, value));\n    }\n\n    return Unit;\n  }(ParentUnit);\n\n  Unit.TYPE = Unit.prototype.type = type;\n  Unit.SYMBOL = Unit.prototype.symbol = symbol;\n  Unit.MULS = Unit.prototype.muls = mulClasses;\n  Unit.DIVS = Unit.prototype.divs = divClasses;\n  Unit.QUANTITY = Unit.prototype.quantity = quantity;\n  Unit.UNITLESS = Util.getUnitless(mulClasses, divClasses);\n\n  app.addUnitClass(Unit);\n};\n\nmodule.exports = DerivedUnit;\n\n},{\"../app\":2,\"../util\":38}],11:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('./base_unit');\nvar DerivedUnit = require('./derived_unit');\nvar register = require('./register');\n\nmodule.exports = {\n  BaseUnit: BaseUnit,\n  DerivedUnit: DerivedUnit,\n  register: register\n};\n\n},{\"./base_unit\":9,\"./derived_unit\":10,\"./register\":19}],12:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'Newton';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'N', [['mass', 'kg'], ['length', 'm']], [['time', 's'], ['time', 's']]);\n};\n\n},{\"../derived_unit\":10}],13:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'angle';\n\nmodule.exports = function () {\n  BaseUnit.register(type, '', 1);\n  BaseUnit.register(type, 'rad', 1);\n  BaseUnit.register(type, '°', 57.2958, '');\n};\n\n},{\"../base_unit\":9}],14:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'coulomb';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'J', [['current', 'A'], ['time', 's']], []);\n};\n\n},{\"../derived_unit\":10}],15:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'current';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'A', 1);\n  BaseUnit.register(type, 'cA', 1e-2, 'A');\n  BaseUnit.register(type, 'kA', 1e3, 'A');\n  BaseUnit.register(type, 'mA', 1e-3, 'A');\n  BaseUnit.register(type, 'µA', 1e-6, 'A');\n  BaseUnit.register(type, 'nA', 1e-9, 'A');\n  BaseUnit.register(type, 'pA', 1e-12, 'A');\n};\n\n},{\"../base_unit\":9}],16:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'farad';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'F', [['time', 's'], ['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']], [['mass', 'kg'], ['length', 'm'], ['length', 'm']]);\n};\n\n},{\"../derived_unit\":10}],17:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'henry';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'H', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']]);\n};\n\n},{\"../derived_unit\":10}],18:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'hertz';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'Hz', [], [['time', 's']]);\n};\n\n},{\"../derived_unit\":10}],19:[function(require,module,exports){\n'use strict';\n\nvar length = require('./length');\nvar mass = require('./mass');\nvar time = require('./time');\nvar angle = require('./angle');\nvar current = require('./current');\nvar temp = require('./temp');\nvar matter = require('./matter');\nvar intensity = require('./intensity');\nvar storage = require('./storage');\nvar joule = require('./joule');\nvar pascal = require('./pascal');\nvar Newton = require('./Newton');\nvar hertz = require('./hertz');\nvar watt = require('./watt');\nvar coulomb = require('./coulomb');\nvar volt = require('./volt');\nvar farad = require('./farad');\nvar ohm = require('./ohm');\nvar siemens = require('./siemens');\nvar weber = require('./weber');\nvar tesla = require('./tesla');\nvar henry = require('./henry');\n\nmodule.exports = function () {\n  length();\n  mass();\n  time();\n  angle();\n  current();\n  temp();\n  matter();\n  intensity();\n  storage();\n  joule();\n  pascal();\n  Newton();\n  hertz();\n  watt();\n  coulomb();\n  volt();\n  farad();\n  ohm();\n  siemens();\n  weber();\n  tesla();\n  henry();\n};\n\n},{\"./Newton\":12,\"./angle\":13,\"./coulomb\":14,\"./current\":15,\"./farad\":16,\"./henry\":17,\"./hertz\":18,\"./intensity\":20,\"./joule\":21,\"./length\":22,\"./mass\":23,\"./matter\":24,\"./ohm\":25,\"./pascal\":26,\"./siemens\":27,\"./storage\":28,\"./temp\":29,\"./tesla\":30,\"./time\":31,\"./volt\":32,\"./watt\":33,\"./weber\":34}],20:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'intensity';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'cd', 1);\n};\n\n},{\"../base_unit\":9}],21:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'joule';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'J', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's']]);\n};\n\n},{\"../derived_unit\":10}],22:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'length';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'm', 1);\n  BaseUnit.register(type, 'cm', 1e-2, 'm');\n  BaseUnit.register(type, 'km', 1e3, 'm');\n  BaseUnit.register(type, 'mm', 1e-3, 'm');\n  BaseUnit.register(type, 'µm', 1e-6, 'm');\n  BaseUnit.register(type, 'nm', 1e-9, 'm');\n  BaseUnit.register(type, 'pm', 1e-12, 'm');\n  BaseUnit.register(type, 'ft', 0.3048, 'm');\n  BaseUnit.register(type, 'yd', 3.000, 'ft');\n  BaseUnit.register(type, 'mi', 1760, 'yd');\n  BaseUnit.register(type, 'in', 1.5783e-5, 'mi');\n};\n\n},{\"../base_unit\":9}],23:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'mass';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'g', 1);\n  BaseUnit.register(type, 'dg', 1e-1, 'g');\n  BaseUnit.register(type, 'cg', 1e-2, 'g');\n  BaseUnit.register(type, 'kg', 1e3, 'g');\n  BaseUnit.register(type, 'mg', 1e-3, 'g');\n  BaseUnit.register(type, 'ng', 1e-9, 'g');\n  BaseUnit.register(type, 'pg', 1e-12, 'g');\n  BaseUnit.register(type, 'lb', 453.59237, 'g');\n  BaseUnit.register(type, 'oz', 0.0625, 'lb');\n};\n\n},{\"../base_unit\":9}],24:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'matter';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'mol', 1);\n  BaseUnit.register(type, 'atoms', 6.02e23, 'mol');\n};\n\n},{\"../base_unit\":9}],25:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'ohm';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'Ω', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']]);\n};\n\n},{\"../derived_unit\":10}],26:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'pascal';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'Pa', [['mass', 'kg']], [['length', 'm'], ['time', 's'], ['time', 's']]);\n};\n\n},{\"../derived_unit\":10}],27:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'siemens';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'S', [['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A'], ['current', 'A']], [['mass', 'kg'], ['length', 'm'], ['length', 'm']]);\n};\n\n},{\"../derived_unit\":10}],28:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'storage';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'bit', 1);\n  BaseUnit.register(type, 'byte', 0.125, 'bit');\n  BaseUnit.register(type, 'kbyte', 1e3, 'byte');\n  BaseUnit.register(type, 'Mbyte', 1e6, 'byte');\n  BaseUnit.register(type, 'Gbyte', 1e9, 'byte');\n  BaseUnit.register(type, 'Tbyte', 1e12, 'byte');\n  BaseUnit.register(type, 'Pm', 1e15, 'byte');\n  BaseUnit.register(type, 'Ebyte', 1e18, 'byte');\n  BaseUnit.register(type, 'Zbyte', 1e21, 'byte');\n  BaseUnit.register(type, 'Ybyte', 1e24, 'byte');\n};\n\n},{\"../base_unit\":9}],29:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'temp';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 'K', 1);\n  BaseUnit.register(type, '°C', 1, 'K'); // TODO\n  BaseUnit.register(type, '°F', 9 / 5, '°C');\n};\n\n},{\"../base_unit\":9}],30:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'telsa';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'T', [['mass', 'kg']], [['time', 's'], ['time', 's'], ['current', 'A']]);\n};\n\n},{\"../derived_unit\":10}],31:[function(require,module,exports){\n'use strict';\n\nvar BaseUnit = require('../base_unit');\n\nvar type = 'time';\n\nmodule.exports = function () {\n  BaseUnit.register(type, 's', 1);\n  BaseUnit.register(type, 'ds', 1e-1, 's');\n  BaseUnit.register(type, 'cs', 1e-2, 's');\n  BaseUnit.register(type, 'ks', 1e3, 's');\n  BaseUnit.register(type, 'ms', 1e-3, 's');\n  BaseUnit.register(type, 'µs', 1e-6, 's');\n  BaseUnit.register(type, 'ns', 1e-9, 's');\n  BaseUnit.register(type, 'ps', 1e-12, 's');\n  BaseUnit.register(type, 'min', 60, 's');\n  BaseUnit.register(type, 'hr', 60, 'min');\n  BaseUnit.register(type, 'd', 24, 'hr');\n  BaseUnit.register(type, 'w', 7, 'd');\n  BaseUnit.register(type, 'mon', 4, 'w');\n};\n\n},{\"../base_unit\":9}],32:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'volt';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'V', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['time', 's'], ['current', 'A']]);\n};\n\n},{\"../derived_unit\":10}],33:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'watt';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'W', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['time', 's']]);\n};\n\n},{\"../derived_unit\":10}],34:[function(require,module,exports){\n'use strict';\n\nvar DerivedUnit = require('../derived_unit');\n\nvar type = 'weber';\n\nmodule.exports = function () {\n  DerivedUnit.register(type, 'Wb', [['mass', 'kg'], ['length', 'm'], ['length', 'm']], [['time', 's'], ['time', 's'], ['current', 'A']]);\n};\n\n},{\"../derived_unit\":10}],35:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\n\nmodule.exports = function (mulPairs, divPairs) {\n  var mulClasses = [];\n  var divClasses = [];\n\n  var queue = [];\n  mulPairs.forEach(function (mulPair) {\n    var type = mulPair[0];\n    var symbol = mulPair[1];\n    queue.push({\n      cls: app.getUnitClass(type, symbol),\n      inverse: false\n    });\n  });\n  divPairs.forEach(function (divPair) {\n    var type = divPair[0];\n    var symbol = divPair[1];\n    queue.push({\n      cls: app.getUnitClass(type, symbol),\n      inverse: true\n    });\n  });\n\n  var _loop = function _loop() {\n    var e = queue.shift();\n    if (e.cls.BASE) {\n      (e.inverse ? divClasses : mulClasses).push(e.cls);\n    } else {\n      e.cls.MULS.forEach(function (mulClass) {\n        queue.push({\n          cls: mulClass,\n          inverse: e.inverse\n        });\n      });\n      e.cls.DIVS.forEach(function (divClass) {\n        queue.push({\n          cls: divClass,\n          inverse: !e.inverse\n        });\n      });\n    }\n  };\n\n  while (queue.length > 0) {\n    _loop();\n  }\n\n  return { mulClasses: mulClasses, divClasses: divClasses };\n};\n\n},{\"../app\":2}],36:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (mulClasses, divClasses) {\n  var quantity = 1;\n  var types = {};\n  mulClasses.forEach(function (mulClass) {\n    quantity *= mulClass.QUANTITY;\n    if (types.hasOwnProperty(mulClass.TYPE)) {\n      types[mulClass.TYPE]++;\n    } else {\n      types[mulClass.TYPE] = 1;\n    }\n  });\n  divClasses.forEach(function (divClass) {\n    quantity /= divClass.QUANTITY;\n    if (types.hasOwnProperty(divClass.TYPE)) {\n      types[divClass.TYPE]--;\n    } else {\n      types[divClass.TYPE] = -1;\n    }\n  });\n  var refinedTypes = {};\n  for (var type in types) {\n    var n = types[type];\n    if (n != 0) refinedTypes[type] = n;\n  }\n\n  return { types: types, quantity: quantity };\n};\n\n},{}],37:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\n\nmodule.exports = function (symbol) {\n  var unitClasses = app.getUnitClasses();\n  for (var unitSymbol in unitClasses) {\n    var unitClass = unitClasses[unitSymbol];\n    if (unitClass.SYMBOL == symbol) return unitClass;\n  }\n};\n\n},{\"../app\":2}],38:[function(require,module,exports){\n'use strict';\n\nvar getMulAndDivClasses = require('./get_mul_and_div_classes');\nvar identifyUnit = require('./identify_unit');\nvar getUnitless = require('./get_unitless');\n\nmodule.exports = {\n  getMulAndDivClasses: getMulAndDivClasses,\n  identifyUnit: identifyUnit,\n  getUnitless: getUnitless\n};\n\n},{\"./get_mul_and_div_classes\":35,\"./get_unitless\":36,\"./identify_unit\":37}],39:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],40:[function(require,module,exports){\n(function (process,global){\n/*!\n * @overview RSVP - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2016 Yehuda Katz, Tom Dale, Stefan Penner and contributors\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/tildeio/rsvp.js/master/LICENSE\n * @version   3.3.3\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.RSVP = global.RSVP || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction indexOf(callbacks, callback) {\n  for (var i = 0, l = callbacks.length; i < l; i++) {\n    if (callbacks[i] === callback) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction callbacksFor(object) {\n  var callbacks = object._promiseCallbacks;\n\n  if (!callbacks) {\n    callbacks = object._promiseCallbacks = {};\n  }\n\n  return callbacks;\n}\n\n/**\n  @class RSVP.EventTarget\n*/\nvar EventTarget = {\n\n  /**\n    `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\n    Example:\n     ```javascript\n    let object = {};\n     RSVP.EventTarget.mixin(object);\n     object.on('finished', function(event) {\n      // handle event\n    });\n     object.trigger('finished', { detail: value });\n    ```\n     `EventTarget.mixin` also works with prototypes:\n     ```javascript\n    let Person = function() {};\n    RSVP.EventTarget.mixin(Person.prototype);\n     let yehuda = new Person();\n    let tom = new Person();\n     yehuda.on('poke', function(event) {\n      console.log('Yehuda says OW');\n    });\n     tom.on('poke', function(event) {\n      console.log('Tom says OW');\n    });\n     yehuda.trigger('poke');\n    tom.trigger('poke');\n    ```\n     @method mixin\n    @for RSVP.EventTarget\n    @private\n    @param {Object} object object to extend with EventTarget methods\n  */\n  mixin: function mixin(object) {\n    object['on'] = this['on'];\n    object['off'] = this['off'];\n    object['trigger'] = this['trigger'];\n    object._promiseCallbacks = undefined;\n    return object;\n  },\n\n  /**\n    Registers a callback to be executed when `eventName` is triggered\n     ```javascript\n    object.on('event', function(eventInfo){\n      // handle the event\n    });\n     object.trigger('event');\n    ```\n     @method on\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to listen for\n    @param {Function} callback function to be called when the event is triggered.\n  */\n  on: function on(eventName, callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback must be a function');\n    }\n\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined;\n\n    callbacks = allCallbacks[eventName];\n\n    if (!callbacks) {\n      callbacks = allCallbacks[eventName] = [];\n    }\n\n    if (indexOf(callbacks, callback) === -1) {\n      callbacks.push(callback);\n    }\n  },\n\n  /**\n    You can use `off` to stop firing a particular callback for an event:\n     ```javascript\n    function doStuff() { // do stuff! }\n    object.on('stuff', doStuff);\n     object.trigger('stuff'); // doStuff will be called\n     // Unregister ONLY the doStuff callback\n    object.off('stuff', doStuff);\n    object.trigger('stuff'); // doStuff will NOT be called\n    ```\n     If you don't pass a `callback` argument to `off`, ALL callbacks for the\n    event will not be executed when the event fires. For example:\n     ```javascript\n    let callback1 = function(){};\n    let callback2 = function(){};\n     object.on('stuff', callback1);\n    object.on('stuff', callback2);\n     object.trigger('stuff'); // callback1 and callback2 will be executed.\n     object.off('stuff');\n    object.trigger('stuff'); // callback1 and callback2 will not be executed!\n    ```\n     @method off\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName event to stop listening to\n    @param {Function} callback optional argument. If given, only the function\n    given will be removed from the event's callback queue. If no `callback`\n    argument is given, all callbacks will be removed from the event's callback\n    queue.\n  */\n  off: function off(eventName, callback) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        index = undefined;\n\n    if (!callback) {\n      allCallbacks[eventName] = [];\n      return;\n    }\n\n    callbacks = allCallbacks[eventName];\n\n    index = indexOf(callbacks, callback);\n\n    if (index !== -1) {\n      callbacks.splice(index, 1);\n    }\n  },\n\n  /**\n    Use `trigger` to fire custom events. For example:\n     ```javascript\n    object.on('foo', function(){\n      console.log('foo event happened!');\n    });\n    object.trigger('foo');\n    // 'foo event happened!' logged to the console\n    ```\n     You can also pass a value as a second argument to `trigger` that will be\n    passed as an argument to all event listeners for the event:\n     ```javascript\n    object.on('foo', function(value){\n      console.log(value.name);\n    });\n     object.trigger('foo', { name: 'bar' });\n    // 'bar' logged to the console\n    ```\n     @method trigger\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to be triggered\n    @param {*} options optional value to be passed to any event handlers for\n    the given `eventName`\n  */\n  trigger: function trigger(eventName, options, label) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        callback = undefined;\n\n    if (callbacks = allCallbacks[eventName]) {\n      // Don't cache the callbacks.length since it may grow\n      for (var i = 0; i < callbacks.length; i++) {\n        callback = callbacks[i];\n\n        callback(options, label);\n      }\n    }\n  }\n};\n\nvar config = {\n  instrument: false\n};\n\nEventTarget['mixin'](config);\n\nfunction configure(name, value) {\n  if (name === 'onerror') {\n    // handle for legacy users that expect the actual\n    // error to be passed to their function added via\n    // `RSVP.configure('onerror', someFunctionHere);`\n    config['on']('error', value);\n    return;\n  }\n\n  if (arguments.length === 2) {\n    config[name] = value;\n  } else {\n    return config[name];\n  }\n}\n\nfunction objectOrFunction(x) {\n  return typeof x === 'function' || typeof x === 'object' && x !== null;\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nfunction isMaybeThenable(x) {\n  return typeof x === 'object' && x !== null;\n}\n\nvar _isArray = undefined;\nif (!Array.isArray) {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n} else {\n  _isArray = Array.isArray;\n}\n\nvar isArray = _isArray;\n\n// Date.now is not available in browsers < IE9\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility\nvar now = Date.now || function () {\n  return new Date().getTime();\n};\n\nfunction F() {}\n\nvar o_create = Object.create || function (o) {\n  if (arguments.length > 1) {\n    throw new Error('Second argument not supported');\n  }\n  if (typeof o !== 'object') {\n    throw new TypeError('Argument must be an object');\n  }\n  F.prototype = o;\n  return new F();\n};\n\nvar queue = [];\n\nfunction scheduleFlush() {\n  setTimeout(function () {\n    for (var i = 0; i < queue.length; i++) {\n      var entry = queue[i];\n\n      var payload = entry.payload;\n\n      payload.guid = payload.key + payload.id;\n      payload.childGuid = payload.key + payload.childId;\n      if (payload.error) {\n        payload.stack = payload.error.stack;\n      }\n\n      config['trigger'](entry.name, entry.payload);\n    }\n    queue.length = 0;\n  }, 50);\n}\nfunction instrument(eventName, promise, child) {\n  if (1 === queue.push({\n    name: eventName,\n    payload: {\n      key: promise._guidKey,\n      id: promise._id,\n      eventName: eventName,\n      detail: promise._result,\n      childId: child && child._id,\n      label: promise._label,\n      timeStamp: now(),\n      error: config[\"instrument-with-stack\"] ? new Error(promise._label) : null\n    } })) {\n    scheduleFlush();\n  }\n}\n\n/**\n  `RSVP.Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {*} object value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop, label);\n  resolve(promise, object);\n  return promise;\n}\n\nfunction withOwnPromise() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then) {\n  config.async(function (promise) {\n    var sealed = false;\n    var error = tryThen(then, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    thenable._onError = null;\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$) {\n  if (maybeThenable.constructor === promise.constructor && then$$ === then && promise.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$ === GET_THEN_ERROR) {\n      reject(promise, GET_THEN_ERROR.error);\n    } else if (then$$ === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$)) {\n      handleForeignThenable(promise, maybeThenable, then$$);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    fulfill(promise, value);\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onError) {\n    promise._onError(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length === 0) {\n    if (config.instrument) {\n      instrument('fulfilled', promise);\n    }\n  } else {\n    config.async(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n  config.async(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var subscribers = parent._subscribers;\n  var length = subscribers.length;\n\n  parent._onError = null;\n\n  subscribers[length] = child;\n  subscribers[length + FULFILLED] = onFulfillment;\n  subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    config.async(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (config.instrument) {\n    instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);\n  }\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = undefined,\n      callback = undefined,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = undefined,\n      error = undefined,\n      succeeded = undefined,\n      failed = undefined;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, withOwnPromise());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n      resolve(promise, value);\n    } else if (failed) {\n      reject(promise, error);\n    } else if (settled === FULFILLED) {\n      fulfill(promise, value);\n    } else if (settled === REJECTED) {\n      reject(promise, value);\n    }\n}\n\nfunction initializePromise(promise, resolver) {\n  var resolved = false;\n  try {\n    resolver(function (value) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      resolve(promise, value);\n    }, function (reason) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nfunction then(onFulfillment, onRejection, label) {\n  var _arguments = arguments;\n\n  var parent = this;\n  var state = parent._state;\n\n  if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {\n    config.instrument && instrument('chained', parent, parent);\n    return parent;\n  }\n\n  parent._onError = null;\n\n  var child = new parent.constructor(noop, label);\n  var result = parent._result;\n\n  config.instrument && instrument('chained', parent, child);\n\n  if (state) {\n    (function () {\n      var callback = _arguments[state - 1];\n      config.async(function () {\n        return invokeCallback(state, child, callback, result);\n      });\n    })();\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\nfunction makeSettledResult(state, position, value) {\n  if (state === FULFILLED) {\n    return {\n      state: 'fulfilled',\n      value: value\n    };\n  } else {\n    return {\n      state: 'rejected',\n      reason: value\n    };\n  }\n}\n\nfunction Enumerator(Constructor, input, abortOnReject, label) {\n  this._instanceConstructor = Constructor;\n  this.promise = new Constructor(noop, label);\n  this._abortOnReject = abortOnReject;\n\n  if (this._validateInput(input)) {\n    this._input = input;\n    this.length = input.length;\n    this._remaining = input.length;\n\n    this._init();\n\n    if (this.length === 0) {\n      fulfill(this.promise, this._result);\n    } else {\n      this.length = this.length || 0;\n      this._enumerate();\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    }\n  } else {\n    reject(this.promise, this._validationError());\n  }\n}\n\nEnumerator.prototype._validateInput = function (input) {\n  return isArray(input);\n};\n\nEnumerator.prototype._validationError = function () {\n  return new Error('Array Methods must be provided an Array');\n};\n\nEnumerator.prototype._init = function () {\n  this._result = new Array(this.length);\n};\n\nEnumerator.prototype._enumerate = function () {\n  var length = this.length;\n  var promise = this.promise;\n  var input = this._input;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    this._eachEntry(input[i], i);\n  }\n};\n\nEnumerator.prototype._settleMaybeThenable = function (entry, i) {\n  var c = this._instanceConstructor;\n  var resolve = c.resolve;\n\n  if (resolve === resolve$1) {\n    var then$$ = getThen(entry);\n\n    if (then$$ === then && entry._state !== PENDING) {\n      entry._onError = null;\n      this._settledAt(entry._state, i, entry._result);\n    } else if (typeof then$$ !== 'function') {\n      this._remaining--;\n      this._result[i] = this._makeResult(FULFILLED, i, entry);\n    } else if (c === Promise) {\n      var promise = new c(noop);\n      handleMaybeThenable(promise, entry, then$$);\n      this._willSettleAt(promise, i);\n    } else {\n      this._willSettleAt(new c(function (resolve) {\n        return resolve(entry);\n      }), i);\n    }\n  } else {\n    this._willSettleAt(resolve(entry), i);\n  }\n};\n\nEnumerator.prototype._eachEntry = function (entry, i) {\n  if (isMaybeThenable(entry)) {\n    this._settleMaybeThenable(entry, i);\n  } else {\n    this._remaining--;\n    this._result[i] = this._makeResult(FULFILLED, i, entry);\n  }\n};\n\nEnumerator.prototype._settledAt = function (state, i, value) {\n  var promise = this.promise;\n\n  if (promise._state === PENDING) {\n    this._remaining--;\n\n    if (this._abortOnReject && state === REJECTED) {\n      reject(promise, value);\n    } else {\n      this._result[i] = this._makeResult(state, i, value);\n    }\n  }\n\n  if (this._remaining === 0) {\n    fulfill(promise, this._result);\n  }\n};\n\nEnumerator.prototype._makeResult = function (state, i, value) {\n  return value;\n};\n\nEnumerator.prototype._willSettleAt = function (promise, i) {\n  var enumerator = this;\n\n  subscribe(promise, undefined, function (value) {\n    return enumerator._settledAt(FULFILLED, i, value);\n  }, function (reason) {\n    return enumerator._settledAt(REJECTED, i, reason);\n  });\n};\n\n/**\n  `RSVP.Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error(\"2\"));\n  let promise3 = RSVP.reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries, label) {\n  return new Enumerator(this, entries, true, /* abort on reject */label).promise;\n}\n\n/**\n  `RSVP.Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `RSVP.Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  RSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} entries array of promises to observe\n  @param {String} label optional string for describing the promise returned.\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  var promise = new Constructor(noop, label);\n\n  if (!isArray(entries)) {\n    reject(promise, new TypeError('You must pass an array to race.'));\n    return promise;\n  }\n\n  for (var i = 0; promise._state === PENDING && i < entries.length; i++) {\n    subscribe(Constructor.resolve(entries[i]), undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n\n  return promise;\n}\n\n/**\n  `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop, label);\n  reject(promise, reason);\n  return promise;\n}\n\nvar guidKey = 'rsvp_' + now() + '-';\nvar counter = 0;\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise’s eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class RSVP.Promise\n  @param {function} resolver\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @constructor\n*/\nfunction Promise(resolver, label) {\n  this._id = counter++;\n  this._label = label;\n  this._state = undefined;\n  this._result = undefined;\n  this._subscribers = [];\n\n  config.instrument && instrument('created', this);\n\n  if (noop !== resolver) {\n    typeof resolver !== 'function' && needsResolver();\n    this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n  }\n}\n\nPromise.cast = resolve$1; // deprecated\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = resolve$1;\nPromise.reject = reject$1;\n\nPromise.prototype = {\n  constructor: Promise,\n\n  _guidKey: guidKey,\n\n  _onError: function _onError(reason) {\n    var promise = this;\n    config.after(function () {\n      if (promise._onError) {\n        config['trigger']('error', reason, promise._label);\n      }\n    });\n  },\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we\\'re unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we\\'re unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfillment\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  then: then,\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn\\'t find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'catch': function _catch(onRejection, label) {\n    return this.then(undefined, onRejection, label);\n  },\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'finally': function _finally(callback, label) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    return promise.then(function (value) {\n      return constructor.resolve(callback()).then(function () {\n        return value;\n      });\n    }, function (reason) {\n      return constructor.resolve(callback()).then(function () {\n        throw reason;\n      });\n    }, label);\n  }\n};\n\nfunction Result() {\n  this.value = undefined;\n}\n\nvar ERROR = new Result();\nvar GET_THEN_ERROR$1 = new Result();\n\nfunction getThen$1(obj) {\n  try {\n    return obj.then;\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction tryApply(f, s, a) {\n  try {\n    f.apply(s, a);\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction makeObject(_, argumentNames) {\n  var obj = {};\n  var length = _.length;\n  var args = new Array(length);\n\n  for (var x = 0; x < length; x++) {\n    args[x] = _[x];\n  }\n\n  for (var i = 0; i < argumentNames.length; i++) {\n    var _name = argumentNames[i];\n    obj[_name] = args[i + 1];\n  }\n\n  return obj;\n}\n\nfunction arrayResult(_) {\n  var length = _.length;\n  var args = new Array(length - 1);\n\n  for (var i = 1; i < length; i++) {\n    args[i - 1] = _[i];\n  }\n\n  return args;\n}\n\nfunction wrapThenable(_then, promise) {\n  return {\n    then: function then(onFulFillment, onRejection) {\n      return _then.call(promise, onFulFillment, onRejection);\n    }\n  };\n}\n\n/**\n  `RSVP.denodeify` takes a 'node-style' function and returns a function that\n  will return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\n  browser when you'd prefer to use promises over using callbacks. For example,\n  `denodeify` transforms the following:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) return handleError(err);\n    handleData(data);\n  });\n  ```\n\n  into:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n\n  readFile('myfile.txt').then(handleData, handleError);\n  ```\n\n  If the node function has multiple success parameters, then `denodeify`\n  just returns the first one:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'));\n\n  request('http://example.com').then(function(res) {\n    // ...\n  });\n  ```\n\n  However, if you need all success parameters, setting `denodeify`'s\n  second parameter to `true` causes it to return all success parameters\n  as an array:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), true);\n\n  request('http://example.com').then(function(result) {\n    // result[0] -> res\n    // result[1] -> body\n  });\n  ```\n\n  Or if you pass it an array with names it returns the parameters as a hash:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), ['res', 'body']);\n\n  request('http://example.com').then(function(result) {\n    // result.res\n    // result.body\n  });\n  ```\n\n  Sometimes you need to retain the `this`:\n\n  ```javascript\n  let app = require('express')();\n  let render = RSVP.denodeify(app.render.bind(app));\n  ```\n\n  The denodified function inherits from the original function. It works in all\n  environments, except IE 10 and below. Consequently all properties of the original\n  function are available to you. However, any properties you change on the\n  denodeified function won't be changed on the original function. Example:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request')),\n      cookieJar = request.jar(); // <- Inheritance is used here\n\n  request('http://example.com', {jar: cookieJar}).then(function(res) {\n    // cookieJar.cookies holds now the cookies returned by example.com\n  });\n  ```\n\n  Using `denodeify` makes it easier to compose asynchronous operations instead\n  of using callbacks. For example, instead of:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) { ... } // Handle error\n    fs.writeFile('myfile2.txt', data, function(err){\n      if (err) { ... } // Handle error\n      console.log('done')\n    });\n  });\n  ```\n\n  you can chain the operations together using `then` from the returned promise:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n  let writeFile = RSVP.denodeify(fs.writeFile);\n\n  readFile('myfile.txt').then(function(data){\n    return writeFile('myfile2.txt', data);\n  }).then(function(){\n    console.log('done')\n  }).catch(function(error){\n    // Handle error\n  });\n  ```\n\n  @method denodeify\n  @static\n  @for RSVP\n  @param {Function} nodeFunc a 'node-style' function that takes a callback as\n  its last argument. The callback expects an error to be passed as its first\n  argument (if an error occurred, otherwise null), and the value from the\n  operation as its second argument ('function(err, value){ }').\n  @param {Boolean|Array} [options] An optional paramter that if set\n  to `true` causes the promise to fulfill with the callback's success arguments\n  as an array. This is useful if the node function has multiple success\n  paramters. If you set this paramter to an array with names, the promise will\n  fulfill with a hash with these names as keys and the success parameters as\n  values.\n  @return {Function} a function that wraps `nodeFunc` to return an\n  `RSVP.Promise`\n  @static\n*/\nfunction denodeify(nodeFunc, options) {\n  var fn = function fn() {\n    var self = this;\n    var l = arguments.length;\n    var args = new Array(l + 1);\n    var promiseInput = false;\n\n    for (var i = 0; i < l; ++i) {\n      var arg = arguments[i];\n\n      if (!promiseInput) {\n        // TODO: clean this up\n        promiseInput = needsPromiseInput(arg);\n        if (promiseInput === GET_THEN_ERROR$1) {\n          var p = new Promise(noop);\n          reject(p, GET_THEN_ERROR$1.value);\n          return p;\n        } else if (promiseInput && promiseInput !== true) {\n          arg = wrapThenable(promiseInput, arg);\n        }\n      }\n      args[i] = arg;\n    }\n\n    var promise = new Promise(noop);\n\n    args[l] = function (err, val) {\n      if (err) reject(promise, err);else if (options === undefined) resolve(promise, val);else if (options === true) resolve(promise, arrayResult(arguments));else if (isArray(options)) resolve(promise, makeObject(arguments, options));else resolve(promise, val);\n    };\n\n    if (promiseInput) {\n      return handlePromiseInput(promise, args, nodeFunc, self);\n    } else {\n      return handleValueInput(promise, args, nodeFunc, self);\n    }\n  };\n\n  fn.__proto__ = nodeFunc;\n\n  return fn;\n}\n\nfunction handleValueInput(promise, args, nodeFunc, self) {\n  var result = tryApply(nodeFunc, self, args);\n  if (result === ERROR) {\n    reject(promise, result.value);\n  }\n  return promise;\n}\n\nfunction handlePromiseInput(promise, args, nodeFunc, self) {\n  return Promise.all(args).then(function (args) {\n    var result = tryApply(nodeFunc, self, args);\n    if (result === ERROR) {\n      reject(promise, result.value);\n    }\n    return promise;\n  });\n}\n\nfunction needsPromiseInput(arg) {\n  if (arg && typeof arg === 'object') {\n    if (arg.constructor === Promise) {\n      return true;\n    } else {\n      return getThen$1(arg);\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.all`.\n\n  @method all\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n*/\nfunction all$1(array, label) {\n  return Promise.all(array, label);\n}\n\nfunction AllSettled(Constructor, entries, label) {\n  this._superConstructor(Constructor, entries, false, /* don't abort on reject */label);\n}\n\nAllSettled.prototype = o_create(Enumerator.prototype);\nAllSettled.prototype._superConstructor = Enumerator;\nAllSettled.prototype._makeResult = makeSettledResult;\nAllSettled.prototype._validationError = function () {\n  return new Error('allSettled must be called with an array');\n};\n\n/**\n  `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\n  a fail-fast method, it waits until all the promises have returned and\n  shows you all the results. This is useful if you want to handle multiple\n  promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled. The return promise is fulfilled with an array of the states of\n  the promises passed into the `promises` array argument.\n\n  Each state object will either indicate fulfillment or rejection, and\n  provide the corresponding value or reason. The states will take one of\n  the following formats:\n\n  ```javascript\n  { state: 'fulfilled', value: value }\n    or\n  { state: 'rejected', reason: reason }\n  ```\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.Promise.resolve(1);\n  let promise2 = RSVP.Promise.reject(new Error('2'));\n  let promise3 = RSVP.Promise.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.allSettled(promises).then(function(array){\n    // array == [\n    //   { state: 'fulfilled', value: 1 },\n    //   { state: 'rejected', reason: Error },\n    //   { state: 'rejected', reason: Error }\n    // ]\n    // Note that for the second item, reason.message will be '2', and for the\n    // third item, reason.message will be '3'.\n  }, function(error) {\n    // Not run. (This block would only be called if allSettled had failed,\n    // for instance if passed an incorrect argument type.)\n  });\n  ```\n\n  @method allSettled\n  @static\n  @for RSVP\n  @param {Array} entries\n  @param {String} label - optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with an array of the settled\n  states of the constituent promises.\n*/\nfunction allSettled(entries, label) {\n  return new AllSettled(Promise, entries, label).promise;\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.race`.\n\n  @method race\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n */\nfunction race$1(array, label) {\n  return Promise.race(array, label);\n}\n\nfunction PromiseHash(Constructor, object, label) {\n  this._superConstructor(Constructor, object, true, label);\n}\n\nPromiseHash.prototype = o_create(Enumerator.prototype);\nPromiseHash.prototype._superConstructor = Enumerator;\nPromiseHash.prototype._init = function () {\n  this._result = {};\n};\n\nPromiseHash.prototype._validateInput = function (input) {\n  return input && typeof input === 'object';\n};\n\nPromiseHash.prototype._validationError = function () {\n  return new Error('Promise.hash must be called with an object');\n};\n\nPromiseHash.prototype._enumerate = function () {\n  var enumerator = this;\n  var promise = enumerator.promise;\n  var input = enumerator._input;\n  var results = [];\n\n  for (var key in input) {\n    if (promise._state === PENDING && Object.prototype.hasOwnProperty.call(input, key)) {\n      results.push({\n        position: key,\n        entry: input[key]\n      });\n    }\n  }\n\n  var length = results.length;\n  enumerator._remaining = length;\n  var result = undefined;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    result = results[i];\n    enumerator._eachEntry(result.entry, result.position);\n  }\n};\n\n/**\n  `RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\n  for its `promises` argument.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  fulfilled, or rejected if any of them become rejected. The returned promise\n  is fulfilled with a hash that has the same key names as the `promises` object\n  argument. If any of the values in the object are not promises, they will\n  simply be copied over to the fulfilled object.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    yourPromise: RSVP.resolve(2),\n    theirPromise: RSVP.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: 1,\n    //   yourPromise: 2,\n    //   theirPromise: 3,\n    //   notAPromise: 4\n    // }\n  });\n  ````\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the first promise\n  that is rejected will be given as the reason to the rejection handler.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    rejectedPromise: RSVP.reject(new Error('rejectedPromise')),\n    anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === 'rejectedPromise'\n  });\n  ```\n\n  An important note: `RSVP.hash` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hash` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hash(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: 'Example'\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hash\n  @static\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all properties of `promises`\n  have been fulfilled, or rejected if any of them become rejected.\n*/\nfunction hash(object, label) {\n  return new PromiseHash(Promise, object, label).promise;\n}\n\nfunction HashSettled(Constructor, object, label) {\n  this._superConstructor(Constructor, object, false, label);\n}\n\nHashSettled.prototype = o_create(PromiseHash.prototype);\nHashSettled.prototype._superConstructor = Enumerator;\nHashSettled.prototype._makeResult = makeSettledResult;\n\nHashSettled.prototype._validationError = function () {\n  return new Error('hashSettled must be called with an object');\n};\n\n/**\n  `RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\n  instead of an array for its `promises` argument.\n\n  Unlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\n  but like `RSVP.allSettled`, `hashSettled` waits until all the\n  constituent promises have returned and then shows you all the results\n  with their states and values/reasons. This is useful if you want to\n  handle multiple promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled, or rejected if the passed parameters are invalid.\n\n  The returned promise is fulfilled with a hash that has the same key names as\n  the `promises` object argument. If any of the values in the object are not\n  promises, they will be copied over to the fulfilled object and marked with state\n  'fulfilled'.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    yourPromise: RSVP.Promise.resolve(2),\n    theirPromise: RSVP.Promise.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: { state: 'fulfilled', value: 1 },\n    //   yourPromise: { state: 'fulfilled', value: 2 },\n    //   theirPromise: { state: 'fulfilled', value: 3 },\n    //   notAPromise: { state: 'fulfilled', value: 4 }\n    // }\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the state will\n  be set to 'rejected' and the reason for rejection provided.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    rejectedPromise: RSVP.Promise.reject(new Error('rejection')),\n    anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise:              { state: 'fulfilled', value: 1 },\n    //   rejectedPromise:        { state: 'rejected', reason: Error },\n    //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n    // }\n    // Note that for rejectedPromise, reason.message == 'rejection',\n    // and for anotherRejectedPromise, reason.message == 'more rejection'.\n  });\n  ```\n\n  An important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.Promise.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.Promise.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hashSettled(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: { state: 'fulfilled', value: 'Example' }\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hashSettled\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when when all properties of `promises`\n  have been settled.\n  @static\n*/\nfunction hashSettled(object, label) {\n  return new HashSettled(Promise, object, label).promise;\n}\n\nfunction rethrow(reason) {\n  setTimeout(function () {\n    throw reason;\n  });\n  throw reason;\n}\n\n/**\n  `RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n  `RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\n  interface. New code should use the `RSVP.Promise` constructor instead.\n\n  The object returned from `RSVP.defer` is a plain object with three properties:\n\n  * promise - an `RSVP.Promise`.\n  * reject - a function that causes the `promise` property on this object to\n    become rejected\n  * resolve - a function that causes the `promise` property on this object to\n    become fulfilled.\n\n  Example:\n\n   ```javascript\n   let deferred = RSVP.defer();\n\n   deferred.resolve(\"Success!\");\n\n   deferred.promise.then(function(value){\n     // value here is \"Success!\"\n   });\n   ```\n\n  @method defer\n  @static\n  @for RSVP\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Object}\n */\nfunction defer(label) {\n  var deferred = { resolve: undefined, reject: undefined };\n\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  }, label);\n\n  return deferred;\n}\n\n/**\n `RSVP.map` is similar to JavaScript's native `map` method, except that it\n  waits for all promises to become fulfilled before running the `mapFn` on\n  each item in given to `promises`. `RSVP.map` returns a promise that will\n  become fulfilled with the result of running `mapFn` on the values the promises\n  become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(result){\n    // result is [ 2, 3, 4 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.map` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\n  say you want to get all comments from a set of blog posts, but you need\n  the blog posts first because they contain a url to those comments.\n\n  ```javscript\n\n  let mapFn = function(blogPost){\n    // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n    // with some comments data\n    return getComments(blogPost.comments_url);\n  };\n\n  // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n  // with some blog post data\n  RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n    // comments is the result of asking the server for the comments\n    // of all blog posts returned from getBlogPosts()\n  });\n  ```\n\n  @method map\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} mapFn function to be called on each fulfilled promise.\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with the result of calling\n  `mapFn` on each fulfilled promise or value when they become fulfilled.\n   The promise will be rejected if any of the given `promises` become rejected.\n  @static\n*/\nfunction map(promises, mapFn, label) {\n  return Promise.all(promises, label).then(function (values) {\n    if (!isFunction(mapFn)) {\n      throw new TypeError(\"You must pass a function as map's second argument.\");\n    }\n\n    var length = values.length;\n    var results = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      results[i] = mapFn(values[i]);\n    }\n\n    return Promise.all(results, label);\n  });\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.resolve`.\n\n  @method resolve\n  @static\n  @for RSVP\n  @param {*} value value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$2(value, label) {\n  return Promise.resolve(value, label);\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.reject`.\n\n  @method reject\n  @static\n  @for RSVP\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$2(reason, label) {\n  return Promise.reject(reason, label);\n}\n\n/**\n `RSVP.filter` is similar to JavaScript's native `filter` method, except that it\n  waits for all promises to become fulfilled before running the `filterFn` on\n  each item in given to `promises`. `RSVP.filter` returns a promise that will\n  become fulfilled with the result of running `filterFn` on the values the\n  promises become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n\n  let promises = [promise1, promise2, promise3];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(result){\n    // result is [ 2, 3 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.filter` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.filter` will also wait for any promises returned from `filterFn`.\n  For instance, you may want to fetch a list of users then return a subset\n  of those users based on some asynchronous operation:\n\n  ```javascript\n\n  let alice = { name: 'alice' };\n  let bob   = { name: 'bob' };\n  let users = [ alice, bob ];\n\n  let promises = users.map(function(user){\n    return RSVP.resolve(user);\n  });\n\n  let filterFn = function(user){\n    // Here, Alice has permissions to create a blog post, but Bob does not.\n    return getPrivilegesForUser(user).then(function(privs){\n      return privs.can_create_blog_post === true;\n    });\n  };\n  RSVP.filter(promises, filterFn).then(function(users){\n    // true, because the server told us only Alice can create a blog post.\n    users.length === 1;\n    // false, because Alice is the only user present in `users`\n    users[0] === bob;\n  });\n  ```\n\n  @method filter\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} filterFn - function to be called on each resolved value to\n  filter the final results.\n  @param {String} label optional string describing the promise. Useful for\n  tooling.\n  @return {Promise}\n*/\n\nfunction resolveAll(promises, label) {\n  return Promise.all(promises, label);\n}\n\nfunction resolveSingle(promise, label) {\n  return Promise.resolve(promise, label).then(function (promises) {\n    return resolveAll(promises, label);\n  });\n}\nfunction filter(promises, filterFn, label) {\n  var promise = isArray(promises) ? resolveAll(promises, label) : resolveSingle(promises, label);\n  return promise.then(function (values) {\n    if (!isFunction(filterFn)) {\n      throw new TypeError(\"You must pass a function as filter's second argument.\");\n    }\n\n    var length = values.length;\n    var filtered = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      filtered[i] = filterFn(values[i]);\n    }\n\n    return resolveAll(filtered, label).then(function (filtered) {\n      var results = new Array(length);\n      var newLength = 0;\n\n      for (var i = 0; i < length; i++) {\n        if (filtered[i]) {\n          results[newLength] = values[i];\n          newLength++;\n        }\n      }\n\n      results.length = newLength;\n\n      return results;\n    });\n  });\n}\n\nvar len = 0;\nvar vertxNext = undefined;\nfunction asap(callback, arg) {\n  queue$1[len] = callback;\n  queue$1[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 1, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    scheduleFlush$1();\n  }\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  var nextTick = process.nextTick;\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // setImmediate should be used instead instead\n  var version = process.versions.node.match(/^(?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)$/);\n  if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {\n    nextTick = setImmediate;\n  }\n  return function () {\n    return nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    return node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  return function () {\n    return setTimeout(flush, 1);\n  };\n}\n\nvar queue$1 = new Array(1000);\n\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue$1[i];\n    var arg = queue$1[i + 1];\n\n    callback(arg);\n\n    queue$1[i] = undefined;\n    queue$1[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertex() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush$1 = undefined;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush$1 = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush$1 = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush$1 = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush$1 = attemptVertex();\n} else {\n  scheduleFlush$1 = useSetTimeout();\n}\n\nvar platform = undefined;\n\n/* global self */\nif (typeof self === 'object') {\n  platform = self;\n\n  /* global global */\n} else if (typeof global === 'object') {\n    platform = global;\n  } else {\n    throw new Error('no global: `self` or `global` found');\n  }\n\nvar _async$filter;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// defaults\n\n// the default export here is for backwards compat:\n//   https://github.com/tildeio/rsvp.js/issues/434\nconfig.async = asap;\nconfig.after = function (cb) {\n  return setTimeout(cb, 0);\n};\nvar cast = resolve$2;\n\nvar async = function async(callback, arg) {\n  return config.async(callback, arg);\n};\n\nfunction on() {\n  config['on'].apply(config, arguments);\n}\n\nfunction off() {\n  config['off'].apply(config, arguments);\n}\n\n// Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`\nif (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {\n  var callbacks = window['__PROMISE_INSTRUMENTATION__'];\n  configure('instrument', true);\n  for (var eventName in callbacks) {\n    if (callbacks.hasOwnProperty(eventName)) {\n      on(eventName, callbacks[eventName]);\n    }\n  }\n}var rsvp = (_async$filter = {\n  cast: cast,\n  Promise: Promise,\n  EventTarget: EventTarget,\n  all: all$1,\n  allSettled: allSettled,\n  race: race$1,\n  hash: hash,\n  hashSettled: hashSettled,\n  rethrow: rethrow,\n  defer: defer,\n  denodeify: denodeify,\n  configure: configure,\n  on: on,\n  off: off,\n  resolve: resolve$2,\n  reject: reject$2,\n  map: map\n}, _defineProperty(_async$filter, 'async', async), _defineProperty(_async$filter, 'filter', // babel seems to error if async isn't a computed prop here...\nfilter), _async$filter);\n\nexports['default'] = rsvp;\nexports.cast = cast;\nexports.Promise = Promise;\nexports.EventTarget = EventTarget;\nexports.all = all$1;\nexports.allSettled = allSettled;\nexports.race = race$1;\nexports.hash = hash;\nexports.hashSettled = hashSettled;\nexports.rethrow = rethrow;\nexports.defer = defer;\nexports.denodeify = denodeify;\nexports.configure = configure;\nexports.on = on;\nexports.off = off;\nexports.resolve = resolve$2;\nexports.reject = reject$2;\nexports.map = map;\nexports.async = async;\nexports.filter = filter;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":39}]},{},[5])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJqcy9hcHAvY29uc3RydWN0b3IuanMiLCJqcy9hcHAvaW5kZXguanMiLCJqcy9kb20vaW5kZXguanMiLCJqcy9kb20vc2V0dXBfbWFpbi9pbmRleC5qcyIsImpzL2luZGV4LmpzIiwianMvc2VydmVyL2luZGV4LmpzIiwianMvc2VydmVyL3NlYXJjaC5qcyIsImpzL3NlcnZlci9zaW1wbGlmeS5qcyIsImpzL3VuaXQvYmFzZV91bml0LmpzIiwianMvdW5pdC9kZXJpdmVkX3VuaXQuanMiLCJqcy91bml0L2luZGV4LmpzIiwianMvdW5pdC9yZWdpc3Rlci9OZXd0b24uanMiLCJqcy91bml0L3JlZ2lzdGVyL2FuZ2xlLmpzIiwianMvdW5pdC9yZWdpc3Rlci9jb3Vsb21iLmpzIiwianMvdW5pdC9yZWdpc3Rlci9jdXJyZW50LmpzIiwianMvdW5pdC9yZWdpc3Rlci9mYXJhZC5qcyIsImpzL3VuaXQvcmVnaXN0ZXIvaGVucnkuanMiLCJqcy91bml0L3JlZ2lzdGVyL2hlcnR6LmpzIiwianMvdW5pdC9yZWdpc3Rlci9pbmRleC5qcyIsImpzL3VuaXQvcmVnaXN0ZXIvaW50ZW5zaXR5LmpzIiwianMvdW5pdC9yZWdpc3Rlci9qb3VsZS5qcyIsImpzL3VuaXQvcmVnaXN0ZXIvbGVuZ3RoLmpzIiwianMvdW5pdC9yZWdpc3Rlci9tYXNzLmpzIiwianMvdW5pdC9yZWdpc3Rlci9tYXR0ZXIuanMiLCJqcy91bml0L3JlZ2lzdGVyL29obS5qcyIsImpzL3VuaXQvcmVnaXN0ZXIvcGFzY2FsLmpzIiwianMvdW5pdC9yZWdpc3Rlci9zaWVtZW5zLmpzIiwianMvdW5pdC9yZWdpc3Rlci9zdG9yYWdlLmpzIiwianMvdW5pdC9yZWdpc3Rlci90ZW1wLmpzIiwianMvdW5pdC9yZWdpc3Rlci90ZXNsYS5qcyIsImpzL3VuaXQvcmVnaXN0ZXIvdGltZS5qcyIsImpzL3VuaXQvcmVnaXN0ZXIvdm9sdC5qcyIsImpzL3VuaXQvcmVnaXN0ZXIvd2F0dC5qcyIsImpzL3VuaXQvcmVnaXN0ZXIvd2ViZXIuanMiLCJqcy91dGlsL2dldF9tdWxfYW5kX2Rpdl9jbGFzc2VzLmpzIiwianMvdXRpbC9nZXRfdW5pdGxlc3MuanMiLCJqcy91dGlsL2lkZW50aWZ5X3VuaXQuanMiLCJqcy91dGlsL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9yc3ZwL2Rpc3QvcnN2cC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O1NDQWlCLEM7SUFBVixNLE1BQUEsTTs7O0FBRVAsT0FBTyxPQUFQLEdBQWlCLFlBQVk7QUFBQTs7QUFDM0IsT0FBSyxXQUFMLEdBQW1CLEVBQW5COztBQUVBLE9BQUssWUFBTCxHQUFvQixVQUFDLElBQUQsRUFBVTtBQUM1QixRQUFNLE9BQU8sS0FBSyxJQUFsQjtBQUNBLFFBQU0sU0FBUyxLQUFLLE1BQXBCO0FBQ0EsUUFBSSxDQUFDLE1BQUssV0FBTCxDQUFpQixjQUFqQixDQUFnQyxJQUFoQyxDQUFMLEVBQTRDO0FBQzFDLFlBQUssV0FBTCxDQUFpQixJQUFqQixJQUF5QixFQUF6QjtBQUNEO0FBQ0QsVUFBSyxXQUFMLENBQWlCLElBQWpCLEVBQXVCLE1BQXZCLElBQWlDLElBQWpDO0FBQ0QsR0FQRDs7QUFTQSxPQUFLLFlBQUwsR0FBb0IsVUFBQyxJQUFELEVBQU8sTUFBUCxFQUFrQjtBQUNwQyxXQUFPLE1BQUssV0FBTCxDQUFpQixJQUFqQixFQUF1QixNQUF2QixDQUFQO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLHFCQUFMLEdBQTZCLFlBQU07QUFDakMsUUFBTSxjQUFjLE1BQUssY0FBTCxFQUFwQjtBQUNBLFFBQU0scUJBQXFCLEVBQTNCO0FBQ0EsU0FBSyxJQUFNLFVBQVgsSUFBeUIsV0FBekIsRUFBc0M7QUFDcEMsVUFBTSxZQUFZLFlBQVksVUFBWixDQUFsQjtBQUNBLFVBQUksQ0FBQyxVQUFVLElBQWYsRUFBcUI7QUFDbkIs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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3BMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJjb25zdCB7ZXh0ZW5kfSA9ICRcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMudW5pdENsYXNzZXMgPSB7fTtcblxuICB0aGlzLmFkZFVuaXRDbGFzcyA9IChVbml0KSA9PiB7XG4gICAgY29uc3QgdHlwZSA9IFVuaXQuVFlQRTtcbiAgICBjb25zdCBzeW1ib2wgPSBVbml0LlNZTUJPTDtcbiAgICBpZiAoIXRoaXMudW5pdENsYXNzZXMuaGFzT3duUHJvcGVydHkodHlwZSkpIHtcbiAgICAgIHRoaXMudW5pdENsYXNzZXNbdHlwZV0gPSB7fTtcbiAgICB9XG4gICAgdGhpcy51bml0Q2xhc3Nlc1t0eXBlXVtzeW1ib2xdID0gVW5pdDtcbiAgfTtcblxuICB0aGlzLmdldFVuaXRDbGFzcyA9ICh0eXBlLCBzeW1ib2wpID0+IHtcbiAgICByZXR1cm4gdGhpcy51bml0Q2xhc3Nlc1t0eXBlXVtzeW1ib2xdO1xuICB9O1xuXG4gIHRoaXMuZ2V0RGVyaXZlZFVuaXRDbGFzc2VzID0gKCkgPT4ge1xuICAgIGNvbnN0IHVuaXRDbGFzc2VzID0gdGhpcy5nZXRVbml0Q2xhc3NlcygpO1xuICAgIGNvbnN0IGRlcml2ZWRVbml0Q2xhc3NlcyA9IHt9O1xuICAgIGZvciAoY29uc3QgdW5pdFN5bWJvbCBpbiB1bml0Q2xhc3Nlcykge1xuICAgICAgY29uc3QgdW5pdENsYXNzID0gdW5pdENsYXNzZXNbdW5pdFN5bWJvbF07XG4gICAgICBpZiAoIXVuaXRDbGFzcy5CQVNFKSB7XG4gICAgICAgIGRlcml2ZWRVbml0Q2xhc3Nlc1t1bml0U3ltYm9sXSA9IHVuaXRDbGFzcztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlcml2ZWRVbml0Q2xhc3NlcztcbiAgfTtcblxuICB0aGlzLmdldFVuaXRDbGFzc2VzID0gKCkgPT4ge1xuICAgIGNvbnN0IHVuaXRDbGFzc2VzID0ge307XG4gICAgZm9yIChjb25zdCBxdWFudGl0eSBpbiB0aGlzLnVuaXRDbGFzc2VzKSB7XG4gICAgICBleHRlbmQodHJ1ZSwgdW5pdENsYXNzZXMsIHRoaXMudW5pdENsYXNzZXNbcXVhbnRpdHldKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuaXRDbGFzc2VzO1xuICB9XG59OyIsIm1vZHVsZS5leHBvcnRzID0ge307IiwiY29uc3Qgc2V0dXBNYWluID0gcmVxdWlyZSgnLi9zZXR1cF9tYWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXR1cE1haW5cbn07IiwiY29uc3QgU2VydmVyID0gcmVxdWlyZSgnLi4vLi4vc2VydmVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xuICBTZXJ2ZXIuc2VhcmNoKCc4LjE0IGtnIG0yIC8gczInKTtcbn07IiwiY29uc3QgUlNWUCA9IHJlcXVpcmUoJ3JzdnAnKTtcbmNvbnN0IERPTSA9IHJlcXVpcmUoJy4vZG9tJyk7XG5jb25zdCBTZXJ2ZXIgPSByZXF1aXJlKCcuL3NlcnZlcicpO1xuY29uc3QgYXBwID0gcmVxdWlyZSgnLi9hcHAnKTtcbmNvbnN0IEFwcCA9IHJlcXVpcmUoJy4vYXBwL2NvbnN0cnVjdG9yJyk7XG5jb25zdCBVbml0ID0gcmVxdWlyZSgnLi91bml0Jyk7XG5jb25zdCB7ZXh0ZW5kfSA9ICQ7XG5cbi8vIHNldCBnbG9iYWwgcHJvbWlzZSBlcnJvciBoYW5kbGVyXG5SU1ZQLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgY29uc29sZS5hc3NlcnQoZmFsc2UsIHJlYXNvbik7XG59KTtcblxuZXh0ZW5kKHRydWUsIGFwcCwgbmV3IEFwcCgpKTtcblxuVW5pdC5yZWdpc3RlcigpO1xuXG5leHRlbmQodHJ1ZSwgd2luZG93LCB7XG4gIG1haW46IERPTS5zZXR1cE1haW5cbn0pOyIsImNvbnN0IHNlYXJjaCA9IHJlcXVpcmUoJy4vc2VhcmNoJyk7XG5jb25zdCBzaW1wbGlmeSA9IHJlcXVpcmUoJy4vc2ltcGxpZnknKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNlYXJjaCxcbiAgc2ltcGxpZnlcbn07IiwiY29uc3QgVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbmNvbnN0IGFwcCA9IHJlcXVpcmUoJy4uL2FwcCcpO1xuXG5jb25zdCB7ZXh0ZW5kfSA9ICQ7XG5cbmNsYXNzIENvbWJpbmF0aW9uIHtcbiAgY29uc3RydWN0b3IobXVsVHlwZXMsIGRpdlR5cGVzLCB1bml0bGVzcywgY291bnRDYWxjdWxhdGlvbiA9IHRydWUpIHtcbiAgICB0aGlzLm11bFR5cGVzID0gbXVsVHlwZXM7XG4gICAgdGhpcy5kaXZUeXBlcyA9IGRpdlR5cGVzO1xuICAgIHRoaXMudW5pdGxlc3MgPSB1bml0bGVzcztcbiAgICBpZiAoY291bnRDYWxjdWxhdGlvbikgdGhpcy5jYWxjdWxhdGVDb3VudCgpO1xuICB9XG5cbiAgY2FsY3VsYXRlQ291bnQoKSB7XG4gICAgdmFyIGNvdW50ID0gdGhpcy5tdWxUeXBlcy5sZW5ndGggKyB0aGlzLmRpdlR5cGVzLmxlbmd0aDtcbiAgICBmb3IgKGNvbnN0IHR5cGUgaW4gdGhpcy51bml0bGVzcy50eXBlcykge1xuICAgICAgY291bnQgKz0gTWF0aC5hYnModGhpcy51bml0bGVzcy50eXBlc1t0eXBlXSk7XG4gICAgfVxuICAgIHRoaXMuY291bnQgPSBjb3VudDtcbiAgfVxuXG4gIGNyZWF0ZU11bENsYXNzQWRkZWQobXVsQ2xhc3MpIHtcbiAgICBjb25zdCBuZXdfID0gbmV3IENvbWJpbmF0aW9uKHRoaXMubXVsVHlwZXMuc2xpY2UoKSwgdGhpcy5kaXZUeXBlcy5zbGljZSgpLCBleHRlbmQodHJ1ZSwge30sIHRoaXMudW5pdGxlc3MpLCBmYWxzZSk7XG4gICAgbmV3Xy5tdWxUeXBlcy5wdXNoKG11bENsYXNzLlRZUEUpO1xuICAgIGNvbnN0IHVuaXRsZXNzID0gbXVsQ2xhc3MuVU5JVExFU1M7XG4gICAgZm9yIChjb25zdCB0eXBlIGluIHVuaXRsZXNzLnR5cGVzKSB7XG4gICAgICBpZiAoIW5ld18udW5pdGxlc3MudHlwZXMuaGFzT3duUHJvcGVydHkodHlwZSkpIHtcbiAgICAgICAgbmV3Xy51bml0bGVzcy50eXBlc1t0eXBlXSA9ICt1bml0bGVzcy50eXBlc1t0eXBlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld18udW5pdGxlc3MudHlwZXNbdHlwZV0gKz0gdW5pdGxlc3MudHlwZXNbdHlwZV07XG4gICAgICB9XG4gICAgICBpZiAobmV3Xy51bml0bGVzcy50eXBlc1t0eXBlXSA9PSAwKSB7XG4gICAgICAgIGRlbGV0ZSB1bml0bGVzcy50eXBlc1t0eXBlXTtcbiAgICAgIH1cbiAgICB9XG4gICAgbmV3Xy51bml0bGVzcy5xdWFudGl0eSAqPSB1bml0bGVzcy5xdWFudGl0eTtcbiAgICBuZXdfLmNhbGN1bGF0ZUNvdW50KCk7XG4gICAgcmV0dXJuIG5ld187XG4gIH1cblxuICBjcmVhdGVEaXZDbGFzc0FkZGVkKGRpdkNsYXNzKSB7XG4gICAgY29uc3QgbmV3XyA9IG5ldyBDb21iaW5hdGlvbih0aGlzLm11bFR5cGVzLnNsaWNlKCksIHRoaXMuZGl2VHlwZXMuc2xpY2UoKSwgZXh0ZW5kKHRydWUsIHt9LCB0aGlzLnVuaXRsZXNzKSwgZmFsc2UpO1xuICAgIG5ld18uZGl2VHlwZXMucHVzaChkaXZDbGFzcy5UWVBFKTtcbiAgICBjb25zdCB1bml0bGVzcyA9IGRpdkNsYXNzLlVOSVRMRVNTO1xuICAgIGZvciAoY29uc3QgdHlwZSBpbiB1bml0bGVzcy50eXBlcykge1xuICAgICAgaWYgKCFuZXdfLnVuaXRsZXNzLnR5cGVzLmhhc093blByb3BlcnR5KHR5cGUpKSB7XG4gICAgICAgIG5ld18udW5pdGxlc3MudHlwZXNbdHlwZV0gPSAtdW5pdGxlc3MudHlwZXNbdHlwZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdfLnVuaXRsZXNzLnR5cGVzW3R5cGVdIC09IHVuaXRsZXNzLnR5cGVzW3R5cGVdO1xuICAgICAgfVxuICAgICAgaWYgKG5ld18udW5pdGxlc3MudHlwZXNbdHlwZV0gPT0gMCkge1xuICAgICAgICBkZWxldGUgdW5pdGxlc3MudHlwZXNbdHlwZV07XG4gICAgICB9XG4gICAgfVxuICAgIG5ld18udW5pdGxlc3MucXVhbnRpdHkgLz0gdW5pdGxlc3MucXVhbnRpdHk7XG4gICAgbmV3Xy5jYWxjdWxhdGVDb3VudCgpO1xuICAgIHJldHVybiBuZXdfO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gKHN0cikgPT4ge1xuICBjb25zdCB2YWx1ZSA9IDE7XG4gIGNvbnN0IG11bFN5bWJvbHMgPSBbJ2xiJywgJ20nLCAnbSddO1xuICBjb25zdCBkaXZTeW1ib2xzID0gWydzJywgJ3MnXTtcblxuICBjb25zdCBtdWxQYWlycyA9IFtdO1xuICBjb25zdCBkaXZQYWlycyA9IFtdO1xuICBtdWxTeW1ib2xzLmZvckVhY2gobXVsID0+IHtcbiAgICBjb25zdCBtdWxDbGFzcyA9IFV0aWwuaWRlbnRpZnlVbml0KG11bCk7XG4gICAgbXVsUGFpcnMucHVzaChbbXVsQ2xhc3MuVFlQRSwgbXVsQ2xhc3MuU1lNQk9MXSk7XG4gIH0pO1xuICBkaXZTeW1ib2xzLmZvckVhY2goZGl2ID0+IHtcbiAgICBjb25zdCBkaXZDbGFzcyA9IFV0aWwuaWRlbnRpZnlVbml0KGRpdik7XG4gICAgZGl2UGFpcnMucHVzaChbZGl2Q2xhc3MuVFlQRSwgZGl2Q2xhc3MuU1lNQk9MXSk7XG4gIH0pO1xuXG4gIGNvbnN0IHttdWxDbGFzc2VzLCBkaXZDbGFzc2VzfSA9IFV0aWwuZ2V0TXVsQW5kRGl2Q2xhc3NlcyhtdWxQYWlycywgZGl2UGFpcnMpO1xuICBjb25zdCB1bml0bGVzcyA9IFV0aWwuZ2V0VW5pdGxlc3MobXVsQ2xhc3NlcywgZGl2Q2xhc3Nlcyk7XG4gIGNvbnN0IHF1ZXVlID0gW25ldyBDb21iaW5hdGlvbihbXSwgW10sIHVuaXRsZXNzKV07XG5cbiAgY29uc3QgZGVyaXZlZFVuaXRDbGFzc2VzID0gYXBwLmdldERlcml2ZWRVbml0Q2xhc3NlcygpO1xuICBjb25zb2xlLmxvZyhkZXJpdmVkVW5pdENsYXNzZXMpO1xuICB2YXIgbWluQ291bnQgPSAweDdmZmZmZmZmO1xuICB2YXIgbWluQ29tYmluYXRpb25zID0gW107XG4gIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgZSA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgY29uc29sZS5sb2coZSk7XG4gICAgaWYgKG1pbkNvdW50ID4gZS5jb3VudCkge1xuICAgICAgbWluQ291bnQgPSBlLmNvdW50O1xuICAgICAgbWluQ29tYmluYXRpb25zID0gW2VdO1xuICAgIH0gZWxzZSBpZiAobWluQ291bnQgPT0gZS5jb3VudCkge1xuICAgICAgbWluQ29tYmluYXRpb25zLnB1c2goZSk7XG4gICAgfVxuICAgIGlmIChlLm11bFR5cGVzLmxlbmd0aCArIGUuZGl2VHlwZXMubGVuZ3RoIDwgMSkge1xuICAgICAgZm9yIChjb25zdCB1bml0U3ltYm9sIGluIGRlcml2ZWRVbml0Q2xhc3Nlcykge1xuICAgICAgICBjb25zdCB1bml0Q2xhc3MgPSBkZXJpdmVkVW5pdENsYXNzZXNbdW5pdFN5bWJvbF07XG4gICAgICAgIHF1ZXVlLnB1c2goZS5jcmVhdGVNdWxDbGFzc0FkZGVkKHVuaXRDbGFzcykpO1xuICAgICAgICBxdWV1ZS5wdXNoKGUuY3JlYXRlRGl2Q2xhc3NBZGRlZCh1bml0Q2xhc3MpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc29sZS5sb2cobWluQ29tYmluYXRpb25zKTtcbn07IiwiY29uc3QgYXBwID0gcmVxdWlyZSgnLi4vYXBwJyk7XG5jb25zdCBVdGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChtdWxzLCBkaXZzLCB2YWwpID0+IHtcblxufTsiLCJjb25zdCBhcHAgPSByZXF1aXJlKCcuLi9hcHAnKTtcblxuY2xhc3MgQmFzZVVuaXQge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxufVxuXG5CYXNlVW5pdC5CQVNFID0gQmFzZVVuaXQucHJvdG90eXBlLmJhc2UgPSB0cnVlO1xuQmFzZVVuaXQuUVVBTlRJVFkgPSBCYXNlVW5pdC5wcm90b3R5cGUucXVhbnRpdHkgPSAxO1xuXG5CYXNlVW5pdC5yZWdpc3RlciA9ICh0eXBlLCBzeW1ib2wsIHF1YW50aXR5ID0gMSwgcGFyZW50U3ltYm9sID0gbnVsbCkgPT4ge1xuICBjb25zdCBQYXJlbnRVbml0ID0gcGFyZW50U3ltYm9sID8gYXBwLmdldFVuaXRDbGFzcyh0eXBlLCBwYXJlbnRTeW1ib2wpIDogQmFzZVVuaXQ7XG4gIHF1YW50aXR5ICo9IFBhcmVudFVuaXQuUVVBTlRJVFk7XG5cbiAgY2xhc3MgVW5pdCBleHRlbmRzIFBhcmVudFVuaXQge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgICBzdXBlcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgVW5pdC5UWVBFID0gVW5pdC5wcm90b3R5cGUudHlwZSA9IHR5cGU7XG4gIFVuaXQuU1lNQk9MID0gVW5pdC5wcm90b3R5cGUuc3ltYm9sID0gc3ltYm9sO1xuICBVbml0LlFVQU5USVRZID0gVW5pdC5wcm90b3R5cGUucXVhbnRpdHkgPSBxdWFudGl0eTtcbiAgVW5pdC5VTklUTEVTUyA9IHt0eXBlczoge30sIHF1YW50aXR5OiBxdWFudGl0eX07XG4gIFVuaXQuVU5JVExFU1MudHlwZXNbdHlwZV0gPSAxO1xuXG4gIGFwcC5hZGRVbml0Q2xhc3MoVW5pdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VVbml0OyIsImNvbnN0IGFwcCA9IHJlcXVpcmUoJy4uL2FwcCcpO1xuY29uc3QgVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcblxuY2xhc3MgRGVyaXZlZFVuaXQge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxufVxuXG5EZXJpdmVkVW5pdC5CQVNFID0gRGVyaXZlZFVuaXQucHJvdG90eXBlLmJhc2UgPSBmYWxzZTtcbkRlcml2ZWRVbml0LlFVQU5USVRZID0gRGVyaXZlZFVuaXQucHJvdG90eXBlLnF1YW50aXR5ID0gMTtcblxuRGVyaXZlZFVuaXQucmVnaXN0ZXIgPSAodHlwZSwgc3ltYm9sLCBtdWxQYWlycywgZGl2UGFpcnMsIHF1YW50aXR5ID0gMSwgcGFyZW50U3ltYm9sID0gbnVsbCkgPT4ge1xuICBjb25zdCB7bXVsQ2xhc3NlcywgZGl2Q2xhc3Nlc30gPSBVdGlsLmdldE11bEFuZERpdkNsYXNzZXMobXVsUGFpcnMsIGRpdlBhaXJzKTtcblxuICBjb25zdCBQYXJlbnRVbml0ID0gcGFyZW50U3ltYm9sID8gYXBwLmdldFVuaXRDbGFzcyh0eXBlLCBwYXJlbnRTeW1ib2wpIDogRGVyaXZlZFVuaXQ7XG4gIHF1YW50aXR5ICo9IFBhcmVudFVuaXQuUVVBTlRJVFk7XG5cbiAgY2xhc3MgVW5pdCBleHRlbmRzIFBhcmVudFVuaXQge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgICBzdXBlcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgVW5pdC5UWVBFID0gVW5pdC5wcm90b3R5cGUudHlwZSA9IHR5cGU7XG4gIFVuaXQuU1lNQk9MID0gVW5pdC5wcm90b3R5cGUuc3ltYm9sID0gc3ltYm9sO1xuICBVbml0Lk1VTFMgPSBVbml0LnByb3RvdHlwZS5tdWxzID0gbXVsQ2xhc3NlcztcbiAgVW5pdC5ESVZTID0gVW5pdC5wcm90b3R5cGUuZGl2cyA9IGRpdkNsYXNzZXM7XG4gIFVuaXQuUVVBTlRJVFkgPSBVbml0LnByb3RvdHlwZS5xdWFudGl0eSA9IHF1YW50aXR5O1xuICBVbml0LlVOSVRMRVNTID0gVXRpbC5nZXRVbml0bGVzcyhtdWxDbGFzc2VzLCBkaXZDbGFzc2VzKTtcblxuICBhcHAuYWRkVW5pdENsYXNzKFVuaXQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZXJpdmVkVW5pdDsiLCJjb25zdCBCYXNlVW5pdCA9IHJlcXVpcmUoJy4vYmFzZV91bml0Jyk7XG5jb25zdCBEZXJpdmVkVW5pdCA9IHJlcXVpcmUoJy4vZGVyaXZlZF91bml0Jyk7XG5jb25zdCByZWdpc3RlciA9IHJlcXVpcmUoJy4vcmVnaXN0ZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEJhc2VVbml0LFxuICBEZXJpdmVkVW5pdCxcbiAgcmVnaXN0ZXJcbn07IiwiY29uc3QgRGVyaXZlZFVuaXQgPSByZXF1aXJlKCcuLi9kZXJpdmVkX3VuaXQnKTtcblxuY29uc3QgdHlwZSA9ICdOZXd0b24nO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgRGVyaXZlZFVuaXQucmVnaXN0ZXIodHlwZSwgJ04nLCBbWydtYXNzJywgJ2tnJ10sIFsnbGVuZ3RoJywgJ20nXV0sIFtbJ3RpbWUnLCAncyddLCBbJ3RpbWUnLCAncyddXSk7XG59OyIsImNvbnN0IEJhc2VVbml0ID0gcmVxdWlyZSgnLi4vYmFzZV91bml0Jyk7XG5cbmNvbnN0IHR5cGUgPSAnYW5nbGUnO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJycsIDEpO1xuICBCYXNlVW5pdC5yZWdpc3Rlcih0eXBlLCAncmFkJywgMSk7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsJ8KwJyw1Ny4yOTU4LCcnKTtcblxufTsiLCJjb25zdCBEZXJpdmVkVW5pdCA9IHJlcXVpcmUoJy4uL2Rlcml2ZWRfdW5pdCcpO1xuXG5jb25zdCB0eXBlID0gJ2NvdWxvbWInO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgRGVyaXZlZFVuaXQucmVnaXN0ZXIodHlwZSwgJ0onLCBbWydjdXJyZW50JywgJ0EnXSwgWyd0aW1lJywgJ3MnXV0sIFtdKTtcbn07IiwiY29uc3QgQmFzZVVuaXQgPSByZXF1aXJlKCcuLi9iYXNlX3VuaXQnKTtcblxuY29uc3QgdHlwZSA9ICdjdXJyZW50JztcblxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsICdBJywgMSk7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsICdjQScsIDFlLTIsICdBJyk7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsICdrQScsIDFlMywgJ0EnKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ21BJywgMWUtMywgJ0EnKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ8K1QScsIDFlLTYsICdBJyk7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsICduQScsIDFlLTksICdBJyk7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsICdwQScsIDFlLTEyLCAnQScpO1xufTsiLCJjb25zdCBEZXJpdmVkVW5pdCA9IHJlcXVpcmUoJy4uL2Rlcml2ZWRfdW5pdCcpO1xuXG5jb25zdCB0eXBlID0gJ2ZhcmFkJztcblxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIERlcml2ZWRVbml0LnJlZ2lzdGVyKHR5cGUsICdGJywgW1sndGltZScsICdzJ10sIFsndGltZScsICdzJ10sIFsndGltZScsICdzJ10sWyd0aW1lJywgJ3MnXSxbJ2N1cnJlbnQnLCdBJ10sWydjdXJyZW50JywnQSddXSwgW1snbWFzcycsICdrZyddLCBbJ2xlbmd0aCcsICdtJ10sWydsZW5ndGgnLCAnbSddXSk7XG59OyIsImNvbnN0IERlcml2ZWRVbml0ID0gcmVxdWlyZSgnLi4vZGVyaXZlZF91bml0Jyk7XG5cbmNvbnN0IHR5cGUgPSAnaGVucnknO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgRGVyaXZlZFVuaXQucmVnaXN0ZXIodHlwZSwgJ0gnLCBbWydtYXNzJywgJ2tnJ10sIFsnbGVuZ3RoJywgJ20nXSwgWydsZW5ndGgnLCAnbSddXSwgW1sndGltZScsICdzJ10sIFsndGltZScsICdzJ10sWydjdXJyZW50JywnQSddLFsnY3VycmVudCcsJ0EnXV0pO1xufTsiLCJjb25zdCBEZXJpdmVkVW5pdCA9IHJlcXVpcmUoJy4uL2Rlcml2ZWRfdW5pdCcpO1xuXG5jb25zdCB0eXBlID0gJ2hlcnR6JztcblxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIERlcml2ZWRVbml0LnJlZ2lzdGVyKHR5cGUsICdIeicsIFtdLCBbWyd0aW1lJywgJ3MnXV0pO1xufTsiLCJjb25zdCBsZW5ndGggPSByZXF1aXJlKCcuL2xlbmd0aCcpO1xuY29uc3QgbWFzcyA9IHJlcXVpcmUoJy4vbWFzcycpO1xuY29uc3QgdGltZSA9IHJlcXVpcmUoJy4vdGltZScpO1xuY29uc3QgYW5nbGUgPSByZXF1aXJlKCcuL2FuZ2xlJyk7XG5jb25zdCBjdXJyZW50ID0gcmVxdWlyZSgnLi9jdXJyZW50Jyk7XG5jb25zdCB0ZW1wID0gcmVxdWlyZSgnLi90ZW1wJyk7XG5jb25zdCBtYXR0ZXIgPSByZXF1aXJlKCcuL21hdHRlcicpO1xuY29uc3QgaW50ZW5zaXR5ID0gcmVxdWlyZSgnLi9pbnRlbnNpdHknKTtcbmNvbnN0IHN0b3JhZ2UgID0gcmVxdWlyZSgnLi9zdG9yYWdlJyk7XG5jb25zdCBqb3VsZSA9IHJlcXVpcmUoJy4vam91bGUnKTtcbmNvbnN0IHBhc2NhbCA9IHJlcXVpcmUoJy4vcGFzY2FsJyk7XG5jb25zdCBOZXd0b24gPSByZXF1aXJlKCcuL05ld3RvbicpO1xuY29uc3QgaGVydHogPSByZXF1aXJlKCcuL2hlcnR6Jyk7XG5jb25zdCB3YXR0ID0gcmVxdWlyZSgnLi93YXR0Jyk7XG5jb25zdCBjb3Vsb21iID0gcmVxdWlyZSgnLi9jb3Vsb21iJyk7XG5jb25zdCB2b2x0ID0gcmVxdWlyZSgnLi92b2x0Jyk7XG5jb25zdCBmYXJhZCA9IHJlcXVpcmUoJy4vZmFyYWQnKTtcbmNvbnN0IG9obSA9IHJlcXVpcmUoJy4vb2htJyk7XG5jb25zdCBzaWVtZW5zID0gcmVxdWlyZSgnLi9zaWVtZW5zJyk7XG5jb25zdCB3ZWJlciA9IHJlcXVpcmUoJy4vd2ViZXInKTtcbmNvbnN0IHRlc2xhID0gcmVxdWlyZSgnLi90ZXNsYScpO1xuY29uc3QgaGVucnkgPSByZXF1aXJlKCcuL2hlbnJ5Jyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgbGVuZ3RoKCk7XG4gIG1hc3MoKTtcbiAgdGltZSgpO1xuICBhbmdsZSgpO1xuICBjdXJyZW50KCk7XG4gIHRlbXAoKTtcbiAgbWF0dGVyKCk7XG4gIGludGVuc2l0eSgpO1xuICBzdG9yYWdlKCk7XG4gIGpvdWxlKCk7XG4gIHBhc2NhbCgpO1xuICBOZXd0b24oKTtcbiAgaGVydHooKTtcbiAgd2F0dCgpO1xuICBjb3Vsb21iKCk7XG4gIHZvbHQoKTtcbiAgZmFyYWQoKTtcbiAgb2htKCk7XG4gIHNpZW1lbnMoKTtcbiAgd2ViZXIoKTtcbiAgdGVzbGEoKTtcbiAgaGVucnkoKTtcblxufTtcbiIsImNvbnN0IEJhc2VVbml0ID0gcmVxdWlyZSgnLi4vYmFzZV91bml0Jyk7XG5cbmNvbnN0IHR5cGUgPSAnaW50ZW5zaXR5JztcblxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsICdjZCcsIDEpO1xufTsiLCJjb25zdCBEZXJpdmVkVW5pdCA9IHJlcXVpcmUoJy4uL2Rlcml2ZWRfdW5pdCcpO1xuXG5jb25zdCB0eXBlID0gJ2pvdWxlJztcblxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIERlcml2ZWRVbml0LnJlZ2lzdGVyKHR5cGUsICdKJywgW1snbWFzcycsICdrZyddLCBbJ2xlbmd0aCcsICdtJ10sIFsnbGVuZ3RoJywgJ20nXV0sIFtbJ3RpbWUnLCAncyddLCBbJ3RpbWUnLCAncyddXSk7XG59OyIsImNvbnN0IEJhc2VVbml0ID0gcmVxdWlyZSgnLi4vYmFzZV91bml0Jyk7XG5cbmNvbnN0IHR5cGUgPSAnbGVuZ3RoJztcblxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsICdtJywgMSk7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsICdjbScsIDFlLTIsICdtJyk7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsICdrbScsIDFlMywgJ20nKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ21tJywgMWUtMywgJ20nKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ8K1bScsIDFlLTYsICdtJyk7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsICdubScsIDFlLTksICdtJyk7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsICdwbScsIDFlLTEyLCAnbScpO1xuICBCYXNlVW5pdC5yZWdpc3Rlcih0eXBlLCAnZnQnLCAwLjMwNDgsICdtJyk7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsICd5ZCcsIDMuMDAwLCAnZnQnKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ21pJywgMTc2MCwgJ3lkJyk7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsICdpbicsMS41NzgzZS01LCdtaScpO1xufTsiLCJjb25zdCBCYXNlVW5pdCA9IHJlcXVpcmUoJy4uL2Jhc2VfdW5pdCcpO1xuXG5jb25zdCB0eXBlID0gJ21hc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ2cnLCAxKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ2RnJywgMWUtMSwgJ2cnKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ2NnJywgMWUtMiwgJ2cnKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ2tnJywgMWUzLCAnZycpO1xuICBCYXNlVW5pdC5yZWdpc3Rlcih0eXBlLCAnbWcnLCAxZS0zLCAnZycpO1xuICBCYXNlVW5pdC5yZWdpc3Rlcih0eXBlLCAnbmcnLCAxZS05LCAnZycpO1xuICBCYXNlVW5pdC5yZWdpc3Rlcih0eXBlLCAncGcnLCAxZS0xMiwgJ2cnKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ2xiJyw0NTMuNTkyMzcsJ2cnKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwnb3onLDAuMDYyNSwnbGInKTtcbn07IiwiY29uc3QgQmFzZVVuaXQgPSByZXF1aXJlKCcuLi9iYXNlX3VuaXQnKTtcblxuY29uc3QgdHlwZSA9ICdtYXR0ZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ21vbCcsIDEpO1xuICBCYXNlVW5pdC5yZWdpc3Rlcih0eXBlLCdhdG9tcycsNi4wMmUyMywnbW9sJyk7XG59OyIsImNvbnN0IERlcml2ZWRVbml0ID0gcmVxdWlyZSgnLi4vZGVyaXZlZF91bml0Jyk7XG5cbmNvbnN0IHR5cGUgPSAnb2htJztcblxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIERlcml2ZWRVbml0LnJlZ2lzdGVyKHR5cGUsICfOqScsIFtbJ21hc3MnLCAna2cnXSwgWydsZW5ndGgnLCAnbSddLCBbJ2xlbmd0aCcsICdtJ11dLCBbWyd0aW1lJywgJ3MnXSwgWyd0aW1lJywgJ3MnXSxbJ3RpbWUnLCAncyddLFsnY3VycmVudCcsICdBJ10sWydjdXJyZW50JywgJ0EnXV0pO1xufTsiLCJjb25zdCBEZXJpdmVkVW5pdCA9IHJlcXVpcmUoJy4uL2Rlcml2ZWRfdW5pdCcpO1xuXG5jb25zdCB0eXBlID0gJ3Bhc2NhbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xuICBEZXJpdmVkVW5pdC5yZWdpc3Rlcih0eXBlLCAnUGEnLCBbWydtYXNzJywgJ2tnJ11dLCBbWydsZW5ndGgnLCAnbSddLFsndGltZScsICdzJ10sIFsndGltZScsICdzJ11dKTtcbn07IiwiY29uc3QgRGVyaXZlZFVuaXQgPSByZXF1aXJlKCcuLi9kZXJpdmVkX3VuaXQnKTtcblxuY29uc3QgdHlwZSA9ICdzaWVtZW5zJztcblxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIERlcml2ZWRVbml0LnJlZ2lzdGVyKHR5cGUsICdTJywgW1sndGltZScsICdzJ10sIFsndGltZScsICdzJ10sWyd0aW1lJywgJ3MnXSxbJ2N1cnJlbnQnLCAnQSddLFsnY3VycmVudCcsICdBJ11dLCBbWydtYXNzJywgJ2tnJ10sIFsnbGVuZ3RoJywgJ20nXSwgWydsZW5ndGgnLCAnbSddXSk7XG59OyIsImNvbnN0IEJhc2VVbml0ID0gcmVxdWlyZSgnLi4vYmFzZV91bml0Jyk7XG5cbmNvbnN0IHR5cGUgPSAnc3RvcmFnZSc7XG5cbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xuICBCYXNlVW5pdC5yZWdpc3Rlcih0eXBlLCAnYml0JywgMSk7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsICdieXRlJywwLjEyNSwgJ2JpdCcpO1xuICBCYXNlVW5pdC5yZWdpc3Rlcih0eXBlLCAna2J5dGUnLCAxZTMsICdieXRlJyk7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsICdNYnl0ZScsIDFlNiwgJ2J5dGUnKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ0dieXRlJywgMWU5LCAnYnl0ZScpO1xuICBCYXNlVW5pdC5yZWdpc3Rlcih0eXBlLCAnVGJ5dGUnLCAxZTEyLCAnYnl0ZScpO1xuICBCYXNlVW5pdC5yZWdpc3Rlcih0eXBlLCAnUG0nLCAxZTE1LCAnYnl0ZScpO1xuICBCYXNlVW5pdC5yZWdpc3Rlcih0eXBlLCAnRWJ5dGUnLCAxZTE4LCAnYnl0ZScpO1xuICBCYXNlVW5pdC5yZWdpc3Rlcih0eXBlLCAnWmJ5dGUnLCAxZTIxLCAnYnl0ZScpO1xuICBCYXNlVW5pdC5yZWdpc3Rlcih0eXBlLCAnWWJ5dGUnLCAxZTI0LCAnYnl0ZScpO1xufTsiLCJjb25zdCBCYXNlVW5pdCA9IHJlcXVpcmUoJy4uL2Jhc2VfdW5pdCcpO1xuXG5jb25zdCB0eXBlID0gJ3RlbXAnO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ0snLCAxKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ8KwQycsIDEsICdLJyk7IC8vIFRPRE9cbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ8KwRicsIDkgLyA1LCAnwrBDJyk7XG5cbn07IiwiY29uc3QgRGVyaXZlZFVuaXQgPSByZXF1aXJlKCcuLi9kZXJpdmVkX3VuaXQnKTtcblxuY29uc3QgdHlwZSA9ICd0ZWxzYSc7XG5cbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xuICBEZXJpdmVkVW5pdC5yZWdpc3Rlcih0eXBlLCAnVCcsIFtbJ21hc3MnLCAna2cnXV0sIFtbJ3RpbWUnLCAncyddLCBbJ3RpbWUnLCAncyddLFsnY3VycmVudCcsJ0EnXV0pO1xufTsiLCJjb25zdCBCYXNlVW5pdCA9IHJlcXVpcmUoJy4uL2Jhc2VfdW5pdCcpO1xuXG5jb25zdCB0eXBlID0gJ3RpbWUnO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ3MnLCAxKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ2RzJywgMWUtMSwgJ3MnKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ2NzJywgMWUtMiwgJ3MnKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ2tzJywgMWUzLCAncycpO1xuICBCYXNlVW5pdC5yZWdpc3Rlcih0eXBlLCAnbXMnLCAxZS0zLCAncycpO1xuICBCYXNlVW5pdC5yZWdpc3Rlcih0eXBlLCAnwrVzJywgMWUtNiwgJ3MnKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ25zJywgMWUtOSwgJ3MnKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ3BzJywgMWUtMTIsICdzJyk7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsICdtaW4nLDYwLCAncycpO1xuICBCYXNlVW5pdC5yZWdpc3Rlcih0eXBlLCAnaHInLDYwLCAnbWluJyk7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsJ2QnLDI0LCAnaHInKTtcbiAgQmFzZVVuaXQucmVnaXN0ZXIodHlwZSwgJ3cnLDcsICdkJyk7XG4gIEJhc2VVbml0LnJlZ2lzdGVyKHR5cGUsICdtb24nLDQsJ3cnKTtcbn07IiwiY29uc3QgRGVyaXZlZFVuaXQgPSByZXF1aXJlKCcuLi9kZXJpdmVkX3VuaXQnKTtcblxuY29uc3QgdHlwZSA9ICd2b2x0JztcblxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIERlcml2ZWRVbml0LnJlZ2lzdGVyKHR5cGUsICdWJywgW1snbWFzcycsICdrZyddLCBbJ2xlbmd0aCcsICdtJ10sIFsnbGVuZ3RoJywgJ20nXV0sIFtbJ3RpbWUnLCAncyddLFsndGltZScsICdzJ10sIFsndGltZScsICdzJ10sWydjdXJyZW50JywgJ0EnXV0pO1xufTsiLCJjb25zdCBEZXJpdmVkVW5pdCA9IHJlcXVpcmUoJy4uL2Rlcml2ZWRfdW5pdCcpO1xuXG5jb25zdCB0eXBlID0gJ3dhdHQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgRGVyaXZlZFVuaXQucmVnaXN0ZXIodHlwZSwgJ1cnLCBbWydtYXNzJywgJ2tnJ10sIFsnbGVuZ3RoJywgJ20nXSwgWydsZW5ndGgnLCAnbSddXSwgW1sndGltZScsICdzJ10sIFsndGltZScsICdzJ10sWyd0aW1lJywgJ3MnXV0pO1xufTsiLCJjb25zdCBEZXJpdmVkVW5pdCA9IHJlcXVpcmUoJy4uL2Rlcml2ZWRfdW5pdCcpO1xuXG5jb25zdCB0eXBlID0gJ3dlYmVyJztcblxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIERlcml2ZWRVbml0LnJlZ2lzdGVyKHR5cGUsICdXYicsIFtbJ21hc3MnLCAna2cnXSwgWydsZW5ndGgnLCAnbSddLCBbJ2xlbmd0aCcsICdtJ11dLCBbWyd0aW1lJywgJ3MnXSwgWyd0aW1lJywgJ3MnXSxbJ2N1cnJlbnQnLCdBJ11dKTtcbn07IiwiY29uc3QgYXBwID0gcmVxdWlyZSgnLi4vYXBwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKG11bFBhaXJzLCBkaXZQYWlycykgPT4ge1xuICBjb25zdCBtdWxDbGFzc2VzID0gW107XG4gIGNvbnN0IGRpdkNsYXNzZXMgPSBbXTtcblxuICBjb25zdCBxdWV1ZSA9IFtdO1xuICBtdWxQYWlycy5mb3JFYWNoKG11bFBhaXIgPT4ge1xuICAgIGNvbnN0IHR5cGUgPSBtdWxQYWlyWzBdO1xuICAgIGNvbnN0IHN5bWJvbCA9IG11bFBhaXJbMV07XG4gICAgcXVldWUucHVzaCh7XG4gICAgICBjbHM6IGFwcC5nZXRVbml0Q2xhc3ModHlwZSwgc3ltYm9sKSxcbiAgICAgIGludmVyc2U6IGZhbHNlXG4gICAgfSk7XG4gIH0pO1xuICBkaXZQYWlycy5mb3JFYWNoKGRpdlBhaXIgPT4ge1xuICAgIGNvbnN0IHR5cGUgPSBkaXZQYWlyWzBdO1xuICAgIGNvbnN0IHN5bWJvbCA9IGRpdlBhaXJbMV07XG4gICAgcXVldWUucHVzaCh7XG4gICAgICBjbHM6IGFwcC5nZXRVbml0Q2xhc3ModHlwZSwgc3ltYm9sKSxcbiAgICAgIGludmVyc2U6IHRydWVcbiAgICB9KTtcbiAgfSk7XG5cbiAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBlID0gcXVldWUuc2hpZnQoKTtcbiAgICBpZiAoZS5jbHMuQkFTRSkge1xuICAgICAgKGUuaW52ZXJzZSA/IGRpdkNsYXNzZXMgOiBtdWxDbGFzc2VzKS5wdXNoKGUuY2xzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZS5jbHMuTVVMUy5mb3JFYWNoKG11bENsYXNzID0+IHtcbiAgICAgICAgcXVldWUucHVzaCh7XG4gICAgICAgICAgY2xzOiBtdWxDbGFzcyxcbiAgICAgICAgICBpbnZlcnNlOiBlLmludmVyc2VcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGUuY2xzLkRJVlMuZm9yRWFjaChkaXZDbGFzcyA9PiB7XG4gICAgICAgIHF1ZXVlLnB1c2goe1xuICAgICAgICAgIGNsczogZGl2Q2xhc3MsXG4gICAgICAgICAgaW52ZXJzZTogIWUuaW52ZXJzZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7bXVsQ2xhc3NlcywgZGl2Q2xhc3Nlc31cbn07IiwibW9kdWxlLmV4cG9ydHMgPSAobXVsQ2xhc3NlcywgZGl2Q2xhc3NlcykgPT4ge1xuICB2YXIgcXVhbnRpdHkgPSAxO1xuICBjb25zdCB0eXBlcyA9IHt9O1xuICBtdWxDbGFzc2VzLmZvckVhY2gobXVsQ2xhc3MgPT4ge1xuICAgIHF1YW50aXR5ICo9IG11bENsYXNzLlFVQU5USVRZO1xuICAgIGlmICh0eXBlcy5oYXNPd25Qcm9wZXJ0eShtdWxDbGFzcy5UWVBFKSkge1xuICAgICAgdHlwZXNbbXVsQ2xhc3MuVFlQRV0rKztcbiAgICB9IGVsc2Uge1xuICAgICAgdHlwZXNbbXVsQ2xhc3MuVFlQRV0gPSAxO1xuICAgIH1cbiAgfSk7XG4gIGRpdkNsYXNzZXMuZm9yRWFjaChkaXZDbGFzcyA9PiB7XG4gICAgcXVhbnRpdHkgLz0gZGl2Q2xhc3MuUVVBTlRJVFk7XG4gICAgaWYgKHR5cGVzLmhhc093blByb3BlcnR5KGRpdkNsYXNzLlRZUEUpKSB7XG4gICAgICB0eXBlc1tkaXZDbGFzcy5UWVBFXS0tO1xuICAgIH0gZWxzZSB7XG4gICAgICB0eXBlc1tkaXZDbGFzcy5UWVBFXSA9IC0xO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHJlZmluZWRUeXBlcyA9IHt9O1xuICBmb3IgKGNvbnN0IHR5cGUgaW4gdHlwZXMpIHtcbiAgICBjb25zdCBuID0gdHlwZXNbdHlwZV07XG4gICAgaWYgKG4gIT0gMCkgcmVmaW5lZFR5cGVzW3R5cGVdID0gbjtcbiAgfVxuXG4gIHJldHVybiB7dHlwZXMsIHF1YW50aXR5fTtcbn07IiwiY29uc3QgYXBwID0gcmVxdWlyZSgnLi4vYXBwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKHN5bWJvbCkgPT4ge1xuICBjb25zdCB1bml0Q2xhc3NlcyA9IGFwcC5nZXRVbml0Q2xhc3NlcygpO1xuICBmb3IgKGNvbnN0IHVuaXRTeW1ib2wgaW4gdW5pdENsYXNzZXMpIHtcbiAgICBjb25zdCB1bml0Q2xhc3MgPSB1bml0Q2xhc3Nlc1t1bml0U3ltYm9sXTtcbiAgICBpZiAodW5pdENsYXNzLlNZTUJPTCA9PSBzeW1ib2wpIHJldHVybiB1bml0Q2xhc3M7XG4gIH1cbn07IiwiY29uc3QgZ2V0TXVsQW5kRGl2Q2xhc3NlcyA9IHJlcXVpcmUoJy4vZ2V0X211bF9hbmRfZGl2X2NsYXNzZXMnKTtcbmNvbnN0IGlkZW50aWZ5VW5pdCA9IHJlcXVpcmUoJy4vaWRlbnRpZnlfdW5pdCcpO1xuY29uc3QgZ2V0VW5pdGxlc3MgPSByZXF1aXJlKCcuL2dldF91bml0bGVzcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0TXVsQW5kRGl2Q2xhc3NlcyxcbiAgaWRlbnRpZnlVbml0LFxuICBnZXRVbml0bGVzc1xufTsiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLyohXG4gKiBAb3ZlcnZpZXcgUlNWUCAtIGEgdGlueSBpbXBsZW1lbnRhdGlvbiBvZiBQcm9taXNlcy9BKy5cbiAqIEBjb3B5cmlnaHQgQ29weXJpZ2h0IChjKSAyMDE2IFllaHVkYSBLYXR6LCBUb20gRGFsZSwgU3RlZmFuIFBlbm5lciBhbmQgY29udHJpYnV0b3JzXG4gKiBAbGljZW5zZSAgIExpY2Vuc2VkIHVuZGVyIE1JVCBsaWNlbnNlXG4gKiAgICAgICAgICAgIFNlZSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vdGlsZGVpby9yc3ZwLmpzL21hc3Rlci9MSUNFTlNFXG4gKiBAdmVyc2lvbiAgIDMuMy4zXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxuICAoZmFjdG9yeSgoZ2xvYmFsLlJTVlAgPSBnbG9iYWwuUlNWUCB8fCB7fSkpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gaW5kZXhPZihjYWxsYmFja3MsIGNhbGxiYWNrKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChjYWxsYmFja3NbaV0gPT09IGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGNhbGxiYWNrc0ZvcihvYmplY3QpIHtcbiAgdmFyIGNhbGxiYWNrcyA9IG9iamVjdC5fcHJvbWlzZUNhbGxiYWNrcztcblxuICBpZiAoIWNhbGxiYWNrcykge1xuICAgIGNhbGxiYWNrcyA9IG9iamVjdC5fcHJvbWlzZUNhbGxiYWNrcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIGNhbGxiYWNrcztcbn1cblxuLyoqXG4gIEBjbGFzcyBSU1ZQLkV2ZW50VGFyZ2V0XG4qL1xudmFyIEV2ZW50VGFyZ2V0ID0ge1xuXG4gIC8qKlxuICAgIGBSU1ZQLkV2ZW50VGFyZ2V0Lm1peGluYCBleHRlbmRzIGFuIG9iamVjdCB3aXRoIEV2ZW50VGFyZ2V0IG1ldGhvZHMuIEZvclxuICAgIEV4YW1wbGU6XG4gICAgIGBgYGphdmFzY3JpcHRcbiAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgIFJTVlAuRXZlbnRUYXJnZXQubWl4aW4ob2JqZWN0KTtcbiAgICAgb2JqZWN0Lm9uKCdmaW5pc2hlZCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAvLyBoYW5kbGUgZXZlbnRcbiAgICB9KTtcbiAgICAgb2JqZWN0LnRyaWdnZXIoJ2ZpbmlzaGVkJywgeyBkZXRhaWw6IHZhbHVlIH0pO1xuICAgIGBgYFxuICAgICBgRXZlbnRUYXJnZXQubWl4aW5gIGFsc28gd29ya3Mgd2l0aCBwcm90b3R5cGVzOlxuICAgICBgYGBqYXZhc2NyaXB0XG4gICAgbGV0IFBlcnNvbiA9IGZ1bmN0aW9uKCkge307XG4gICAgUlNWUC5FdmVudFRhcmdldC5taXhpbihQZXJzb24ucHJvdG90eXBlKTtcbiAgICAgbGV0IHllaHVkYSA9IG5ldyBQZXJzb24oKTtcbiAgICBsZXQgdG9tID0gbmV3IFBlcnNvbigpO1xuICAgICB5ZWh1ZGEub24oJ3Bva2UnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgY29uc29sZS5sb2coJ1llaHVkYSBzYXlzIE9XJyk7XG4gICAgfSk7XG4gICAgIHRvbS5vbigncG9rZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBjb25zb2xlLmxvZygnVG9tIHNheXMgT1cnKTtcbiAgICB9KTtcbiAgICAgeWVodWRhLnRyaWdnZXIoJ3Bva2UnKTtcbiAgICB0b20udHJpZ2dlcigncG9rZScpO1xuICAgIGBgYFxuICAgICBAbWV0aG9kIG1peGluXG4gICAgQGZvciBSU1ZQLkV2ZW50VGFyZ2V0XG4gICAgQHByaXZhdGVcbiAgICBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9iamVjdCB0byBleHRlbmQgd2l0aCBFdmVudFRhcmdldCBtZXRob2RzXG4gICovXG4gIG1peGluOiBmdW5jdGlvbiBtaXhpbihvYmplY3QpIHtcbiAgICBvYmplY3RbJ29uJ10gPSB0aGlzWydvbiddO1xuICAgIG9iamVjdFsnb2ZmJ10gPSB0aGlzWydvZmYnXTtcbiAgICBvYmplY3RbJ3RyaWdnZXInXSA9IHRoaXNbJ3RyaWdnZXInXTtcbiAgICBvYmplY3QuX3Byb21pc2VDYWxsYmFja3MgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfSxcblxuICAvKipcbiAgICBSZWdpc3RlcnMgYSBjYWxsYmFjayB0byBiZSBleGVjdXRlZCB3aGVuIGBldmVudE5hbWVgIGlzIHRyaWdnZXJlZFxuICAgICBgYGBqYXZhc2NyaXB0XG4gICAgb2JqZWN0Lm9uKCdldmVudCcsIGZ1bmN0aW9uKGV2ZW50SW5mbyl7XG4gICAgICAvLyBoYW5kbGUgdGhlIGV2ZW50XG4gICAgfSk7XG4gICAgIG9iamVjdC50cmlnZ2VyKCdldmVudCcpO1xuICAgIGBgYFxuICAgICBAbWV0aG9kIG9uXG4gICAgQGZvciBSU1ZQLkV2ZW50VGFyZ2V0XG4gICAgQHByaXZhdGVcbiAgICBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lIG5hbWUgb2YgdGhlIGV2ZW50IHRvIGxpc3RlbiBmb3JcbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAqL1xuICBvbjogZnVuY3Rpb24gb24oZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIHZhciBhbGxDYWxsYmFja3MgPSBjYWxsYmFja3NGb3IodGhpcyksXG4gICAgICAgIGNhbGxiYWNrcyA9IHVuZGVmaW5lZDtcblxuICAgIGNhbGxiYWNrcyA9IGFsbENhbGxiYWNrc1tldmVudE5hbWVdO1xuXG4gICAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICAgIGNhbGxiYWNrcyA9IGFsbENhbGxiYWNrc1tldmVudE5hbWVdID0gW107XG4gICAgfVxuXG4gICAgaWYgKGluZGV4T2YoY2FsbGJhY2tzLCBjYWxsYmFjaykgPT09IC0xKSB7XG4gICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgIFlvdSBjYW4gdXNlIGBvZmZgIHRvIHN0b3AgZmlyaW5nIGEgcGFydGljdWxhciBjYWxsYmFjayBmb3IgYW4gZXZlbnQ6XG4gICAgIGBgYGphdmFzY3JpcHRcbiAgICBmdW5jdGlvbiBkb1N0dWZmKCkgeyAvLyBkbyBzdHVmZiEgfVxuICAgIG9iamVjdC5vbignc3R1ZmYnLCBkb1N0dWZmKTtcbiAgICAgb2JqZWN0LnRyaWdnZXIoJ3N0dWZmJyk7IC8vIGRvU3R1ZmYgd2lsbCBiZSBjYWxsZWRcbiAgICAgLy8gVW5yZWdpc3RlciBPTkxZIHRoZSBkb1N0dWZmIGNhbGxiYWNrXG4gICAgb2JqZWN0Lm9mZignc3R1ZmYnLCBkb1N0dWZmKTtcbiAgICBvYmplY3QudHJpZ2dlcignc3R1ZmYnKTsgLy8gZG9TdHVmZiB3aWxsIE5PVCBiZSBjYWxsZWRcbiAgICBgYGBcbiAgICAgSWYgeW91IGRvbid0IHBhc3MgYSBgY2FsbGJhY2tgIGFyZ3VtZW50IHRvIGBvZmZgLCBBTEwgY2FsbGJhY2tzIGZvciB0aGVcbiAgICBldmVudCB3aWxsIG5vdCBiZSBleGVjdXRlZCB3aGVuIHRoZSBldmVudCBmaXJlcy4gRm9yIGV4YW1wbGU6XG4gICAgIGBgYGphdmFzY3JpcHRcbiAgICBsZXQgY2FsbGJhY2sxID0gZnVuY3Rpb24oKXt9O1xuICAgIGxldCBjYWxsYmFjazIgPSBmdW5jdGlvbigpe307XG4gICAgIG9iamVjdC5vbignc3R1ZmYnLCBjYWxsYmFjazEpO1xuICAgIG9iamVjdC5vbignc3R1ZmYnLCBjYWxsYmFjazIpO1xuICAgICBvYmplY3QudHJpZ2dlcignc3R1ZmYnKTsgLy8gY2FsbGJhY2sxIGFuZCBjYWxsYmFjazIgd2lsbCBiZSBleGVjdXRlZC5cbiAgICAgb2JqZWN0Lm9mZignc3R1ZmYnKTtcbiAgICBvYmplY3QudHJpZ2dlcignc3R1ZmYnKTsgLy8gY2FsbGJhY2sxIGFuZCBjYWxsYmFjazIgd2lsbCBub3QgYmUgZXhlY3V0ZWQhXG4gICAgYGBgXG4gICAgIEBtZXRob2Qgb2ZmXG4gICAgQGZvciBSU1ZQLkV2ZW50VGFyZ2V0XG4gICAgQHByaXZhdGVcbiAgICBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lIGV2ZW50IHRvIHN0b3AgbGlzdGVuaW5nIHRvXG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgb3B0aW9uYWwgYXJndW1lbnQuIElmIGdpdmVuLCBvbmx5IHRoZSBmdW5jdGlvblxuICAgIGdpdmVuIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBldmVudCdzIGNhbGxiYWNrIHF1ZXVlLiBJZiBubyBgY2FsbGJhY2tgXG4gICAgYXJndW1lbnQgaXMgZ2l2ZW4sIGFsbCBjYWxsYmFja3Mgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGV2ZW50J3MgY2FsbGJhY2tcbiAgICBxdWV1ZS5cbiAgKi9cbiAgb2ZmOiBmdW5jdGlvbiBvZmYoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBhbGxDYWxsYmFja3MgPSBjYWxsYmFja3NGb3IodGhpcyksXG4gICAgICAgIGNhbGxiYWNrcyA9IHVuZGVmaW5lZCxcbiAgICAgICAgaW5kZXggPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICBhbGxDYWxsYmFja3NbZXZlbnROYW1lXSA9IFtdO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNhbGxiYWNrcyA9IGFsbENhbGxiYWNrc1tldmVudE5hbWVdO1xuXG4gICAgaW5kZXggPSBpbmRleE9mKGNhbGxiYWNrcywgY2FsbGJhY2spO1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgIFVzZSBgdHJpZ2dlcmAgdG8gZmlyZSBjdXN0b20gZXZlbnRzLiBGb3IgZXhhbXBsZTpcbiAgICAgYGBgamF2YXNjcmlwdFxuICAgIG9iamVjdC5vbignZm9vJywgZnVuY3Rpb24oKXtcbiAgICAgIGNvbnNvbGUubG9nKCdmb28gZXZlbnQgaGFwcGVuZWQhJyk7XG4gICAgfSk7XG4gICAgb2JqZWN0LnRyaWdnZXIoJ2ZvbycpO1xuICAgIC8vICdmb28gZXZlbnQgaGFwcGVuZWQhJyBsb2dnZWQgdG8gdGhlIGNvbnNvbGVcbiAgICBgYGBcbiAgICAgWW91IGNhbiBhbHNvIHBhc3MgYSB2YWx1ZSBhcyBhIHNlY29uZCBhcmd1bWVudCB0byBgdHJpZ2dlcmAgdGhhdCB3aWxsIGJlXG4gICAgcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIGFsbCBldmVudCBsaXN0ZW5lcnMgZm9yIHRoZSBldmVudDpcbiAgICAgYGBgamF2YXNjcmlwdFxuICAgIG9iamVjdC5vbignZm9vJywgZnVuY3Rpb24odmFsdWUpe1xuICAgICAgY29uc29sZS5sb2codmFsdWUubmFtZSk7XG4gICAgfSk7XG4gICAgIG9iamVjdC50cmlnZ2VyKCdmb28nLCB7IG5hbWU6ICdiYXInIH0pO1xuICAgIC8vICdiYXInIGxvZ2dlZCB0byB0aGUgY29uc29sZVxuICAgIGBgYFxuICAgICBAbWV0aG9kIHRyaWdnZXJcbiAgICBAZm9yIFJTVlAuRXZlbnRUYXJnZXRcbiAgICBAcHJpdmF0ZVxuICAgIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gYmUgdHJpZ2dlcmVkXG4gICAgQHBhcmFtIHsqfSBvcHRpb25zIG9wdGlvbmFsIHZhbHVlIHRvIGJlIHBhc3NlZCB0byBhbnkgZXZlbnQgaGFuZGxlcnMgZm9yXG4gICAgdGhlIGdpdmVuIGBldmVudE5hbWVgXG4gICovXG4gIHRyaWdnZXI6IGZ1bmN0aW9uIHRyaWdnZXIoZXZlbnROYW1lLCBvcHRpb25zLCBsYWJlbCkge1xuICAgIHZhciBhbGxDYWxsYmFja3MgPSBjYWxsYmFja3NGb3IodGhpcyksXG4gICAgICAgIGNhbGxiYWNrcyA9IHVuZGVmaW5lZCxcbiAgICAgICAgY2FsbGJhY2sgPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoY2FsbGJhY2tzID0gYWxsQ2FsbGJhY2tzW2V2ZW50TmFtZV0pIHtcbiAgICAgIC8vIERvbid0IGNhY2hlIHRoZSBjYWxsYmFja3MubGVuZ3RoIHNpbmNlIGl0IG1heSBncm93XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrc1tpXTtcblxuICAgICAgICBjYWxsYmFjayhvcHRpb25zLCBsYWJlbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgY29uZmlnID0ge1xuICBpbnN0cnVtZW50OiBmYWxzZVxufTtcblxuRXZlbnRUYXJnZXRbJ21peGluJ10oY29uZmlnKTtcblxuZnVuY3Rpb24gY29uZmlndXJlKG5hbWUsIHZhbHVlKSB7XG4gIGlmIChuYW1lID09PSAnb25lcnJvcicpIHtcbiAgICAvLyBoYW5kbGUgZm9yIGxlZ2FjeSB1c2VycyB0aGF0IGV4cGVjdCB0aGUgYWN0dWFsXG4gICAgLy8gZXJyb3IgdG8gYmUgcGFzc2VkIHRvIHRoZWlyIGZ1bmN0aW9uIGFkZGVkIHZpYVxuICAgIC8vIGBSU1ZQLmNvbmZpZ3VyZSgnb25lcnJvcicsIHNvbWVGdW5jdGlvbkhlcmUpO2BcbiAgICBjb25maWdbJ29uJ10oJ2Vycm9yJywgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgY29uZmlnW25hbWVdID0gdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbmZpZ1tuYW1lXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvYmplY3RPckZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJiB4ICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc01heWJlVGhlbmFibGUoeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdvYmplY3QnICYmIHggIT09IG51bGw7XG59XG5cbnZhciBfaXNBcnJheSA9IHVuZGVmaW5lZDtcbmlmICghQXJyYXkuaXNBcnJheSkge1xuICBfaXNBcnJheSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcbn0gZWxzZSB7XG4gIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbn1cblxudmFyIGlzQXJyYXkgPSBfaXNBcnJheTtcblxuLy8gRGF0ZS5ub3cgaXMgbm90IGF2YWlsYWJsZSBpbiBicm93c2VycyA8IElFOVxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZS9ub3cjQ29tcGF0aWJpbGl0eVxudmFyIG5vdyA9IERhdGUubm93IHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xufTtcblxuZnVuY3Rpb24gRigpIHt9XG5cbnZhciBvX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gKG8pIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZWNvbmQgYXJndW1lbnQgbm90IHN1cHBvcnRlZCcpO1xuICB9XG4gIGlmICh0eXBlb2YgbyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG4gIEYucHJvdG90eXBlID0gbztcbiAgcmV0dXJuIG5ldyBGKCk7XG59O1xuXG52YXIgcXVldWUgPSBbXTtcblxuZnVuY3Rpb24gc2NoZWR1bGVGbHVzaCgpIHtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGVudHJ5ID0gcXVldWVbaV07XG5cbiAgICAgIHZhciBwYXlsb2FkID0gZW50cnkucGF5bG9hZDtcblxuICAgICAgcGF5bG9hZC5ndWlkID0gcGF5bG9hZC5rZXkgKyBwYXlsb2FkLmlkO1xuICAgICAgcGF5bG9hZC5jaGlsZEd1aWQgPSBwYXlsb2FkLmtleSArIHBheWxvYWQuY2hpbGRJZDtcbiAgICAgIGlmIChwYXlsb2FkLmVycm9yKSB7XG4gICAgICAgIHBheWxvYWQuc3RhY2sgPSBwYXlsb2FkLmVycm9yLnN0YWNrO1xuICAgICAgfVxuXG4gICAgICBjb25maWdbJ3RyaWdnZXInXShlbnRyeS5uYW1lLCBlbnRyeS5wYXlsb2FkKTtcbiAgICB9XG4gICAgcXVldWUubGVuZ3RoID0gMDtcbiAgfSwgNTApO1xufVxuZnVuY3Rpb24gaW5zdHJ1bWVudChldmVudE5hbWUsIHByb21pc2UsIGNoaWxkKSB7XG4gIGlmICgxID09PSBxdWV1ZS5wdXNoKHtcbiAgICBuYW1lOiBldmVudE5hbWUsXG4gICAgcGF5bG9hZDoge1xuICAgICAga2V5OiBwcm9taXNlLl9ndWlkS2V5LFxuICAgICAgaWQ6IHByb21pc2UuX2lkLFxuICAgICAgZXZlbnROYW1lOiBldmVudE5hbWUsXG4gICAgICBkZXRhaWw6IHByb21pc2UuX3Jlc3VsdCxcbiAgICAgIGNoaWxkSWQ6IGNoaWxkICYmIGNoaWxkLl9pZCxcbiAgICAgIGxhYmVsOiBwcm9taXNlLl9sYWJlbCxcbiAgICAgIHRpbWVTdGFtcDogbm93KCksXG4gICAgICBlcnJvcjogY29uZmlnW1wiaW5zdHJ1bWVudC13aXRoLXN0YWNrXCJdID8gbmV3IEVycm9yKHByb21pc2UuX2xhYmVsKSA6IG51bGxcbiAgICB9IH0pKSB7XG4gICAgc2NoZWR1bGVGbHVzaCgpO1xuICB9XG59XG5cbi8qKlxuICBgUlNWUC5Qcm9taXNlLnJlc29sdmVgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgcmVzb2x2ZWQgd2l0aCB0aGVcbiAgcGFzc2VkIGB2YWx1ZWAuIEl0IGlzIHNob3J0aGFuZCBmb3IgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gbmV3IFJTVlAuUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHJlc29sdmUoMSk7XG4gIH0pO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gdmFsdWUgPT09IDFcbiAgfSk7XG4gIGBgYFxuXG4gIEluc3RlYWQgb2Ygd3JpdGluZyB0aGUgYWJvdmUsIHlvdXIgY29kZSBub3cgc2ltcGx5IGJlY29tZXMgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gUlNWUC5Qcm9taXNlLnJlc29sdmUoMSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCByZXNvbHZlXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHsqfSBvYmplY3QgdmFsdWUgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIHdpdGhcbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgaWRlbnRpZnlpbmcgdGhlIHJldHVybmVkIHByb21pc2UuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgZnVsZmlsbGVkIHdpdGggdGhlIGdpdmVuXG4gIGB2YWx1ZWBcbiovXG5mdW5jdGlvbiByZXNvbHZlJDEob2JqZWN0LCBsYWJlbCkge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuXG4gIGlmIChvYmplY3QgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0LmNvbnN0cnVjdG9yID09PSBDb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cblxuICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wLCBsYWJlbCk7XG4gIHJlc29sdmUocHJvbWlzZSwgb2JqZWN0KTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIHdpdGhPd25Qcm9taXNlKCkge1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcignQSBwcm9taXNlcyBjYWxsYmFjayBjYW5ub3QgcmV0dXJuIHRoYXQgc2FtZSBwcm9taXNlLicpO1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIFBFTkRJTkcgPSB2b2lkIDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG5cbnZhciBHRVRfVEhFTl9FUlJPUiA9IG5ldyBFcnJvck9iamVjdCgpO1xuXG5mdW5jdGlvbiBnZXRUaGVuKHByb21pc2UpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIEdFVF9USEVOX0VSUk9SLmVycm9yID0gZXJyb3I7XG4gICAgcmV0dXJuIEdFVF9USEVOX0VSUk9SO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyeVRoZW4odGhlbiwgdmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcikge1xuICB0cnkge1xuICAgIHRoZW4uY2FsbCh2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSwgdGhlbikge1xuICBjb25maWcuYXN5bmMoZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICB2YXIgc2VhbGVkID0gZmFsc2U7XG4gICAgdmFyIGVycm9yID0gdHJ5VGhlbih0aGVuLCB0aGVuYWJsZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoc2VhbGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlYWxlZCA9IHRydWU7XG4gICAgICBpZiAodGhlbmFibGUgIT09IHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUocHJvbWlzZSwgdmFsdWUsIHVuZGVmaW5lZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBpZiAoc2VhbGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlYWxlZCA9IHRydWU7XG5cbiAgICAgIHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgIH0sICdTZXR0bGU6ICcgKyAocHJvbWlzZS5fbGFiZWwgfHwgJyB1bmtub3duIHByb21pc2UnKSk7XG5cbiAgICBpZiAoIXNlYWxlZCAmJiBlcnJvcikge1xuICAgICAgc2VhbGVkID0gdHJ1ZTtcbiAgICAgIHJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgfVxuICB9LCBwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlT3duVGhlbmFibGUocHJvbWlzZSwgdGhlbmFibGUpIHtcbiAgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gRlVMRklMTEVEKSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgfSBlbHNlIGlmICh0aGVuYWJsZS5fc3RhdGUgPT09IFJFSkVDVEVEKSB7XG4gICAgdGhlbmFibGUuX29uRXJyb3IgPSBudWxsO1xuICAgIHJlamVjdChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgfSBlbHNlIHtcbiAgICBzdWJzY3JpYmUodGhlbmFibGUsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhlbmFibGUgIT09IHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUocHJvbWlzZSwgdmFsdWUsIHVuZGVmaW5lZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlLCB0aGVuJCQpIHtcbiAgaWYgKG1heWJlVGhlbmFibGUuY29uc3RydWN0b3IgPT09IHByb21pc2UuY29uc3RydWN0b3IgJiYgdGhlbiQkID09PSB0aGVuICYmIHByb21pc2UuY29uc3RydWN0b3IucmVzb2x2ZSA9PT0gcmVzb2x2ZSQxKSB7XG4gICAgaGFuZGxlT3duVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoZW4kJCA9PT0gR0VUX1RIRU5fRVJST1IpIHtcbiAgICAgIHJlamVjdChwcm9taXNlLCBHRVRfVEhFTl9FUlJPUi5lcnJvcik7XG4gICAgfSBlbHNlIGlmICh0aGVuJCQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24odGhlbiQkKSkge1xuICAgICAgaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpIHtcbiAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAob2JqZWN0T3JGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIHZhbHVlLCBnZXRUaGVuKHZhbHVlKSk7XG4gIH0gZWxzZSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVibGlzaFJlamVjdGlvbihwcm9taXNlKSB7XG4gIGlmIChwcm9taXNlLl9vbkVycm9yKSB7XG4gICAgcHJvbWlzZS5fb25FcnJvcihwcm9taXNlLl9yZXN1bHQpO1xuICB9XG5cbiAgcHVibGlzaChwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gZnVsZmlsbChwcm9taXNlLCB2YWx1ZSkge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9taXNlLl9yZXN1bHQgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fc3RhdGUgPSBGVUxGSUxMRUQ7XG5cbiAgaWYgKHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChjb25maWcuaW5zdHJ1bWVudCkge1xuICAgICAgaW5zdHJ1bWVudCgnZnVsZmlsbGVkJywgcHJvbWlzZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5hc3luYyhwdWJsaXNoLCBwcm9taXNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWplY3QocHJvbWlzZSwgcmVhc29uKSB7XG4gIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gUEVORElORykge1xuICAgIHJldHVybjtcbiAgfVxuICBwcm9taXNlLl9zdGF0ZSA9IFJFSkVDVEVEO1xuICBwcm9taXNlLl9yZXN1bHQgPSByZWFzb247XG4gIGNvbmZpZy5hc3luYyhwdWJsaXNoUmVqZWN0aW9uLCBwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gc3Vic2NyaWJlKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKSB7XG4gIHZhciBzdWJzY3JpYmVycyA9IHBhcmVudC5fc3Vic2NyaWJlcnM7XG4gIHZhciBsZW5ndGggPSBzdWJzY3JpYmVycy5sZW5ndGg7XG5cbiAgcGFyZW50Ll9vbkVycm9yID0gbnVsbDtcblxuICBzdWJzY3JpYmVyc1tsZW5ndGhdID0gY2hpbGQ7XG4gIHN1YnNjcmliZXJzW2xlbmd0aCArIEZVTEZJTExFRF0gPSBvbkZ1bGZpbGxtZW50O1xuICBzdWJzY3JpYmVyc1tsZW5ndGggKyBSRUpFQ1RFRF0gPSBvblJlamVjdGlvbjtcblxuICBpZiAobGVuZ3RoID09PSAwICYmIHBhcmVudC5fc3RhdGUpIHtcbiAgICBjb25maWcuYXN5bmMocHVibGlzaCwgcGFyZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwdWJsaXNoKHByb21pc2UpIHtcbiAgdmFyIHN1YnNjcmliZXJzID0gcHJvbWlzZS5fc3Vic2NyaWJlcnM7XG4gIHZhciBzZXR0bGVkID0gcHJvbWlzZS5fc3RhdGU7XG5cbiAgaWYgKGNvbmZpZy5pbnN0cnVtZW50KSB7XG4gICAgaW5zdHJ1bWVudChzZXR0bGVkID09PSBGVUxGSUxMRUQgPyAnZnVsZmlsbGVkJyA6ICdyZWplY3RlZCcsIHByb21pc2UpO1xuICB9XG5cbiAgaWYgKHN1YnNjcmliZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjaGlsZCA9IHVuZGVmaW5lZCxcbiAgICAgIGNhbGxiYWNrID0gdW5kZWZpbmVkLFxuICAgICAgZGV0YWlsID0gcHJvbWlzZS5fcmVzdWx0O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic2NyaWJlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICBjaGlsZCA9IHN1YnNjcmliZXJzW2ldO1xuICAgIGNhbGxiYWNrID0gc3Vic2NyaWJlcnNbaSArIHNldHRsZWRdO1xuXG4gICAgaWYgKGNoaWxkKSB7XG4gICAgICBpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBjaGlsZCwgY2FsbGJhY2ssIGRldGFpbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKGRldGFpbCk7XG4gICAgfVxuICB9XG5cbiAgcHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoID0gMDtcbn1cblxuZnVuY3Rpb24gRXJyb3JPYmplY3QoKSB7XG4gIHRoaXMuZXJyb3IgPSBudWxsO1xufVxuXG52YXIgVFJZX0NBVENIX0VSUk9SID0gbmV3IEVycm9yT2JqZWN0KCk7XG5cbmZ1bmN0aW9uIHRyeUNhdGNoKGNhbGxiYWNrLCBkZXRhaWwpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gY2FsbGJhY2soZGV0YWlsKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIFRSWV9DQVRDSF9FUlJPUi5lcnJvciA9IGU7XG4gICAgcmV0dXJuIFRSWV9DQVRDSF9FUlJPUjtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBwcm9taXNlLCBjYWxsYmFjaywgZGV0YWlsKSB7XG4gIHZhciBoYXNDYWxsYmFjayA9IGlzRnVuY3Rpb24oY2FsbGJhY2spLFxuICAgICAgdmFsdWUgPSB1bmRlZmluZWQsXG4gICAgICBlcnJvciA9IHVuZGVmaW5lZCxcbiAgICAgIHN1Y2NlZWRlZCA9IHVuZGVmaW5lZCxcbiAgICAgIGZhaWxlZCA9IHVuZGVmaW5lZDtcblxuICBpZiAoaGFzQ2FsbGJhY2spIHtcbiAgICB2YWx1ZSA9IHRyeUNhdGNoKGNhbGxiYWNrLCBkZXRhaWwpO1xuXG4gICAgaWYgKHZhbHVlID09PSBUUllfQ0FUQ0hfRVJST1IpIHtcbiAgICAgIGZhaWxlZCA9IHRydWU7XG4gICAgICBlcnJvciA9IHZhbHVlLmVycm9yO1xuICAgICAgdmFsdWUgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWNjZWVkZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkge1xuICAgICAgcmVqZWN0KHByb21pc2UsIHdpdGhPd25Qcm9taXNlKCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGRldGFpbDtcbiAgICBzdWNjZWVkZWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgLy8gbm9vcFxuICB9IGVsc2UgaWYgKGhhc0NhbGxiYWNrICYmIHN1Y2NlZWRlZCkge1xuICAgICAgcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChmYWlsZWQpIHtcbiAgICAgIHJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBGVUxGSUxMRUQpIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gUkVKRUNURUQpIHtcbiAgICAgIHJlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbml0aWFsaXplUHJvbWlzZShwcm9taXNlLCByZXNvbHZlcikge1xuICB2YXIgcmVzb2x2ZWQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICByZXNvbHZlcihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChyZXNvbHZlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXNvbHZlZCA9IHRydWU7XG4gICAgICByZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBpZiAocmVzb2x2ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZWplY3QocHJvbWlzZSwgZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbiwgbGFiZWwpIHtcbiAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHM7XG5cbiAgdmFyIHBhcmVudCA9IHRoaXM7XG4gIHZhciBzdGF0ZSA9IHBhcmVudC5fc3RhdGU7XG5cbiAgaWYgKHN0YXRlID09PSBGVUxGSUxMRUQgJiYgIW9uRnVsZmlsbG1lbnQgfHwgc3RhdGUgPT09IFJFSkVDVEVEICYmICFvblJlamVjdGlvbikge1xuICAgIGNvbmZpZy5pbnN0cnVtZW50ICYmIGluc3RydW1lbnQoJ2NoYWluZWQnLCBwYXJlbnQsIHBhcmVudCk7XG4gICAgcmV0dXJuIHBhcmVudDtcbiAgfVxuXG4gIHBhcmVudC5fb25FcnJvciA9IG51bGw7XG5cbiAgdmFyIGNoaWxkID0gbmV3IHBhcmVudC5jb25zdHJ1Y3Rvcihub29wLCBsYWJlbCk7XG4gIHZhciByZXN1bHQgPSBwYXJlbnQuX3Jlc3VsdDtcblxuICBjb25maWcuaW5zdHJ1bWVudCAmJiBpbnN0cnVtZW50KCdjaGFpbmVkJywgcGFyZW50LCBjaGlsZCk7XG5cbiAgaWYgKHN0YXRlKSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjYWxsYmFjayA9IF9hcmd1bWVudHNbc3RhdGUgLSAxXTtcbiAgICAgIGNvbmZpZy5hc3luYyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBpbnZva2VDYWxsYmFjayhzdGF0ZSwgY2hpbGQsIGNhbGxiYWNrLCByZXN1bHQpO1xuICAgICAgfSk7XG4gICAgfSkoKTtcbiAgfSBlbHNlIHtcbiAgICBzdWJzY3JpYmUocGFyZW50LCBjaGlsZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkO1xufVxuXG5mdW5jdGlvbiBtYWtlU2V0dGxlZFJlc3VsdChzdGF0ZSwgcG9zaXRpb24sIHZhbHVlKSB7XG4gIGlmIChzdGF0ZSA9PT0gRlVMRklMTEVEKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXRlOiAnZnVsZmlsbGVkJyxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXRlOiAncmVqZWN0ZWQnLFxuICAgICAgcmVhc29uOiB2YWx1ZVxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gRW51bWVyYXRvcihDb25zdHJ1Y3RvciwgaW5wdXQsIGFib3J0T25SZWplY3QsIGxhYmVsKSB7XG4gIHRoaXMuX2luc3RhbmNlQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjtcbiAgdGhpcy5wcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3AsIGxhYmVsKTtcbiAgdGhpcy5fYWJvcnRPblJlamVjdCA9IGFib3J0T25SZWplY3Q7XG5cbiAgaWYgKHRoaXMuX3ZhbGlkYXRlSW5wdXQoaW5wdXQpKSB7XG4gICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcbiAgICB0aGlzLmxlbmd0aCA9IGlucHV0Lmxlbmd0aDtcbiAgICB0aGlzLl9yZW1haW5pbmcgPSBpbnB1dC5sZW5ndGg7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGZ1bGZpbGwodGhpcy5wcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxlbmd0aCA9IHRoaXMubGVuZ3RoIHx8IDA7XG4gICAgICB0aGlzLl9lbnVtZXJhdGUoKTtcbiAgICAgIGlmICh0aGlzLl9yZW1haW5pbmcgPT09IDApIHtcbiAgICAgICAgZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlamVjdCh0aGlzLnByb21pc2UsIHRoaXMuX3ZhbGlkYXRpb25FcnJvcigpKTtcbiAgfVxufVxuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fdmFsaWRhdGVJbnB1dCA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICByZXR1cm4gaXNBcnJheShpbnB1dCk7XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fdmFsaWRhdGlvbkVycm9yID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IEVycm9yKCdBcnJheSBNZXRob2RzIG11c3QgYmUgcHJvdmlkZWQgYW4gQXJyYXknKTtcbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9yZXN1bHQgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX2VudW1lcmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZTtcbiAgdmFyIGlucHV0ID0gdGhpcy5faW5wdXQ7XG5cbiAgZm9yICh2YXIgaSA9IDA7IHByb21pc2UuX3N0YXRlID09PSBQRU5ESU5HICYmIGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHRoaXMuX2VhY2hFbnRyeShpbnB1dFtpXSwgaSk7XG4gIH1cbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl9zZXR0bGVNYXliZVRoZW5hYmxlID0gZnVuY3Rpb24gKGVudHJ5LCBpKSB7XG4gIHZhciBjID0gdGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvcjtcbiAgdmFyIHJlc29sdmUgPSBjLnJlc29sdmU7XG5cbiAgaWYgKHJlc29sdmUgPT09IHJlc29sdmUkMSkge1xuICAgIHZhciB0aGVuJCQgPSBnZXRUaGVuKGVudHJ5KTtcblxuICAgIGlmICh0aGVuJCQgPT09IHRoZW4gJiYgZW50cnkuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgICBlbnRyeS5fb25FcnJvciA9IG51bGw7XG4gICAgICB0aGlzLl9zZXR0bGVkQXQoZW50cnkuX3N0YXRlLCBpLCBlbnRyeS5fcmVzdWx0KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGVuJCQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuX3JlbWFpbmluZy0tO1xuICAgICAgdGhpcy5fcmVzdWx0W2ldID0gdGhpcy5fbWFrZVJlc3VsdChGVUxGSUxMRUQsIGksIGVudHJ5KTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IFByb21pc2UpIHtcbiAgICAgIHZhciBwcm9taXNlID0gbmV3IGMobm9vcCk7XG4gICAgICBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIGVudHJ5LCB0aGVuJCQpO1xuICAgICAgdGhpcy5fd2lsbFNldHRsZUF0KHByb21pc2UsIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl93aWxsU2V0dGxlQXQobmV3IGMoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoZW50cnkpO1xuICAgICAgfSksIGkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLl93aWxsU2V0dGxlQXQocmVzb2x2ZShlbnRyeSksIGkpO1xuICB9XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fZWFjaEVudHJ5ID0gZnVuY3Rpb24gKGVudHJ5LCBpKSB7XG4gIGlmIChpc01heWJlVGhlbmFibGUoZW50cnkpKSB7XG4gICAgdGhpcy5fc2V0dGxlTWF5YmVUaGVuYWJsZShlbnRyeSwgaSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fcmVtYWluaW5nLS07XG4gICAgdGhpcy5fcmVzdWx0W2ldID0gdGhpcy5fbWFrZVJlc3VsdChGVUxGSUxMRUQsIGksIGVudHJ5KTtcbiAgfVxufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX3NldHRsZWRBdCA9IGZ1bmN0aW9uIChzdGF0ZSwgaSwgdmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzLnByb21pc2U7XG5cbiAgaWYgKHByb21pc2UuX3N0YXRlID09PSBQRU5ESU5HKSB7XG4gICAgdGhpcy5fcmVtYWluaW5nLS07XG5cbiAgICBpZiAodGhpcy5fYWJvcnRPblJlamVjdCAmJiBzdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICAgIHJlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Jlc3VsdFtpXSA9IHRoaXMuX21ha2VSZXN1bHQoc3RhdGUsIGksIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICB9XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fbWFrZVJlc3VsdCA9IGZ1bmN0aW9uIChzdGF0ZSwgaSwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX3dpbGxTZXR0bGVBdCA9IGZ1bmN0aW9uIChwcm9taXNlLCBpKSB7XG4gIHZhciBlbnVtZXJhdG9yID0gdGhpcztcblxuICBzdWJzY3JpYmUocHJvbWlzZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZW51bWVyYXRvci5fc2V0dGxlZEF0KEZVTEZJTExFRCwgaSwgdmFsdWUpO1xuICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgcmV0dXJuIGVudW1lcmF0b3IuX3NldHRsZWRBdChSRUpFQ1RFRCwgaSwgcmVhc29uKTtcbiAgfSk7XG59O1xuXG4vKipcbiAgYFJTVlAuUHJvbWlzZS5hbGxgIGFjY2VwdHMgYW4gYXJyYXkgb2YgcHJvbWlzZXMsIGFuZCByZXR1cm5zIGEgbmV3IHByb21pc2Ugd2hpY2hcbiAgaXMgZnVsZmlsbGVkIHdpdGggYW4gYXJyYXkgb2YgZnVsZmlsbG1lbnQgdmFsdWVzIGZvciB0aGUgcGFzc2VkIHByb21pc2VzLCBvclxuICByZWplY3RlZCB3aXRoIHRoZSByZWFzb24gb2YgdGhlIGZpcnN0IHBhc3NlZCBwcm9taXNlIHRvIGJlIHJlamVjdGVkLiBJdCBjYXN0cyBhbGxcbiAgZWxlbWVudHMgb2YgdGhlIHBhc3NlZCBpdGVyYWJsZSB0byBwcm9taXNlcyBhcyBpdCBydW5zIHRoaXMgYWxnb3JpdGhtLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSBSU1ZQLnJlc29sdmUoMSk7XG4gIGxldCBwcm9taXNlMiA9IFJTVlAucmVzb2x2ZSgyKTtcbiAgbGV0IHByb21pc2UzID0gUlNWUC5yZXNvbHZlKDMpO1xuICBsZXQgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBSU1ZQLlByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKGFycmF5KXtcbiAgICAvLyBUaGUgYXJyYXkgaGVyZSB3b3VsZCBiZSBbIDEsIDIsIDMgXTtcbiAgfSk7XG4gIGBgYFxuXG4gIElmIGFueSBvZiB0aGUgYHByb21pc2VzYCBnaXZlbiB0byBgUlNWUC5hbGxgIGFyZSByZWplY3RlZCwgdGhlIGZpcnN0IHByb21pc2VcbiAgdGhhdCBpcyByZWplY3RlZCB3aWxsIGJlIGdpdmVuIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSByZXR1cm5lZCBwcm9taXNlcydzXG4gIHJlamVjdGlvbiBoYW5kbGVyLiBGb3IgZXhhbXBsZTpcblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gUlNWUC5yZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSBSU1ZQLnJlamVjdChuZXcgRXJyb3IoXCIyXCIpKTtcbiAgbGV0IHByb21pc2UzID0gUlNWUC5yZWplY3QobmV3IEVycm9yKFwiM1wiKSk7XG4gIGxldCBwcm9taXNlcyA9IFsgcHJvbWlzZTEsIHByb21pc2UyLCBwcm9taXNlMyBdO1xuXG4gIFJTVlAuUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oYXJyYXkpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zIGJlY2F1c2UgdGhlcmUgYXJlIHJlamVjdGVkIHByb21pc2VzIVxuICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgIC8vIGVycm9yLm1lc3NhZ2UgPT09IFwiMlwiXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIGFsbFxuICBAc3RhdGljXG4gIEBwYXJhbSB7QXJyYXl9IGVudHJpZXMgYXJyYXkgb2YgcHJvbWlzZXNcbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgbGFiZWxpbmcgdGhlIHByb21pc2UuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aGVuIGFsbCBgcHJvbWlzZXNgIGhhdmUgYmVlblxuICBmdWxmaWxsZWQsIG9yIHJlamVjdGVkIGlmIGFueSBvZiB0aGVtIGJlY29tZSByZWplY3RlZC5cbiAgQHN0YXRpY1xuKi9cbmZ1bmN0aW9uIGFsbChlbnRyaWVzLCBsYWJlbCkge1xuICByZXR1cm4gbmV3IEVudW1lcmF0b3IodGhpcywgZW50cmllcywgdHJ1ZSwgLyogYWJvcnQgb24gcmVqZWN0ICovbGFiZWwpLnByb21pc2U7XG59XG5cbi8qKlxuICBgUlNWUC5Qcm9taXNlLnJhY2VgIHJldHVybnMgYSBuZXcgcHJvbWlzZSB3aGljaCBpcyBzZXR0bGVkIGluIHRoZSBzYW1lIHdheSBhcyB0aGVcbiAgZmlyc3QgcGFzc2VkIHByb21pc2UgdG8gc2V0dGxlLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSBuZXcgUlNWUC5Qcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAxJyk7XG4gICAgfSwgMjAwKTtcbiAgfSk7XG5cbiAgbGV0IHByb21pc2UyID0gbmV3IFJTVlAuUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMicpO1xuICAgIH0sIDEwMCk7XG4gIH0pO1xuXG4gIFJTVlAuUHJvbWlzZS5yYWNlKFtwcm9taXNlMSwgcHJvbWlzZTJdKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgLy8gcmVzdWx0ID09PSAncHJvbWlzZSAyJyBiZWNhdXNlIGl0IHdhcyByZXNvbHZlZCBiZWZvcmUgcHJvbWlzZTFcbiAgICAvLyB3YXMgcmVzb2x2ZWQuXG4gIH0pO1xuICBgYGBcblxuICBgUlNWUC5Qcm9taXNlLnJhY2VgIGlzIGRldGVybWluaXN0aWMgaW4gdGhhdCBvbmx5IHRoZSBzdGF0ZSBvZiB0aGUgZmlyc3RcbiAgc2V0dGxlZCBwcm9taXNlIG1hdHRlcnMuIEZvciBleGFtcGxlLCBldmVuIGlmIG90aGVyIHByb21pc2VzIGdpdmVuIHRvIHRoZVxuICBgcHJvbWlzZXNgIGFycmF5IGFyZ3VtZW50IGFyZSByZXNvbHZlZCwgYnV0IHRoZSBmaXJzdCBzZXR0bGVkIHByb21pc2UgaGFzXG4gIGJlY29tZSByZWplY3RlZCBiZWZvcmUgdGhlIG90aGVyIHByb21pc2VzIGJlY2FtZSBmdWxmaWxsZWQsIHRoZSByZXR1cm5lZFxuICBwcm9taXNlIHdpbGwgYmVjb21lIHJlamVjdGVkOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gbmV3IFJTVlAuUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMScpO1xuICAgIH0sIDIwMCk7XG4gIH0pO1xuXG4gIGxldCBwcm9taXNlMiA9IG5ldyBSU1ZQLlByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdwcm9taXNlIDInKSk7XG4gICAgfSwgMTAwKTtcbiAgfSk7XG5cbiAgUlNWUC5Qcm9taXNlLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyBDb2RlIGhlcmUgbmV2ZXIgcnVuc1xuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAncHJvbWlzZSAyJyBiZWNhdXNlIHByb21pc2UgMiBiZWNhbWUgcmVqZWN0ZWQgYmVmb3JlXG4gICAgLy8gcHJvbWlzZSAxIGJlY2FtZSBmdWxmaWxsZWRcbiAgfSk7XG4gIGBgYFxuXG4gIEFuIGV4YW1wbGUgcmVhbC13b3JsZCB1c2UgY2FzZSBpcyBpbXBsZW1lbnRpbmcgdGltZW91dHM6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBSU1ZQLlByb21pc2UucmFjZShbYWpheCgnZm9vLmpzb24nKSwgdGltZW91dCg1MDAwKV0pXG4gIGBgYFxuXG4gIEBtZXRob2QgcmFjZVxuICBAc3RhdGljXG4gIEBwYXJhbSB7QXJyYXl9IGVudHJpZXMgYXJyYXkgb2YgcHJvbWlzZXMgdG8gb2JzZXJ2ZVxuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIGZvciBkZXNjcmliaW5nIHRoZSBwcm9taXNlIHJldHVybmVkLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSB3aGljaCBzZXR0bGVzIGluIHRoZSBzYW1lIHdheSBhcyB0aGUgZmlyc3QgcGFzc2VkXG4gIHByb21pc2UgdG8gc2V0dGxlLlxuKi9cbmZ1bmN0aW9uIHJhY2UoZW50cmllcywgbGFiZWwpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wLCBsYWJlbCk7XG5cbiAgaWYgKCFpc0FycmF5KGVudHJpZXMpKSB7XG4gICAgcmVqZWN0KHByb21pc2UsIG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYW4gYXJyYXkgdG8gcmFjZS4nKSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgcHJvbWlzZS5fc3RhdGUgPT09IFBFTkRJTkcgJiYgaSA8IGVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBzdWJzY3JpYmUoQ29uc3RydWN0b3IucmVzb2x2ZShlbnRyaWVzW2ldKSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiByZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuLyoqXG4gIGBSU1ZQLlByb21pc2UucmVqZWN0YCByZXR1cm5zIGEgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSBwYXNzZWQgYHJlYXNvbmAuXG4gIEl0IGlzIHNob3J0aGFuZCBmb3IgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gbmV3IFJTVlAuUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHJlamVjdChuZXcgRXJyb3IoJ1dIT09QUycpKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyBDb2RlIGhlcmUgZG9lc24ndCBydW4gYmVjYXVzZSB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCFcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ1dIT09QUydcbiAgfSk7XG4gIGBgYFxuXG4gIEluc3RlYWQgb2Ygd3JpdGluZyB0aGUgYWJvdmUsIHlvdXIgY29kZSBub3cgc2ltcGx5IGJlY29tZXMgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gUlNWUC5Qcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1dIT09QUycpKTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIENvZGUgaGVyZSBkb2Vzbid0IHJ1biBiZWNhdXNlIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJ1xuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCByZWplY3RcbiAgQHN0YXRpY1xuICBAcGFyYW0geyp9IHJlYXNvbiB2YWx1ZSB0aGF0IHRoZSByZXR1cm5lZCBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aC5cbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgaWRlbnRpZnlpbmcgdGhlIHJldHVybmVkIHByb21pc2UuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHJlamVjdGVkIHdpdGggdGhlIGdpdmVuIGByZWFzb25gLlxuKi9cbmZ1bmN0aW9uIHJlamVjdCQxKHJlYXNvbiwgbGFiZWwpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcbiAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCwgbGFiZWwpO1xuICByZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbnZhciBndWlkS2V5ID0gJ3JzdnBfJyArIG5vdygpICsgJy0nO1xudmFyIGNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBuZWVkc1Jlc29sdmVyKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGEgcmVzb2x2ZXIgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBwcm9taXNlIGNvbnN0cnVjdG9yJyk7XG59XG5cbmZ1bmN0aW9uIG5lZWRzTmV3KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUHJvbWlzZSc6IFBsZWFzZSB1c2UgdGhlICduZXcnIG9wZXJhdG9yLCB0aGlzIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xufVxuXG4vKipcbiAgUHJvbWlzZSBvYmplY3RzIHJlcHJlc2VudCB0aGUgZXZlbnR1YWwgcmVzdWx0IG9mIGFuIGFzeW5jaHJvbm91cyBvcGVyYXRpb24uIFRoZVxuICBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLCB3aGljaFxuICByZWdpc3RlcnMgY2FsbGJhY2tzIHRvIHJlY2VpdmUgZWl0aGVyIGEgcHJvbWlzZeKAmXMgZXZlbnR1YWwgdmFsdWUgb3IgdGhlIHJlYXNvblxuICB3aHkgdGhlIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZC5cblxuICBUZXJtaW5vbG9neVxuICAtLS0tLS0tLS0tLVxuXG4gIC0gYHByb21pc2VgIGlzIGFuIG9iamVjdCBvciBmdW5jdGlvbiB3aXRoIGEgYHRoZW5gIG1ldGhvZCB3aG9zZSBiZWhhdmlvciBjb25mb3JtcyB0byB0aGlzIHNwZWNpZmljYXRpb24uXG4gIC0gYHRoZW5hYmxlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gdGhhdCBkZWZpbmVzIGEgYHRoZW5gIG1ldGhvZC5cbiAgLSBgdmFsdWVgIGlzIGFueSBsZWdhbCBKYXZhU2NyaXB0IHZhbHVlIChpbmNsdWRpbmcgdW5kZWZpbmVkLCBhIHRoZW5hYmxlLCBvciBhIHByb21pc2UpLlxuICAtIGBleGNlcHRpb25gIGlzIGEgdmFsdWUgdGhhdCBpcyB0aHJvd24gdXNpbmcgdGhlIHRocm93IHN0YXRlbWVudC5cbiAgLSBgcmVhc29uYCBpcyBhIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoeSBhIHByb21pc2Ugd2FzIHJlamVjdGVkLlxuICAtIGBzZXR0bGVkYCB0aGUgZmluYWwgcmVzdGluZyBzdGF0ZSBvZiBhIHByb21pc2UsIGZ1bGZpbGxlZCBvciByZWplY3RlZC5cblxuICBBIHByb21pc2UgY2FuIGJlIGluIG9uZSBvZiB0aHJlZSBzdGF0ZXM6IHBlbmRpbmcsIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQuXG5cbiAgUHJvbWlzZXMgdGhhdCBhcmUgZnVsZmlsbGVkIGhhdmUgYSBmdWxmaWxsbWVudCB2YWx1ZSBhbmQgYXJlIGluIHRoZSBmdWxmaWxsZWRcbiAgc3RhdGUuICBQcm9taXNlcyB0aGF0IGFyZSByZWplY3RlZCBoYXZlIGEgcmVqZWN0aW9uIHJlYXNvbiBhbmQgYXJlIGluIHRoZVxuICByZWplY3RlZCBzdGF0ZS4gIEEgZnVsZmlsbG1lbnQgdmFsdWUgaXMgbmV2ZXIgYSB0aGVuYWJsZS5cblxuICBQcm9taXNlcyBjYW4gYWxzbyBiZSBzYWlkIHRvICpyZXNvbHZlKiBhIHZhbHVlLiAgSWYgdGhpcyB2YWx1ZSBpcyBhbHNvIGFcbiAgcHJvbWlzZSwgdGhlbiB0aGUgb3JpZ2luYWwgcHJvbWlzZSdzIHNldHRsZWQgc3RhdGUgd2lsbCBtYXRjaCB0aGUgdmFsdWUnc1xuICBzZXR0bGVkIHN0YXRlLiAgU28gYSBwcm9taXNlIHRoYXQgKnJlc29sdmVzKiBhIHByb21pc2UgdGhhdCByZWplY3RzIHdpbGxcbiAgaXRzZWxmIHJlamVjdCwgYW5kIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgd2lsbFxuICBpdHNlbGYgZnVsZmlsbC5cblxuXG4gIEJhc2ljIFVzYWdlOlxuICAtLS0tLS0tLS0tLS1cblxuICBgYGBqc1xuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIC8vIG9uIHN1Y2Nlc3NcbiAgICByZXNvbHZlKHZhbHVlKTtcblxuICAgIC8vIG9uIGZhaWx1cmVcbiAgICByZWplY3QocmVhc29uKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgLy8gb24gZnVsZmlsbG1lbnRcbiAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgLy8gb24gcmVqZWN0aW9uXG4gIH0pO1xuICBgYGBcblxuICBBZHZhbmNlZCBVc2FnZTpcbiAgLS0tLS0tLS0tLS0tLS0tXG5cbiAgUHJvbWlzZXMgc2hpbmUgd2hlbiBhYnN0cmFjdGluZyBhd2F5IGFzeW5jaHJvbm91cyBpbnRlcmFjdGlvbnMgc3VjaCBhc1xuICBgWE1MSHR0cFJlcXVlc3Rgcy5cblxuICBgYGBqc1xuICBmdW5jdGlvbiBnZXRKU09OKHVybCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICB4aHIub3BlbignR0VUJywgdXJsKTtcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBoYW5kbGVyO1xuICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdqc29uJztcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgeGhyLnNlbmQoKTtcblxuICAgICAgZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gdGhpcy5ET05FKSB7XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIHJlc29sdmUodGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2dldEpTT046IGAnICsgdXJsICsgJ2AgZmFpbGVkIHdpdGggc3RhdHVzOiBbJyArIHRoaXMuc3RhdHVzICsgJ10nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0SlNPTignL3Bvc3RzLmpzb24nKS50aGVuKGZ1bmN0aW9uKGpzb24pIHtcbiAgICAvLyBvbiBmdWxmaWxsbWVudFxuICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAvLyBvbiByZWplY3Rpb25cbiAgfSk7XG4gIGBgYFxuXG4gIFVubGlrZSBjYWxsYmFja3MsIHByb21pc2VzIGFyZSBncmVhdCBjb21wb3NhYmxlIHByaW1pdGl2ZXMuXG5cbiAgYGBganNcbiAgUHJvbWlzZS5hbGwoW1xuICAgIGdldEpTT04oJy9wb3N0cycpLFxuICAgIGdldEpTT04oJy9jb21tZW50cycpXG4gIF0pLnRoZW4oZnVuY3Rpb24odmFsdWVzKXtcbiAgICB2YWx1ZXNbMF0gLy8gPT4gcG9zdHNKU09OXG4gICAgdmFsdWVzWzFdIC8vID0+IGNvbW1lbnRzSlNPTlxuXG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSk7XG4gIGBgYFxuXG4gIEBjbGFzcyBSU1ZQLlByb21pc2VcbiAgQHBhcmFtIHtmdW5jdGlvbn0gcmVzb2x2ZXJcbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgbGFiZWxpbmcgdGhlIHByb21pc2UuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQGNvbnN0cnVjdG9yXG4qL1xuZnVuY3Rpb24gUHJvbWlzZShyZXNvbHZlciwgbGFiZWwpIHtcbiAgdGhpcy5faWQgPSBjb3VudGVyKys7XG4gIHRoaXMuX2xhYmVsID0gbGFiZWw7XG4gIHRoaXMuX3N0YXRlID0gdW5kZWZpbmVkO1xuICB0aGlzLl9yZXN1bHQgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX3N1YnNjcmliZXJzID0gW107XG5cbiAgY29uZmlnLmluc3RydW1lbnQgJiYgaW5zdHJ1bWVudCgnY3JlYXRlZCcsIHRoaXMpO1xuXG4gIGlmIChub29wICE9PSByZXNvbHZlcikge1xuICAgIHR5cGVvZiByZXNvbHZlciAhPT0gJ2Z1bmN0aW9uJyAmJiBuZWVkc1Jlc29sdmVyKCk7XG4gICAgdGhpcyBpbnN0YW5jZW9mIFByb21pc2UgPyBpbml0aWFsaXplUHJvbWlzZSh0aGlzLCByZXNvbHZlcikgOiBuZWVkc05ldygpO1xuICB9XG59XG5cblByb21pc2UuY2FzdCA9IHJlc29sdmUkMTsgLy8gZGVwcmVjYXRlZFxuUHJvbWlzZS5hbGwgPSBhbGw7XG5Qcm9taXNlLnJhY2UgPSByYWNlO1xuUHJvbWlzZS5yZXNvbHZlID0gcmVzb2x2ZSQxO1xuUHJvbWlzZS5yZWplY3QgPSByZWplY3QkMTtcblxuUHJvbWlzZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQcm9taXNlLFxuXG4gIF9ndWlkS2V5OiBndWlkS2V5LFxuXG4gIF9vbkVycm9yOiBmdW5jdGlvbiBfb25FcnJvcihyZWFzb24pIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gICAgY29uZmlnLmFmdGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9taXNlLl9vbkVycm9yKSB7XG4gICAgICAgIGNvbmZpZ1sndHJpZ2dlciddKCdlcnJvcicsIHJlYXNvbiwgcHJvbWlzZS5fbGFiZWwpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgIFRoZSBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLFxuICAgIHdoaWNoIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNlJ3MgZXZlbnR1YWwgdmFsdWUgb3IgdGhlXG4gICAgcmVhc29uIHdoeSB0aGUgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbih1c2VyKXtcbiAgICAgIC8vIHVzZXIgaXMgYXZhaWxhYmxlXG4gICAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIHVzZXIgaXMgdW5hdmFpbGFibGUsIGFuZCB5b3UgYXJlIGdpdmVuIHRoZSByZWFzb24gd2h5XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIENoYWluaW5nXG4gICAgLS0tLS0tLS1cbiAgXG4gICAgVGhlIHJldHVybiB2YWx1ZSBvZiBgdGhlbmAgaXMgaXRzZWxmIGEgcHJvbWlzZS4gIFRoaXMgc2Vjb25kLCAnZG93bnN0cmVhbSdcbiAgICBwcm9taXNlIGlzIHJlc29sdmVkIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZmlyc3QgcHJvbWlzZSdzIGZ1bGZpbGxtZW50XG4gICAgb3IgcmVqZWN0aW9uIGhhbmRsZXIsIG9yIHJlamVjdGVkIGlmIHRoZSBoYW5kbGVyIHRocm93cyBhbiBleGNlcHRpb24uXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICByZXR1cm4gdXNlci5uYW1lO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiAnZGVmYXVsdCBuYW1lJztcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh1c2VyTmFtZSkge1xuICAgICAgLy8gSWYgYGZpbmRVc2VyYCBmdWxmaWxsZWQsIGB1c2VyTmFtZWAgd2lsbCBiZSB0aGUgdXNlcidzIG5hbWUsIG90aGVyd2lzZSBpdFxuICAgICAgLy8gd2lsbCBiZSBgJ2RlZmF1bHQgbmFtZSdgXG4gICAgfSk7XG4gIFxuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCB1c2VyLCBidXQgc3RpbGwgdW5oYXBweScpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2VcXCdyZSB1bmhhcHB5Jyk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAvLyBpZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHJlYXNvbmAgd2lsbCBiZSAnRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknLlxuICAgICAgLy8gSWYgYGZpbmRVc2VyYCByZWplY3RlZCwgYHJlYXNvbmAgd2lsbCBiZSAnYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2VcXCdyZSB1bmhhcHB5Jy5cbiAgICB9KTtcbiAgICBgYGBcbiAgICBJZiB0aGUgZG93bnN0cmVhbSBwcm9taXNlIGRvZXMgbm90IHNwZWNpZnkgYSByZWplY3Rpb24gaGFuZGxlciwgcmVqZWN0aW9uIHJlYXNvbnMgd2lsbCBiZSBwcm9wYWdhdGVkIGZ1cnRoZXIgZG93bnN0cmVhbS5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHRocm93IG5ldyBQZWRhZ29naWNhbEV4Y2VwdGlvbignVXBzdHJlYW0gZXJyb3InKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8gbmV2ZXIgcmVhY2hlZFxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgLy8gVGhlIGBQZWRnYWdvY2lhbEV4Y2VwdGlvbmAgaXMgcHJvcGFnYXRlZCBhbGwgdGhlIHdheSBkb3duIHRvIGhlcmVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQXNzaW1pbGF0aW9uXG4gICAgLS0tLS0tLS0tLS0tXG4gIFxuICAgIFNvbWV0aW1lcyB0aGUgdmFsdWUgeW91IHdhbnQgdG8gcHJvcGFnYXRlIHRvIGEgZG93bnN0cmVhbSBwcm9taXNlIGNhbiBvbmx5IGJlXG4gICAgcmV0cmlldmVkIGFzeW5jaHJvbm91c2x5LiBUaGlzIGNhbiBiZSBhY2hpZXZlZCBieSByZXR1cm5pbmcgYSBwcm9taXNlIGluIHRoZVxuICAgIGZ1bGZpbGxtZW50IG9yIHJlamVjdGlvbiBoYW5kbGVyLiBUaGUgZG93bnN0cmVhbSBwcm9taXNlIHdpbGwgdGhlbiBiZSBwZW5kaW5nXG4gICAgdW50aWwgdGhlIHJldHVybmVkIHByb21pc2UgaXMgc2V0dGxlZC4gVGhpcyBpcyBjYWxsZWQgKmFzc2ltaWxhdGlvbiouXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICByZXR1cm4gZmluZENvbW1lbnRzQnlBdXRob3IodXNlcik7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoY29tbWVudHMpIHtcbiAgICAgIC8vIFRoZSB1c2VyJ3MgY29tbWVudHMgYXJlIG5vdyBhdmFpbGFibGVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgSWYgdGhlIGFzc2ltbGlhdGVkIHByb21pc2UgcmVqZWN0cywgdGhlbiB0aGUgZG93bnN0cmVhbSBwcm9taXNlIHdpbGwgYWxzbyByZWplY3QuXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICByZXR1cm4gZmluZENvbW1lbnRzQnlBdXRob3IodXNlcik7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoY29tbWVudHMpIHtcbiAgICAgIC8vIElmIGBmaW5kQ29tbWVudHNCeUF1dGhvcmAgZnVsZmlsbHMsIHdlJ2xsIGhhdmUgdGhlIHZhbHVlIGhlcmVcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIHJlamVjdHMsIHdlJ2xsIGhhdmUgdGhlIHJlYXNvbiBoZXJlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIFNpbXBsZSBFeGFtcGxlXG4gICAgLS0tLS0tLS0tLS0tLS1cbiAgXG4gICAgU3luY2hyb25vdXMgRXhhbXBsZVxuICBcbiAgICBgYGBqYXZhc2NyaXB0XG4gICAgbGV0IHJlc3VsdDtcbiAgXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGZpbmRSZXN1bHQoKTtcbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgLy8gZmFpbHVyZVxuICAgIH1cbiAgICBgYGBcbiAgXG4gICAgRXJyYmFjayBFeGFtcGxlXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFJlc3VsdChmdW5jdGlvbihyZXN1bHQsIGVycil7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIC8vIGZhaWx1cmVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgIH1cbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgUHJvbWlzZSBFeGFtcGxlO1xuICBcbiAgICBgYGBqYXZhc2NyaXB0XG4gICAgZmluZFJlc3VsdCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gZmFpbHVyZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBBZHZhbmNlZCBFeGFtcGxlXG4gICAgLS0tLS0tLS0tLS0tLS1cbiAgXG4gICAgU3luY2hyb25vdXMgRXhhbXBsZVxuICBcbiAgICBgYGBqYXZhc2NyaXB0XG4gICAgbGV0IGF1dGhvciwgYm9va3M7XG4gIFxuICAgIHRyeSB7XG4gICAgICBhdXRob3IgPSBmaW5kQXV0aG9yKCk7XG4gICAgICBib29rcyAgPSBmaW5kQm9va3NCeUF1dGhvcihhdXRob3IpO1xuICAgICAgLy8gc3VjY2Vzc1xuICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfVxuICAgIGBgYFxuICBcbiAgICBFcnJiYWNrIEV4YW1wbGVcbiAgXG4gICAgYGBganNcbiAgXG4gICAgZnVuY3Rpb24gZm91bmRCb29rcyhib29rcykge1xuICBcbiAgICB9XG4gIFxuICAgIGZ1bmN0aW9uIGZhaWx1cmUocmVhc29uKSB7XG4gIFxuICAgIH1cbiAgXG4gICAgZmluZEF1dGhvcihmdW5jdGlvbihhdXRob3IsIGVycil7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgLy8gZmFpbHVyZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmaW5kQm9vb2tzQnlBdXRob3IoYXV0aG9yLCBmdW5jdGlvbihib29rcywgZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm91bmRCb29rcyhib29rcyk7XG4gICAgICAgICAgICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgZmFpbHVyZShyZWFzb24pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgfVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBQcm9taXNlIEV4YW1wbGU7XG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBmaW5kQXV0aG9yKCkuXG4gICAgICB0aGVuKGZpbmRCb29rc0J5QXV0aG9yKS5cbiAgICAgIHRoZW4oZnVuY3Rpb24oYm9va3Mpe1xuICAgICAgICAvLyBmb3VuZCBib29rc1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBAbWV0aG9kIHRoZW5cbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvbkZ1bGZpbGxtZW50XG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3Rpb25cbiAgICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIGZvciBsYWJlbGluZyB0aGUgcHJvbWlzZS5cbiAgICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gICAgQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cbiAgdGhlbjogdGhlbixcblxuICAvKipcbiAgICBgY2F0Y2hgIGlzIHNpbXBseSBzdWdhciBmb3IgYHRoZW4odW5kZWZpbmVkLCBvblJlamVjdGlvbilgIHdoaWNoIG1ha2VzIGl0IHRoZSBzYW1lXG4gICAgYXMgdGhlIGNhdGNoIGJsb2NrIG9mIGEgdHJ5L2NhdGNoIHN0YXRlbWVudC5cbiAgXG4gICAgYGBganNcbiAgICBmdW5jdGlvbiBmaW5kQXV0aG9yKCl7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkblxcJ3QgZmluZCB0aGF0IGF1dGhvcicpO1xuICAgIH1cbiAgXG4gICAgLy8gc3luY2hyb25vdXNcbiAgICB0cnkge1xuICAgICAgZmluZEF1dGhvcigpO1xuICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgIH1cbiAgXG4gICAgLy8gYXN5bmMgd2l0aCBwcm9taXNlc1xuICAgIGZpbmRBdXRob3IoKS5jYXRjaChmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQG1ldGhvZCBjYXRjaFxuICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uUmVqZWN0aW9uXG4gICAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgbGFiZWxpbmcgdGhlIHByb21pc2UuXG4gICAgVXNlZnVsIGZvciB0b29saW5nLlxuICAgIEByZXR1cm4ge1Byb21pc2V9XG4gICovXG4gICdjYXRjaCc6IGZ1bmN0aW9uIF9jYXRjaChvblJlamVjdGlvbiwgbGFiZWwpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3Rpb24sIGxhYmVsKTtcbiAgfSxcblxuICAvKipcbiAgICBgZmluYWxseWAgd2lsbCBiZSBpbnZva2VkIHJlZ2FyZGxlc3Mgb2YgdGhlIHByb21pc2UncyBmYXRlIGp1c3QgYXMgbmF0aXZlXG4gICAgdHJ5L2NhdGNoL2ZpbmFsbHkgYmVoYXZlc1xuICBcbiAgICBTeW5jaHJvbm91cyBleGFtcGxlOlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRBdXRob3IoKSB7XG4gICAgICBpZiAoTWF0aC5yYW5kb20oKSA+IDAuNSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgQXV0aG9yKCk7XG4gICAgfVxuICBcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZpbmRBdXRob3IoKTsgLy8gc3VjY2VlZCBvciBmYWlsXG4gICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgcmV0dXJuIGZpbmRPdGhlckF1dGhlcigpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAvLyBhbHdheXMgcnVuc1xuICAgICAgLy8gZG9lc24ndCBhZmZlY3QgdGhlIHJldHVybiB2YWx1ZVxuICAgIH1cbiAgICBgYGBcbiAgXG4gICAgQXN5bmNocm9ub3VzIGV4YW1wbGU6XG4gIFxuICAgIGBgYGpzXG4gICAgZmluZEF1dGhvcigpLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICByZXR1cm4gZmluZE90aGVyQXV0aGVyKCk7XG4gICAgfSkuZmluYWxseShmdW5jdGlvbigpe1xuICAgICAgLy8gYXV0aG9yIHdhcyBlaXRoZXIgZm91bmQsIG9yIG5vdFxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBAbWV0aG9kIGZpbmFsbHlcbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgIEBwYXJhbSB7U3RyaW5nfSBsYWJlbCBvcHRpb25hbCBzdHJpbmcgZm9yIGxhYmVsaW5nIHRoZSBwcm9taXNlLlxuICAgIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgICBAcmV0dXJuIHtQcm9taXNlfVxuICAqL1xuICAnZmluYWxseSc6IGZ1bmN0aW9uIF9maW5hbGx5KGNhbGxiYWNrLCBsYWJlbCkge1xuICAgIHZhciBwcm9taXNlID0gdGhpcztcbiAgICB2YXIgY29uc3RydWN0b3IgPSBwcm9taXNlLmNvbnN0cnVjdG9yO1xuXG4gICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5yZXNvbHZlKGNhbGxiYWNrKCkpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICByZXR1cm4gY29uc3RydWN0b3IucmVzb2x2ZShjYWxsYmFjaygpKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhyb3cgcmVhc29uO1xuICAgICAgfSk7XG4gICAgfSwgbGFiZWwpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBSZXN1bHQoKSB7XG4gIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG59XG5cbnZhciBFUlJPUiA9IG5ldyBSZXN1bHQoKTtcbnZhciBHRVRfVEhFTl9FUlJPUiQxID0gbmV3IFJlc3VsdCgpO1xuXG5mdW5jdGlvbiBnZXRUaGVuJDEob2JqKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG9iai50aGVuO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIEVSUk9SLnZhbHVlID0gZXJyb3I7XG4gICAgcmV0dXJuIEVSUk9SO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyeUFwcGx5KGYsIHMsIGEpIHtcbiAgdHJ5IHtcbiAgICBmLmFwcGx5KHMsIGEpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIEVSUk9SLnZhbHVlID0gZXJyb3I7XG4gICAgcmV0dXJuIEVSUk9SO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VPYmplY3QoXywgYXJndW1lbnROYW1lcykge1xuICB2YXIgb2JqID0ge307XG4gIHZhciBsZW5ndGggPSBfLmxlbmd0aDtcbiAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkobGVuZ3RoKTtcblxuICBmb3IgKHZhciB4ID0gMDsgeCA8IGxlbmd0aDsgeCsrKSB7XG4gICAgYXJnc1t4XSA9IF9beF07XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50TmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgX25hbWUgPSBhcmd1bWVudE5hbWVzW2ldO1xuICAgIG9ialtfbmFtZV0gPSBhcmdzW2kgKyAxXTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIGFycmF5UmVzdWx0KF8pIHtcbiAgdmFyIGxlbmd0aCA9IF8ubGVuZ3RoO1xuICB2YXIgYXJncyA9IG5ldyBBcnJheShsZW5ndGggLSAxKTtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgYXJnc1tpIC0gMV0gPSBfW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFyZ3M7XG59XG5cbmZ1bmN0aW9uIHdyYXBUaGVuYWJsZShfdGhlbiwgcHJvbWlzZSkge1xuICByZXR1cm4ge1xuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxGaWxsbWVudCwgb25SZWplY3Rpb24pIHtcbiAgICAgIHJldHVybiBfdGhlbi5jYWxsKHByb21pc2UsIG9uRnVsRmlsbG1lbnQsIG9uUmVqZWN0aW9uKTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICBgUlNWUC5kZW5vZGVpZnlgIHRha2VzIGEgJ25vZGUtc3R5bGUnIGZ1bmN0aW9uIGFuZCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdFxuICB3aWxsIHJldHVybiBhbiBgUlNWUC5Qcm9taXNlYC4gWW91IGNhbiB1c2UgYGRlbm9kZWlmeWAgaW4gTm9kZS5qcyBvciB0aGVcbiAgYnJvd3NlciB3aGVuIHlvdSdkIHByZWZlciB0byB1c2UgcHJvbWlzZXMgb3ZlciB1c2luZyBjYWxsYmFja3MuIEZvciBleGFtcGxlLFxuICBgZGVub2RlaWZ5YCB0cmFuc2Zvcm1zIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgZnMgPSByZXF1aXJlKCdmcycpO1xuXG4gIGZzLnJlYWRGaWxlKCdteWZpbGUudHh0JywgZnVuY3Rpb24oZXJyLCBkYXRhKXtcbiAgICBpZiAoZXJyKSByZXR1cm4gaGFuZGxlRXJyb3IoZXJyKTtcbiAgICBoYW5kbGVEYXRhKGRhdGEpO1xuICB9KTtcbiAgYGBgXG5cbiAgaW50bzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gIGxldCByZWFkRmlsZSA9IFJTVlAuZGVub2RlaWZ5KGZzLnJlYWRGaWxlKTtcblxuICByZWFkRmlsZSgnbXlmaWxlLnR4dCcpLnRoZW4oaGFuZGxlRGF0YSwgaGFuZGxlRXJyb3IpO1xuICBgYGBcblxuICBJZiB0aGUgbm9kZSBmdW5jdGlvbiBoYXMgbXVsdGlwbGUgc3VjY2VzcyBwYXJhbWV0ZXJzLCB0aGVuIGBkZW5vZGVpZnlgXG4gIGp1c3QgcmV0dXJucyB0aGUgZmlyc3Qgb25lOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHJlcXVlc3QgPSBSU1ZQLmRlbm9kZWlmeShyZXF1aXJlKCdyZXF1ZXN0JykpO1xuXG4gIHJlcXVlc3QoJ2h0dHA6Ly9leGFtcGxlLmNvbScpLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgLy8gLi4uXG4gIH0pO1xuICBgYGBcblxuICBIb3dldmVyLCBpZiB5b3UgbmVlZCBhbGwgc3VjY2VzcyBwYXJhbWV0ZXJzLCBzZXR0aW5nIGBkZW5vZGVpZnlgJ3NcbiAgc2Vjb25kIHBhcmFtZXRlciB0byBgdHJ1ZWAgY2F1c2VzIGl0IHRvIHJldHVybiBhbGwgc3VjY2VzcyBwYXJhbWV0ZXJzXG4gIGFzIGFuIGFycmF5OlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHJlcXVlc3QgPSBSU1ZQLmRlbm9kZWlmeShyZXF1aXJlKCdyZXF1ZXN0JyksIHRydWUpO1xuXG4gIHJlcXVlc3QoJ2h0dHA6Ly9leGFtcGxlLmNvbScpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgLy8gcmVzdWx0WzBdIC0+IHJlc1xuICAgIC8vIHJlc3VsdFsxXSAtPiBib2R5XG4gIH0pO1xuICBgYGBcblxuICBPciBpZiB5b3UgcGFzcyBpdCBhbiBhcnJheSB3aXRoIG5hbWVzIGl0IHJldHVybnMgdGhlIHBhcmFtZXRlcnMgYXMgYSBoYXNoOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHJlcXVlc3QgPSBSU1ZQLmRlbm9kZWlmeShyZXF1aXJlKCdyZXF1ZXN0JyksIFsncmVzJywgJ2JvZHknXSk7XG5cbiAgcmVxdWVzdCgnaHR0cDovL2V4YW1wbGUuY29tJykudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAvLyByZXN1bHQucmVzXG4gICAgLy8gcmVzdWx0LmJvZHlcbiAgfSk7XG4gIGBgYFxuXG4gIFNvbWV0aW1lcyB5b3UgbmVlZCB0byByZXRhaW4gdGhlIGB0aGlzYDpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBhcHAgPSByZXF1aXJlKCdleHByZXNzJykoKTtcbiAgbGV0IHJlbmRlciA9IFJTVlAuZGVub2RlaWZ5KGFwcC5yZW5kZXIuYmluZChhcHApKTtcbiAgYGBgXG5cbiAgVGhlIGRlbm9kaWZpZWQgZnVuY3Rpb24gaW5oZXJpdHMgZnJvbSB0aGUgb3JpZ2luYWwgZnVuY3Rpb24uIEl0IHdvcmtzIGluIGFsbFxuICBlbnZpcm9ubWVudHMsIGV4Y2VwdCBJRSAxMCBhbmQgYmVsb3cuIENvbnNlcXVlbnRseSBhbGwgcHJvcGVydGllcyBvZiB0aGUgb3JpZ2luYWxcbiAgZnVuY3Rpb24gYXJlIGF2YWlsYWJsZSB0byB5b3UuIEhvd2V2ZXIsIGFueSBwcm9wZXJ0aWVzIHlvdSBjaGFuZ2Ugb24gdGhlXG4gIGRlbm9kZWlmaWVkIGZ1bmN0aW9uIHdvbid0IGJlIGNoYW5nZWQgb24gdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLiBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHJlcXVlc3QgPSBSU1ZQLmRlbm9kZWlmeShyZXF1aXJlKCdyZXF1ZXN0JykpLFxuICAgICAgY29va2llSmFyID0gcmVxdWVzdC5qYXIoKTsgLy8gPC0gSW5oZXJpdGFuY2UgaXMgdXNlZCBoZXJlXG5cbiAgcmVxdWVzdCgnaHR0cDovL2V4YW1wbGUuY29tJywge2phcjogY29va2llSmFyfSkudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAvLyBjb29raWVKYXIuY29va2llcyBob2xkcyBub3cgdGhlIGNvb2tpZXMgcmV0dXJuZWQgYnkgZXhhbXBsZS5jb21cbiAgfSk7XG4gIGBgYFxuXG4gIFVzaW5nIGBkZW5vZGVpZnlgIG1ha2VzIGl0IGVhc2llciB0byBjb21wb3NlIGFzeW5jaHJvbm91cyBvcGVyYXRpb25zIGluc3RlYWRcbiAgb2YgdXNpbmcgY2FsbGJhY2tzLiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZjpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbiAgZnMucmVhZEZpbGUoJ215ZmlsZS50eHQnLCBmdW5jdGlvbihlcnIsIGRhdGEpe1xuICAgIGlmIChlcnIpIHsgLi4uIH0gLy8gSGFuZGxlIGVycm9yXG4gICAgZnMud3JpdGVGaWxlKCdteWZpbGUyLnR4dCcsIGRhdGEsIGZ1bmN0aW9uKGVycil7XG4gICAgICBpZiAoZXJyKSB7IC4uLiB9IC8vIEhhbmRsZSBlcnJvclxuICAgICAgY29uc29sZS5sb2coJ2RvbmUnKVxuICAgIH0pO1xuICB9KTtcbiAgYGBgXG5cbiAgeW91IGNhbiBjaGFpbiB0aGUgb3BlcmF0aW9ucyB0b2dldGhlciB1c2luZyBgdGhlbmAgZnJvbSB0aGUgcmV0dXJuZWQgcHJvbWlzZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gIGxldCByZWFkRmlsZSA9IFJTVlAuZGVub2RlaWZ5KGZzLnJlYWRGaWxlKTtcbiAgbGV0IHdyaXRlRmlsZSA9IFJTVlAuZGVub2RlaWZ5KGZzLndyaXRlRmlsZSk7XG5cbiAgcmVhZEZpbGUoJ215ZmlsZS50eHQnKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xuICAgIHJldHVybiB3cml0ZUZpbGUoJ215ZmlsZTIudHh0JywgZGF0YSk7XG4gIH0pLnRoZW4oZnVuY3Rpb24oKXtcbiAgICBjb25zb2xlLmxvZygnZG9uZScpXG4gIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKXtcbiAgICAvLyBIYW5kbGUgZXJyb3JcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgZGVub2RlaWZ5XG4gIEBzdGF0aWNcbiAgQGZvciBSU1ZQXG4gIEBwYXJhbSB7RnVuY3Rpb259IG5vZGVGdW5jIGEgJ25vZGUtc3R5bGUnIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBjYWxsYmFjayBhc1xuICBpdHMgbGFzdCBhcmd1bWVudC4gVGhlIGNhbGxiYWNrIGV4cGVjdHMgYW4gZXJyb3IgdG8gYmUgcGFzc2VkIGFzIGl0cyBmaXJzdFxuICBhcmd1bWVudCAoaWYgYW4gZXJyb3Igb2NjdXJyZWQsIG90aGVyd2lzZSBudWxsKSwgYW5kIHRoZSB2YWx1ZSBmcm9tIHRoZVxuICBvcGVyYXRpb24gYXMgaXRzIHNlY29uZCBhcmd1bWVudCAoJ2Z1bmN0aW9uKGVyciwgdmFsdWUpeyB9JykuXG4gIEBwYXJhbSB7Qm9vbGVhbnxBcnJheX0gW29wdGlvbnNdIEFuIG9wdGlvbmFsIHBhcmFtdGVyIHRoYXQgaWYgc2V0XG4gIHRvIGB0cnVlYCBjYXVzZXMgdGhlIHByb21pc2UgdG8gZnVsZmlsbCB3aXRoIHRoZSBjYWxsYmFjaydzIHN1Y2Nlc3MgYXJndW1lbnRzXG4gIGFzIGFuIGFycmF5LiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgbm9kZSBmdW5jdGlvbiBoYXMgbXVsdGlwbGUgc3VjY2Vzc1xuICBwYXJhbXRlcnMuIElmIHlvdSBzZXQgdGhpcyBwYXJhbXRlciB0byBhbiBhcnJheSB3aXRoIG5hbWVzLCB0aGUgcHJvbWlzZSB3aWxsXG4gIGZ1bGZpbGwgd2l0aCBhIGhhc2ggd2l0aCB0aGVzZSBuYW1lcyBhcyBrZXlzIGFuZCB0aGUgc3VjY2VzcyBwYXJhbWV0ZXJzIGFzXG4gIHZhbHVlcy5cbiAgQHJldHVybiB7RnVuY3Rpb259IGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgbm9kZUZ1bmNgIHRvIHJldHVybiBhblxuICBgUlNWUC5Qcm9taXNlYFxuICBAc3RhdGljXG4qL1xuZnVuY3Rpb24gZGVub2RlaWZ5KG5vZGVGdW5jLCBvcHRpb25zKSB7XG4gIHZhciBmbiA9IGZ1bmN0aW9uIGZuKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkobCArIDEpO1xuICAgIHZhciBwcm9taXNlSW5wdXQgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgKytpKSB7XG4gICAgICB2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBpZiAoIXByb21pc2VJbnB1dCkge1xuICAgICAgICAvLyBUT0RPOiBjbGVhbiB0aGlzIHVwXG4gICAgICAgIHByb21pc2VJbnB1dCA9IG5lZWRzUHJvbWlzZUlucHV0KGFyZyk7XG4gICAgICAgIGlmIChwcm9taXNlSW5wdXQgPT09IEdFVF9USEVOX0VSUk9SJDEpIHtcbiAgICAgICAgICB2YXIgcCA9IG5ldyBQcm9taXNlKG5vb3ApO1xuICAgICAgICAgIHJlamVjdChwLCBHRVRfVEhFTl9FUlJPUiQxLnZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gcDtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9taXNlSW5wdXQgJiYgcHJvbWlzZUlucHV0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgYXJnID0gd3JhcFRoZW5hYmxlKHByb21pc2VJbnB1dCwgYXJnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXJnc1tpXSA9IGFyZztcbiAgICB9XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKG5vb3ApO1xuXG4gICAgYXJnc1tsXSA9IGZ1bmN0aW9uIChlcnIsIHZhbCkge1xuICAgICAgaWYgKGVycikgcmVqZWN0KHByb21pc2UsIGVycik7ZWxzZSBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSByZXNvbHZlKHByb21pc2UsIHZhbCk7ZWxzZSBpZiAob3B0aW9ucyA9PT0gdHJ1ZSkgcmVzb2x2ZShwcm9taXNlLCBhcnJheVJlc3VsdChhcmd1bWVudHMpKTtlbHNlIGlmIChpc0FycmF5KG9wdGlvbnMpKSByZXNvbHZlKHByb21pc2UsIG1ha2VPYmplY3QoYXJndW1lbnRzLCBvcHRpb25zKSk7ZWxzZSByZXNvbHZlKHByb21pc2UsIHZhbCk7XG4gICAgfTtcblxuICAgIGlmIChwcm9taXNlSW5wdXQpIHtcbiAgICAgIHJldHVybiBoYW5kbGVQcm9taXNlSW5wdXQocHJvbWlzZSwgYXJncywgbm9kZUZ1bmMsIHNlbGYpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaGFuZGxlVmFsdWVJbnB1dChwcm9taXNlLCBhcmdzLCBub2RlRnVuYywgc2VsZik7XG4gICAgfVxuICB9O1xuXG4gIGZuLl9fcHJvdG9fXyA9IG5vZGVGdW5jO1xuXG4gIHJldHVybiBmbjtcbn1cblxuZnVuY3Rpb24gaGFuZGxlVmFsdWVJbnB1dChwcm9taXNlLCBhcmdzLCBub2RlRnVuYywgc2VsZikge1xuICB2YXIgcmVzdWx0ID0gdHJ5QXBwbHkobm9kZUZ1bmMsIHNlbGYsIGFyZ3MpO1xuICBpZiAocmVzdWx0ID09PSBFUlJPUikge1xuICAgIHJlamVjdChwcm9taXNlLCByZXN1bHQudmFsdWUpO1xuICB9XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVQcm9taXNlSW5wdXQocHJvbWlzZSwgYXJncywgbm9kZUZ1bmMsIHNlbGYpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKGFyZ3MpLnRoZW4oZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICB2YXIgcmVzdWx0ID0gdHJ5QXBwbHkobm9kZUZ1bmMsIHNlbGYsIGFyZ3MpO1xuICAgIGlmIChyZXN1bHQgPT09IEVSUk9SKSB7XG4gICAgICByZWplY3QocHJvbWlzZSwgcmVzdWx0LnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBuZWVkc1Byb21pc2VJbnB1dChhcmcpIHtcbiAgaWYgKGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChhcmcuY29uc3RydWN0b3IgPT09IFByb21pc2UpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2V0VGhlbiQxKGFyZyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAgVGhpcyBpcyBhIGNvbnZlbmllbnQgYWxpYXMgZm9yIGBSU1ZQLlByb21pc2UuYWxsYC5cblxuICBAbWV0aG9kIGFsbFxuICBAc3RhdGljXG4gIEBmb3IgUlNWUFxuICBAcGFyYW0ge0FycmF5fSBhcnJheSBBcnJheSBvZiBwcm9taXNlcy5cbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIEFuIG9wdGlvbmFsIGxhYmVsLiBUaGlzIGlzIHVzZWZ1bFxuICBmb3IgdG9vbGluZy5cbiovXG5mdW5jdGlvbiBhbGwkMShhcnJheSwgbGFiZWwpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKGFycmF5LCBsYWJlbCk7XG59XG5cbmZ1bmN0aW9uIEFsbFNldHRsZWQoQ29uc3RydWN0b3IsIGVudHJpZXMsIGxhYmVsKSB7XG4gIHRoaXMuX3N1cGVyQ29uc3RydWN0b3IoQ29uc3RydWN0b3IsIGVudHJpZXMsIGZhbHNlLCAvKiBkb24ndCBhYm9ydCBvbiByZWplY3QgKi9sYWJlbCk7XG59XG5cbkFsbFNldHRsZWQucHJvdG90eXBlID0gb19jcmVhdGUoRW51bWVyYXRvci5wcm90b3R5cGUpO1xuQWxsU2V0dGxlZC5wcm90b3R5cGUuX3N1cGVyQ29uc3RydWN0b3IgPSBFbnVtZXJhdG9yO1xuQWxsU2V0dGxlZC5wcm90b3R5cGUuX21ha2VSZXN1bHQgPSBtYWtlU2V0dGxlZFJlc3VsdDtcbkFsbFNldHRsZWQucHJvdG90eXBlLl92YWxpZGF0aW9uRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ2FsbFNldHRsZWQgbXVzdCBiZSBjYWxsZWQgd2l0aCBhbiBhcnJheScpO1xufTtcblxuLyoqXG4gIGBSU1ZQLmFsbFNldHRsZWRgIGlzIHNpbWlsYXIgdG8gYFJTVlAuYWxsYCwgYnV0IGluc3RlYWQgb2YgaW1wbGVtZW50aW5nXG4gIGEgZmFpbC1mYXN0IG1ldGhvZCwgaXQgd2FpdHMgdW50aWwgYWxsIHRoZSBwcm9taXNlcyBoYXZlIHJldHVybmVkIGFuZFxuICBzaG93cyB5b3UgYWxsIHRoZSByZXN1bHRzLiBUaGlzIGlzIHVzZWZ1bCBpZiB5b3Ugd2FudCB0byBoYW5kbGUgbXVsdGlwbGVcbiAgcHJvbWlzZXMnIGZhaWx1cmUgc3RhdGVzIHRvZ2V0aGVyIGFzIGEgc2V0LlxuXG4gIFJldHVybnMgYSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gYWxsIHRoZSBnaXZlbiBwcm9taXNlcyBoYXZlIGJlZW5cbiAgc2V0dGxlZC4gVGhlIHJldHVybiBwcm9taXNlIGlzIGZ1bGZpbGxlZCB3aXRoIGFuIGFycmF5IG9mIHRoZSBzdGF0ZXMgb2ZcbiAgdGhlIHByb21pc2VzIHBhc3NlZCBpbnRvIHRoZSBgcHJvbWlzZXNgIGFycmF5IGFyZ3VtZW50LlxuXG4gIEVhY2ggc3RhdGUgb2JqZWN0IHdpbGwgZWl0aGVyIGluZGljYXRlIGZ1bGZpbGxtZW50IG9yIHJlamVjdGlvbiwgYW5kXG4gIHByb3ZpZGUgdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb3IgcmVhc29uLiBUaGUgc3RhdGVzIHdpbGwgdGFrZSBvbmUgb2ZcbiAgdGhlIGZvbGxvd2luZyBmb3JtYXRzOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgeyBzdGF0ZTogJ2Z1bGZpbGxlZCcsIHZhbHVlOiB2YWx1ZSB9XG4gICAgb3JcbiAgeyBzdGF0ZTogJ3JlamVjdGVkJywgcmVhc29uOiByZWFzb24gfVxuICBgYGBcblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gUlNWUC5Qcm9taXNlLnJlc29sdmUoMSk7XG4gIGxldCBwcm9taXNlMiA9IFJTVlAuUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCcyJykpO1xuICBsZXQgcHJvbWlzZTMgPSBSU1ZQLlByb21pc2UucmVqZWN0KG5ldyBFcnJvcignMycpKTtcbiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07XG5cbiAgUlNWUC5hbGxTZXR0bGVkKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKGFycmF5KXtcbiAgICAvLyBhcnJheSA9PSBbXG4gICAgLy8gICB7IHN0YXRlOiAnZnVsZmlsbGVkJywgdmFsdWU6IDEgfSxcbiAgICAvLyAgIHsgc3RhdGU6ICdyZWplY3RlZCcsIHJlYXNvbjogRXJyb3IgfSxcbiAgICAvLyAgIHsgc3RhdGU6ICdyZWplY3RlZCcsIHJlYXNvbjogRXJyb3IgfVxuICAgIC8vIF1cbiAgICAvLyBOb3RlIHRoYXQgZm9yIHRoZSBzZWNvbmQgaXRlbSwgcmVhc29uLm1lc3NhZ2Ugd2lsbCBiZSAnMicsIGFuZCBmb3IgdGhlXG4gICAgLy8gdGhpcmQgaXRlbSwgcmVhc29uLm1lc3NhZ2Ugd2lsbCBiZSAnMycuXG4gIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgLy8gTm90IHJ1bi4gKFRoaXMgYmxvY2sgd291bGQgb25seSBiZSBjYWxsZWQgaWYgYWxsU2V0dGxlZCBoYWQgZmFpbGVkLFxuICAgIC8vIGZvciBpbnN0YW5jZSBpZiBwYXNzZWQgYW4gaW5jb3JyZWN0IGFyZ3VtZW50IHR5cGUuKVxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCBhbGxTZXR0bGVkXG4gIEBzdGF0aWNcbiAgQGZvciBSU1ZQXG4gIEBwYXJhbSB7QXJyYXl9IGVudHJpZXNcbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIC0gb3B0aW9uYWwgc3RyaW5nIHRoYXQgZGVzY3JpYmVzIHRoZSBwcm9taXNlLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCBhbiBhcnJheSBvZiB0aGUgc2V0dGxlZFxuICBzdGF0ZXMgb2YgdGhlIGNvbnN0aXR1ZW50IHByb21pc2VzLlxuKi9cbmZ1bmN0aW9uIGFsbFNldHRsZWQoZW50cmllcywgbGFiZWwpIHtcbiAgcmV0dXJuIG5ldyBBbGxTZXR0bGVkKFByb21pc2UsIGVudHJpZXMsIGxhYmVsKS5wcm9taXNlO1xufVxuXG4vKipcbiAgVGhpcyBpcyBhIGNvbnZlbmllbnQgYWxpYXMgZm9yIGBSU1ZQLlByb21pc2UucmFjZWAuXG5cbiAgQG1ldGhvZCByYWNlXG4gIEBzdGF0aWNcbiAgQGZvciBSU1ZQXG4gIEBwYXJhbSB7QXJyYXl9IGFycmF5IEFycmF5IG9mIHByb21pc2VzLlxuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgQW4gb3B0aW9uYWwgbGFiZWwuIFRoaXMgaXMgdXNlZnVsXG4gIGZvciB0b29saW5nLlxuICovXG5mdW5jdGlvbiByYWNlJDEoYXJyYXksIGxhYmVsKSB7XG4gIHJldHVybiBQcm9taXNlLnJhY2UoYXJyYXksIGxhYmVsKTtcbn1cblxuZnVuY3Rpb24gUHJvbWlzZUhhc2goQ29uc3RydWN0b3IsIG9iamVjdCwgbGFiZWwpIHtcbiAgdGhpcy5fc3VwZXJDb25zdHJ1Y3RvcihDb25zdHJ1Y3Rvciwgb2JqZWN0LCB0cnVlLCBsYWJlbCk7XG59XG5cblByb21pc2VIYXNoLnByb3RvdHlwZSA9IG9fY3JlYXRlKEVudW1lcmF0b3IucHJvdG90eXBlKTtcblByb21pc2VIYXNoLnByb3RvdHlwZS5fc3VwZXJDb25zdHJ1Y3RvciA9IEVudW1lcmF0b3I7XG5Qcm9taXNlSGFzaC5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX3Jlc3VsdCA9IHt9O1xufTtcblxuUHJvbWlzZUhhc2gucHJvdG90eXBlLl92YWxpZGF0ZUlucHV0ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dCAmJiB0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnO1xufTtcblxuUHJvbWlzZUhhc2gucHJvdG90eXBlLl92YWxpZGF0aW9uRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ1Byb21pc2UuaGFzaCBtdXN0IGJlIGNhbGxlZCB3aXRoIGFuIG9iamVjdCcpO1xufTtcblxuUHJvbWlzZUhhc2gucHJvdG90eXBlLl9lbnVtZXJhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBlbnVtZXJhdG9yID0gdGhpcztcbiAgdmFyIHByb21pc2UgPSBlbnVtZXJhdG9yLnByb21pc2U7XG4gIHZhciBpbnB1dCA9IGVudW1lcmF0b3IuX2lucHV0O1xuICB2YXIgcmVzdWx0cyA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBpbnB1dCkge1xuICAgIGlmIChwcm9taXNlLl9zdGF0ZSA9PT0gUEVORElORyAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaW5wdXQsIGtleSkpIHtcbiAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgIHBvc2l0aW9uOiBrZXksXG4gICAgICAgIGVudHJ5OiBpbnB1dFtrZXldXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gcmVzdWx0cy5sZW5ndGg7XG4gIGVudW1lcmF0b3IuX3JlbWFpbmluZyA9IGxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IHVuZGVmaW5lZDtcblxuICBmb3IgKHZhciBpID0gMDsgcHJvbWlzZS5fc3RhdGUgPT09IFBFTkRJTkcgJiYgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICBlbnVtZXJhdG9yLl9lYWNoRW50cnkocmVzdWx0LmVudHJ5LCByZXN1bHQucG9zaXRpb24pO1xuICB9XG59O1xuXG4vKipcbiAgYFJTVlAuaGFzaGAgaXMgc2ltaWxhciB0byBgUlNWUC5hbGxgLCBidXQgdGFrZXMgYW4gb2JqZWN0IGluc3RlYWQgb2YgYW4gYXJyYXlcbiAgZm9yIGl0cyBgcHJvbWlzZXNgIGFyZ3VtZW50LlxuXG4gIFJldHVybnMgYSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gYWxsIHRoZSBnaXZlbiBwcm9taXNlcyBoYXZlIGJlZW5cbiAgZnVsZmlsbGVkLCBvciByZWplY3RlZCBpZiBhbnkgb2YgdGhlbSBiZWNvbWUgcmVqZWN0ZWQuIFRoZSByZXR1cm5lZCBwcm9taXNlXG4gIGlzIGZ1bGZpbGxlZCB3aXRoIGEgaGFzaCB0aGF0IGhhcyB0aGUgc2FtZSBrZXkgbmFtZXMgYXMgdGhlIGBwcm9taXNlc2Agb2JqZWN0XG4gIGFyZ3VtZW50LiBJZiBhbnkgb2YgdGhlIHZhbHVlcyBpbiB0aGUgb2JqZWN0IGFyZSBub3QgcHJvbWlzZXMsIHRoZXkgd2lsbFxuICBzaW1wbHkgYmUgY29waWVkIG92ZXIgdG8gdGhlIGZ1bGZpbGxlZCBvYmplY3QuXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlcyA9IHtcbiAgICBteVByb21pc2U6IFJTVlAucmVzb2x2ZSgxKSxcbiAgICB5b3VyUHJvbWlzZTogUlNWUC5yZXNvbHZlKDIpLFxuICAgIHRoZWlyUHJvbWlzZTogUlNWUC5yZXNvbHZlKDMpLFxuICAgIG5vdEFQcm9taXNlOiA0XG4gIH07XG5cbiAgUlNWUC5oYXNoKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKGhhc2gpe1xuICAgIC8vIGhhc2ggaGVyZSBpcyBhbiBvYmplY3QgdGhhdCBsb29rcyBsaWtlOlxuICAgIC8vIHtcbiAgICAvLyAgIG15UHJvbWlzZTogMSxcbiAgICAvLyAgIHlvdXJQcm9taXNlOiAyLFxuICAgIC8vICAgdGhlaXJQcm9taXNlOiAzLFxuICAgIC8vICAgbm90QVByb21pc2U6IDRcbiAgICAvLyB9XG4gIH0pO1xuICBgYGBgXG5cbiAgSWYgYW55IG9mIHRoZSBgcHJvbWlzZXNgIGdpdmVuIHRvIGBSU1ZQLmhhc2hgIGFyZSByZWplY3RlZCwgdGhlIGZpcnN0IHByb21pc2VcbiAgdGhhdCBpcyByZWplY3RlZCB3aWxsIGJlIGdpdmVuIGFzIHRoZSByZWFzb24gdG8gdGhlIHJlamVjdGlvbiBoYW5kbGVyLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZXMgPSB7XG4gICAgbXlQcm9taXNlOiBSU1ZQLnJlc29sdmUoMSksXG4gICAgcmVqZWN0ZWRQcm9taXNlOiBSU1ZQLnJlamVjdChuZXcgRXJyb3IoJ3JlamVjdGVkUHJvbWlzZScpKSxcbiAgICBhbm90aGVyUmVqZWN0ZWRQcm9taXNlOiBSU1ZQLnJlamVjdChuZXcgRXJyb3IoJ2Fub3RoZXJSZWplY3RlZFByb21pc2UnKSksXG4gIH07XG5cbiAgUlNWUC5oYXNoKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKGhhc2gpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zIGJlY2F1c2UgdGhlcmUgYXJlIHJlamVjdGVkIHByb21pc2VzIVxuICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ3JlamVjdGVkUHJvbWlzZSdcbiAgfSk7XG4gIGBgYFxuXG4gIEFuIGltcG9ydGFudCBub3RlOiBgUlNWUC5oYXNoYCBpcyBpbnRlbmRlZCBmb3IgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzIHRoYXRcbiAgYXJlIGp1c3QgYSBzZXQgb2Yga2V5cyBhbmQgdmFsdWVzLiBgUlNWUC5oYXNoYCB3aWxsIE5PVCBwcmVzZXJ2ZSBwcm90b3R5cGVcbiAgY2hhaW5zLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBmdW5jdGlvbiBNeUNvbnN0cnVjdG9yKCl7XG4gICAgdGhpcy5leGFtcGxlID0gUlNWUC5yZXNvbHZlKCdFeGFtcGxlJyk7XG4gIH1cblxuICBNeUNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IHtcbiAgICBwcm90b1Byb3BlcnR5OiBSU1ZQLnJlc29sdmUoJ1Byb3RvIFByb3BlcnR5JylcbiAgfTtcblxuICBsZXQgbXlPYmplY3QgPSBuZXcgTXlDb25zdHJ1Y3RvcigpO1xuXG4gIFJTVlAuaGFzaChteU9iamVjdCkudGhlbihmdW5jdGlvbihoYXNoKXtcbiAgICAvLyBwcm90b1Byb3BlcnR5IHdpbGwgbm90IGJlIHByZXNlbnQsIGluc3RlYWQgeW91IHdpbGwganVzdCBoYXZlIGFuXG4gICAgLy8gb2JqZWN0IHRoYXQgbG9va3MgbGlrZTpcbiAgICAvLyB7XG4gICAgLy8gICBleGFtcGxlOiAnRXhhbXBsZSdcbiAgICAvLyB9XG4gICAgLy9cbiAgICAvLyBoYXNoLmhhc093blByb3BlcnR5KCdwcm90b1Byb3BlcnR5Jyk7IC8vIGZhbHNlXG4gICAgLy8gJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiBoYXNoLnByb3RvUHJvcGVydHlcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgaGFzaFxuICBAc3RhdGljXG4gIEBmb3IgUlNWUFxuICBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gIEBwYXJhbSB7U3RyaW5nfSBsYWJlbCBvcHRpb25hbCBzdHJpbmcgdGhhdCBkZXNjcmliZXMgdGhlIHByb21pc2UuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aGVuIGFsbCBwcm9wZXJ0aWVzIG9mIGBwcm9taXNlc2BcbiAgaGF2ZSBiZWVuIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQgaWYgYW55IG9mIHRoZW0gYmVjb21lIHJlamVjdGVkLlxuKi9cbmZ1bmN0aW9uIGhhc2gob2JqZWN0LCBsYWJlbCkge1xuICByZXR1cm4gbmV3IFByb21pc2VIYXNoKFByb21pc2UsIG9iamVjdCwgbGFiZWwpLnByb21pc2U7XG59XG5cbmZ1bmN0aW9uIEhhc2hTZXR0bGVkKENvbnN0cnVjdG9yLCBvYmplY3QsIGxhYmVsKSB7XG4gIHRoaXMuX3N1cGVyQ29uc3RydWN0b3IoQ29uc3RydWN0b3IsIG9iamVjdCwgZmFsc2UsIGxhYmVsKTtcbn1cblxuSGFzaFNldHRsZWQucHJvdG90eXBlID0gb19jcmVhdGUoUHJvbWlzZUhhc2gucHJvdG90eXBlKTtcbkhhc2hTZXR0bGVkLnByb3RvdHlwZS5fc3VwZXJDb25zdHJ1Y3RvciA9IEVudW1lcmF0b3I7XG5IYXNoU2V0dGxlZC5wcm90b3R5cGUuX21ha2VSZXN1bHQgPSBtYWtlU2V0dGxlZFJlc3VsdDtcblxuSGFzaFNldHRsZWQucHJvdG90eXBlLl92YWxpZGF0aW9uRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ2hhc2hTZXR0bGVkIG11c3QgYmUgY2FsbGVkIHdpdGggYW4gb2JqZWN0Jyk7XG59O1xuXG4vKipcbiAgYFJTVlAuaGFzaFNldHRsZWRgIGlzIHNpbWlsYXIgdG8gYFJTVlAuYWxsU2V0dGxlZGAsIGJ1dCB0YWtlcyBhbiBvYmplY3RcbiAgaW5zdGVhZCBvZiBhbiBhcnJheSBmb3IgaXRzIGBwcm9taXNlc2AgYXJndW1lbnQuXG5cbiAgVW5saWtlIGBSU1ZQLmFsbGAgb3IgYFJTVlAuaGFzaGAsIHdoaWNoIGltcGxlbWVudCBhIGZhaWwtZmFzdCBtZXRob2QsXG4gIGJ1dCBsaWtlIGBSU1ZQLmFsbFNldHRsZWRgLCBgaGFzaFNldHRsZWRgIHdhaXRzIHVudGlsIGFsbCB0aGVcbiAgY29uc3RpdHVlbnQgcHJvbWlzZXMgaGF2ZSByZXR1cm5lZCBhbmQgdGhlbiBzaG93cyB5b3UgYWxsIHRoZSByZXN1bHRzXG4gIHdpdGggdGhlaXIgc3RhdGVzIGFuZCB2YWx1ZXMvcmVhc29ucy4gVGhpcyBpcyB1c2VmdWwgaWYgeW91IHdhbnQgdG9cbiAgaGFuZGxlIG11bHRpcGxlIHByb21pc2VzJyBmYWlsdXJlIHN0YXRlcyB0b2dldGhlciBhcyBhIHNldC5cblxuICBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aGVuIGFsbCB0aGUgZ2l2ZW4gcHJvbWlzZXMgaGF2ZSBiZWVuXG4gIHNldHRsZWQsIG9yIHJlamVjdGVkIGlmIHRoZSBwYXNzZWQgcGFyYW1ldGVycyBhcmUgaW52YWxpZC5cblxuICBUaGUgcmV0dXJuZWQgcHJvbWlzZSBpcyBmdWxmaWxsZWQgd2l0aCBhIGhhc2ggdGhhdCBoYXMgdGhlIHNhbWUga2V5IG5hbWVzIGFzXG4gIHRoZSBgcHJvbWlzZXNgIG9iamVjdCBhcmd1bWVudC4gSWYgYW55IG9mIHRoZSB2YWx1ZXMgaW4gdGhlIG9iamVjdCBhcmUgbm90XG4gIHByb21pc2VzLCB0aGV5IHdpbGwgYmUgY29waWVkIG92ZXIgdG8gdGhlIGZ1bGZpbGxlZCBvYmplY3QgYW5kIG1hcmtlZCB3aXRoIHN0YXRlXG4gICdmdWxmaWxsZWQnLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZXMgPSB7XG4gICAgbXlQcm9taXNlOiBSU1ZQLlByb21pc2UucmVzb2x2ZSgxKSxcbiAgICB5b3VyUHJvbWlzZTogUlNWUC5Qcm9taXNlLnJlc29sdmUoMiksXG4gICAgdGhlaXJQcm9taXNlOiBSU1ZQLlByb21pc2UucmVzb2x2ZSgzKSxcbiAgICBub3RBUHJvbWlzZTogNFxuICB9O1xuXG4gIFJTVlAuaGFzaFNldHRsZWQocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oaGFzaCl7XG4gICAgLy8gaGFzaCBoZXJlIGlzIGFuIG9iamVjdCB0aGF0IGxvb2tzIGxpa2U6XG4gICAgLy8ge1xuICAgIC8vICAgbXlQcm9taXNlOiB7IHN0YXRlOiAnZnVsZmlsbGVkJywgdmFsdWU6IDEgfSxcbiAgICAvLyAgIHlvdXJQcm9taXNlOiB7IHN0YXRlOiAnZnVsZmlsbGVkJywgdmFsdWU6IDIgfSxcbiAgICAvLyAgIHRoZWlyUHJvbWlzZTogeyBzdGF0ZTogJ2Z1bGZpbGxlZCcsIHZhbHVlOiAzIH0sXG4gICAgLy8gICBub3RBUHJvbWlzZTogeyBzdGF0ZTogJ2Z1bGZpbGxlZCcsIHZhbHVlOiA0IH1cbiAgICAvLyB9XG4gIH0pO1xuICBgYGBcblxuICBJZiBhbnkgb2YgdGhlIGBwcm9taXNlc2AgZ2l2ZW4gdG8gYFJTVlAuaGFzaGAgYXJlIHJlamVjdGVkLCB0aGUgc3RhdGUgd2lsbFxuICBiZSBzZXQgdG8gJ3JlamVjdGVkJyBhbmQgdGhlIHJlYXNvbiBmb3IgcmVqZWN0aW9uIHByb3ZpZGVkLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZXMgPSB7XG4gICAgbXlQcm9taXNlOiBSU1ZQLlByb21pc2UucmVzb2x2ZSgxKSxcbiAgICByZWplY3RlZFByb21pc2U6IFJTVlAuUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdyZWplY3Rpb24nKSksXG4gICAgYW5vdGhlclJlamVjdGVkUHJvbWlzZTogUlNWUC5Qcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ21vcmUgcmVqZWN0aW9uJykpLFxuICB9O1xuXG4gIFJTVlAuaGFzaFNldHRsZWQocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oaGFzaCl7XG4gICAgLy8gaGFzaCBoZXJlIGlzIGFuIG9iamVjdCB0aGF0IGxvb2tzIGxpa2U6XG4gICAgLy8ge1xuICAgIC8vICAgbXlQcm9taXNlOiAgICAgICAgICAgICAgeyBzdGF0ZTogJ2Z1bGZpbGxlZCcsIHZhbHVlOiAxIH0sXG4gICAgLy8gICByZWplY3RlZFByb21pc2U6ICAgICAgICB7IHN0YXRlOiAncmVqZWN0ZWQnLCByZWFzb246IEVycm9yIH0sXG4gICAgLy8gICBhbm90aGVyUmVqZWN0ZWRQcm9taXNlOiB7IHN0YXRlOiAncmVqZWN0ZWQnLCByZWFzb246IEVycm9yIH0sXG4gICAgLy8gfVxuICAgIC8vIE5vdGUgdGhhdCBmb3IgcmVqZWN0ZWRQcm9taXNlLCByZWFzb24ubWVzc2FnZSA9PSAncmVqZWN0aW9uJyxcbiAgICAvLyBhbmQgZm9yIGFub3RoZXJSZWplY3RlZFByb21pc2UsIHJlYXNvbi5tZXNzYWdlID09ICdtb3JlIHJlamVjdGlvbicuXG4gIH0pO1xuICBgYGBcblxuICBBbiBpbXBvcnRhbnQgbm90ZTogYFJTVlAuaGFzaFNldHRsZWRgIGlzIGludGVuZGVkIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMgdGhhdFxuICBhcmUganVzdCBhIHNldCBvZiBrZXlzIGFuZCB2YWx1ZXMuIGBSU1ZQLmhhc2hTZXR0bGVkYCB3aWxsIE5PVCBwcmVzZXJ2ZSBwcm90b3R5cGVcbiAgY2hhaW5zLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBmdW5jdGlvbiBNeUNvbnN0cnVjdG9yKCl7XG4gICAgdGhpcy5leGFtcGxlID0gUlNWUC5Qcm9taXNlLnJlc29sdmUoJ0V4YW1wbGUnKTtcbiAgfVxuXG4gIE15Q29uc3RydWN0b3IucHJvdG90eXBlID0ge1xuICAgIHByb3RvUHJvcGVydHk6IFJTVlAuUHJvbWlzZS5yZXNvbHZlKCdQcm90byBQcm9wZXJ0eScpXG4gIH07XG5cbiAgbGV0IG15T2JqZWN0ID0gbmV3IE15Q29uc3RydWN0b3IoKTtcblxuICBSU1ZQLmhhc2hTZXR0bGVkKG15T2JqZWN0KS50aGVuKGZ1bmN0aW9uKGhhc2gpe1xuICAgIC8vIHByb3RvUHJvcGVydHkgd2lsbCBub3QgYmUgcHJlc2VudCwgaW5zdGVhZCB5b3Ugd2lsbCBqdXN0IGhhdmUgYW5cbiAgICAvLyBvYmplY3QgdGhhdCBsb29rcyBsaWtlOlxuICAgIC8vIHtcbiAgICAvLyAgIGV4YW1wbGU6IHsgc3RhdGU6ICdmdWxmaWxsZWQnLCB2YWx1ZTogJ0V4YW1wbGUnIH1cbiAgICAvLyB9XG4gICAgLy9cbiAgICAvLyBoYXNoLmhhc093blByb3BlcnR5KCdwcm90b1Byb3BlcnR5Jyk7IC8vIGZhbHNlXG4gICAgLy8gJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiBoYXNoLnByb3RvUHJvcGVydHlcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgaGFzaFNldHRsZWRcbiAgQGZvciBSU1ZQXG4gIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyB0aGF0IGRlc2NyaWJlcyB0aGUgcHJvbWlzZS5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gd2hlbiBhbGwgcHJvcGVydGllcyBvZiBgcHJvbWlzZXNgXG4gIGhhdmUgYmVlbiBzZXR0bGVkLlxuICBAc3RhdGljXG4qL1xuZnVuY3Rpb24gaGFzaFNldHRsZWQob2JqZWN0LCBsYWJlbCkge1xuICByZXR1cm4gbmV3IEhhc2hTZXR0bGVkKFByb21pc2UsIG9iamVjdCwgbGFiZWwpLnByb21pc2U7XG59XG5cbmZ1bmN0aW9uIHJldGhyb3cocmVhc29uKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHRocm93IHJlYXNvbjtcbiAgfSk7XG4gIHRocm93IHJlYXNvbjtcbn1cblxuLyoqXG4gIGBSU1ZQLmRlZmVyYCByZXR1cm5zIGFuIG9iamVjdCBzaW1pbGFyIHRvIGpRdWVyeSdzIGAkLkRlZmVycmVkYC5cbiAgYFJTVlAuZGVmZXJgIHNob3VsZCBiZSB1c2VkIHdoZW4gcG9ydGluZyBvdmVyIGNvZGUgcmVsaWFudCBvbiBgJC5EZWZlcnJlZGAnc1xuICBpbnRlcmZhY2UuIE5ldyBjb2RlIHNob3VsZCB1c2UgdGhlIGBSU1ZQLlByb21pc2VgIGNvbnN0cnVjdG9yIGluc3RlYWQuXG5cbiAgVGhlIG9iamVjdCByZXR1cm5lZCBmcm9tIGBSU1ZQLmRlZmVyYCBpcyBhIHBsYWluIG9iamVjdCB3aXRoIHRocmVlIHByb3BlcnRpZXM6XG5cbiAgKiBwcm9taXNlIC0gYW4gYFJTVlAuUHJvbWlzZWAuXG4gICogcmVqZWN0IC0gYSBmdW5jdGlvbiB0aGF0IGNhdXNlcyB0aGUgYHByb21pc2VgIHByb3BlcnR5IG9uIHRoaXMgb2JqZWN0IHRvXG4gICAgYmVjb21lIHJlamVjdGVkXG4gICogcmVzb2x2ZSAtIGEgZnVuY3Rpb24gdGhhdCBjYXVzZXMgdGhlIGBwcm9taXNlYCBwcm9wZXJ0eSBvbiB0aGlzIG9iamVjdCB0b1xuICAgIGJlY29tZSBmdWxmaWxsZWQuXG5cbiAgRXhhbXBsZTpcblxuICAgYGBgamF2YXNjcmlwdFxuICAgbGV0IGRlZmVycmVkID0gUlNWUC5kZWZlcigpO1xuXG4gICBkZWZlcnJlZC5yZXNvbHZlKFwiU3VjY2VzcyFcIik7XG5cbiAgIGRlZmVycmVkLnByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgIC8vIHZhbHVlIGhlcmUgaXMgXCJTdWNjZXNzIVwiXG4gICB9KTtcbiAgIGBgYFxuXG4gIEBtZXRob2QgZGVmZXJcbiAgQHN0YXRpY1xuICBAZm9yIFJTVlBcbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgbGFiZWxpbmcgdGhlIHByb21pc2UuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBkZWZlcihsYWJlbCkge1xuICB2YXIgZGVmZXJyZWQgPSB7IHJlc29sdmU6IHVuZGVmaW5lZCwgcmVqZWN0OiB1bmRlZmluZWQgfTtcblxuICBkZWZlcnJlZC5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGRlZmVycmVkLnJlc29sdmUgPSByZXNvbHZlO1xuICAgIGRlZmVycmVkLnJlamVjdCA9IHJlamVjdDtcbiAgfSwgbGFiZWwpO1xuXG4gIHJldHVybiBkZWZlcnJlZDtcbn1cblxuLyoqXG4gYFJTVlAubWFwYCBpcyBzaW1pbGFyIHRvIEphdmFTY3JpcHQncyBuYXRpdmUgYG1hcGAgbWV0aG9kLCBleGNlcHQgdGhhdCBpdFxuICB3YWl0cyBmb3IgYWxsIHByb21pc2VzIHRvIGJlY29tZSBmdWxmaWxsZWQgYmVmb3JlIHJ1bm5pbmcgdGhlIGBtYXBGbmAgb25cbiAgZWFjaCBpdGVtIGluIGdpdmVuIHRvIGBwcm9taXNlc2AuIGBSU1ZQLm1hcGAgcmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsXG4gIGJlY29tZSBmdWxmaWxsZWQgd2l0aCB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYG1hcEZuYCBvbiB0aGUgdmFsdWVzIHRoZSBwcm9taXNlc1xuICBiZWNvbWUgZnVsZmlsbGVkIHdpdGguXG5cbiAgRm9yIGV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuXG4gIGxldCBwcm9taXNlMSA9IFJTVlAucmVzb2x2ZSgxKTtcbiAgbGV0IHByb21pc2UyID0gUlNWUC5yZXNvbHZlKDIpO1xuICBsZXQgcHJvbWlzZTMgPSBSU1ZQLnJlc29sdmUoMyk7XG4gIGxldCBwcm9taXNlcyA9IFsgcHJvbWlzZTEsIHByb21pc2UyLCBwcm9taXNlMyBdO1xuXG4gIGxldCBtYXBGbiA9IGZ1bmN0aW9uKGl0ZW0pe1xuICAgIHJldHVybiBpdGVtICsgMTtcbiAgfTtcblxuICBSU1ZQLm1hcChwcm9taXNlcywgbWFwRm4pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyByZXN1bHQgaXMgWyAyLCAzLCA0IF1cbiAgfSk7XG4gIGBgYFxuXG4gIElmIGFueSBvZiB0aGUgYHByb21pc2VzYCBnaXZlbiB0byBgUlNWUC5tYXBgIGFyZSByZWplY3RlZCwgdGhlIGZpcnN0IHByb21pc2VcbiAgdGhhdCBpcyByZWplY3RlZCB3aWxsIGJlIGdpdmVuIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSByZXR1cm5lZCBwcm9taXNlJ3NcbiAgcmVqZWN0aW9uIGhhbmRsZXIuIEZvciBleGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gUlNWUC5yZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSBSU1ZQLnJlamVjdChuZXcgRXJyb3IoJzInKSk7XG4gIGxldCBwcm9taXNlMyA9IFJTVlAucmVqZWN0KG5ldyBFcnJvcignMycpKTtcbiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07XG5cbiAgbGV0IG1hcEZuID0gZnVuY3Rpb24oaXRlbSl7XG4gICAgcmV0dXJuIGl0ZW0gKyAxO1xuICB9O1xuXG4gIFJTVlAubWFwKHByb21pc2VzLCBtYXBGbikudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gQ29kZSBoZXJlIG5ldmVyIHJ1bnMgYmVjYXVzZSB0aGVyZSBhcmUgcmVqZWN0ZWQgcHJvbWlzZXMhXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnMidcbiAgfSk7XG4gIGBgYFxuXG4gIGBSU1ZQLm1hcGAgd2lsbCBhbHNvIHdhaXQgaWYgYSBwcm9taXNlIGlzIHJldHVybmVkIGZyb20gYG1hcEZuYC4gRm9yIGV4YW1wbGUsXG4gIHNheSB5b3Ugd2FudCB0byBnZXQgYWxsIGNvbW1lbnRzIGZyb20gYSBzZXQgb2YgYmxvZyBwb3N0cywgYnV0IHlvdSBuZWVkXG4gIHRoZSBibG9nIHBvc3RzIGZpcnN0IGJlY2F1c2UgdGhleSBjb250YWluIGEgdXJsIHRvIHRob3NlIGNvbW1lbnRzLlxuXG4gIGBgYGphdnNjcmlwdFxuXG4gIGxldCBtYXBGbiA9IGZ1bmN0aW9uKGJsb2dQb3N0KXtcbiAgICAvLyBnZXRDb21tZW50cyBkb2VzIHNvbWUgYWpheCBhbmQgcmV0dXJucyBhbiBSU1ZQLlByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWRcbiAgICAvLyB3aXRoIHNvbWUgY29tbWVudHMgZGF0YVxuICAgIHJldHVybiBnZXRDb21tZW50cyhibG9nUG9zdC5jb21tZW50c191cmwpO1xuICB9O1xuXG4gIC8vIGdldEJsb2dQb3N0cyBkb2VzIHNvbWUgYWpheCBhbmQgcmV0dXJucyBhbiBSU1ZQLlByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWRcbiAgLy8gd2l0aCBzb21lIGJsb2cgcG9zdCBkYXRhXG4gIFJTVlAubWFwKGdldEJsb2dQb3N0cygpLCBtYXBGbikudGhlbihmdW5jdGlvbihjb21tZW50cyl7XG4gICAgLy8gY29tbWVudHMgaXMgdGhlIHJlc3VsdCBvZiBhc2tpbmcgdGhlIHNlcnZlciBmb3IgdGhlIGNvbW1lbnRzXG4gICAgLy8gb2YgYWxsIGJsb2cgcG9zdHMgcmV0dXJuZWQgZnJvbSBnZXRCbG9nUG9zdHMoKVxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCBtYXBcbiAgQHN0YXRpY1xuICBAZm9yIFJTVlBcbiAgQHBhcmFtIHtBcnJheX0gcHJvbWlzZXNcbiAgQHBhcmFtIHtGdW5jdGlvbn0gbWFwRm4gZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGVhY2ggZnVsZmlsbGVkIHByb21pc2UuXG4gIEBwYXJhbSB7U3RyaW5nfSBsYWJlbCBvcHRpb25hbCBzdHJpbmcgZm9yIGxhYmVsaW5nIHRoZSBwcm9taXNlLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCB0aGUgcmVzdWx0IG9mIGNhbGxpbmdcbiAgYG1hcEZuYCBvbiBlYWNoIGZ1bGZpbGxlZCBwcm9taXNlIG9yIHZhbHVlIHdoZW4gdGhleSBiZWNvbWUgZnVsZmlsbGVkLlxuICAgVGhlIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCBpZiBhbnkgb2YgdGhlIGdpdmVuIGBwcm9taXNlc2AgYmVjb21lIHJlamVjdGVkLlxuICBAc3RhdGljXG4qL1xuZnVuY3Rpb24gbWFwKHByb21pc2VzLCBtYXBGbiwgbGFiZWwpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzLCBsYWJlbCkudGhlbihmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgaWYgKCFpc0Z1bmN0aW9uKG1hcEZuKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBmdW5jdGlvbiBhcyBtYXAncyBzZWNvbmQgYXJndW1lbnQuXCIpO1xuICAgIH1cblxuICAgIHZhciBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHZhciByZXN1bHRzID0gbmV3IEFycmF5KGxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRzW2ldID0gbWFwRm4odmFsdWVzW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocmVzdWx0cywgbGFiZWwpO1xuICB9KTtcbn1cblxuLyoqXG4gIFRoaXMgaXMgYSBjb252ZW5pZW50IGFsaWFzIGZvciBgUlNWUC5Qcm9taXNlLnJlc29sdmVgLlxuXG4gIEBtZXRob2QgcmVzb2x2ZVxuICBAc3RhdGljXG4gIEBmb3IgUlNWUFxuICBAcGFyYW0geyp9IHZhbHVlIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZXNvbHZlZCB3aXRoXG4gIEBwYXJhbSB7U3RyaW5nfSBsYWJlbCBvcHRpb25hbCBzdHJpbmcgZm9yIGlkZW50aWZ5aW5nIHRoZSByZXR1cm5lZCBwcm9taXNlLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSB0aGF0IHdpbGwgYmVjb21lIGZ1bGZpbGxlZCB3aXRoIHRoZSBnaXZlblxuICBgdmFsdWVgXG4qL1xuZnVuY3Rpb24gcmVzb2x2ZSQyKHZhbHVlLCBsYWJlbCkge1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLCBsYWJlbCk7XG59XG5cbi8qKlxuICBUaGlzIGlzIGEgY29udmVuaWVudCBhbGlhcyBmb3IgYFJTVlAuUHJvbWlzZS5yZWplY3RgLlxuXG4gIEBtZXRob2QgcmVqZWN0XG4gIEBzdGF0aWNcbiAgQGZvciBSU1ZQXG4gIEBwYXJhbSB7Kn0gcmVhc29uIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoLlxuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIGZvciBpZGVudGlmeWluZyB0aGUgcmV0dXJuZWQgcHJvbWlzZS5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgZ2l2ZW4gYHJlYXNvbmAuXG4qL1xuZnVuY3Rpb24gcmVqZWN0JDIocmVhc29uLCBsYWJlbCkge1xuICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uLCBsYWJlbCk7XG59XG5cbi8qKlxuIGBSU1ZQLmZpbHRlcmAgaXMgc2ltaWxhciB0byBKYXZhU2NyaXB0J3MgbmF0aXZlIGBmaWx0ZXJgIG1ldGhvZCwgZXhjZXB0IHRoYXQgaXRcbiAgd2FpdHMgZm9yIGFsbCBwcm9taXNlcyB0byBiZWNvbWUgZnVsZmlsbGVkIGJlZm9yZSBydW5uaW5nIHRoZSBgZmlsdGVyRm5gIG9uXG4gIGVhY2ggaXRlbSBpbiBnaXZlbiB0byBgcHJvbWlzZXNgLiBgUlNWUC5maWx0ZXJgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbFxuICBiZWNvbWUgZnVsZmlsbGVkIHdpdGggdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBmaWx0ZXJGbmAgb24gdGhlIHZhbHVlcyB0aGVcbiAgcHJvbWlzZXMgYmVjb21lIGZ1bGZpbGxlZCB3aXRoLlxuXG4gIEZvciBleGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcblxuICBsZXQgcHJvbWlzZTEgPSBSU1ZQLnJlc29sdmUoMSk7XG4gIGxldCBwcm9taXNlMiA9IFJTVlAucmVzb2x2ZSgyKTtcbiAgbGV0IHByb21pc2UzID0gUlNWUC5yZXNvbHZlKDMpO1xuXG4gIGxldCBwcm9taXNlcyA9IFtwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzXTtcblxuICBsZXQgZmlsdGVyRm4gPSBmdW5jdGlvbihpdGVtKXtcbiAgICByZXR1cm4gaXRlbSA+IDE7XG4gIH07XG5cbiAgUlNWUC5maWx0ZXIocHJvbWlzZXMsIGZpbHRlckZuKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgLy8gcmVzdWx0IGlzIFsgMiwgMyBdXG4gIH0pO1xuICBgYGBcblxuICBJZiBhbnkgb2YgdGhlIGBwcm9taXNlc2AgZ2l2ZW4gdG8gYFJTVlAuZmlsdGVyYCBhcmUgcmVqZWN0ZWQsIHRoZSBmaXJzdCBwcm9taXNlXG4gIHRoYXQgaXMgcmVqZWN0ZWQgd2lsbCBiZSBnaXZlbiBhcyBhbiBhcmd1bWVudCB0byB0aGUgcmV0dXJuZWQgcHJvbWlzZSdzXG4gIHJlamVjdGlvbiBoYW5kbGVyLiBGb3IgZXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IFJTVlAucmVzb2x2ZSgxKTtcbiAgbGV0IHByb21pc2UyID0gUlNWUC5yZWplY3QobmV3IEVycm9yKCcyJykpO1xuICBsZXQgcHJvbWlzZTMgPSBSU1ZQLnJlamVjdChuZXcgRXJyb3IoJzMnKSk7XG4gIGxldCBwcm9taXNlcyA9IFsgcHJvbWlzZTEsIHByb21pc2UyLCBwcm9taXNlMyBdO1xuXG4gIGxldCBmaWx0ZXJGbiA9IGZ1bmN0aW9uKGl0ZW0pe1xuICAgIHJldHVybiBpdGVtID4gMTtcbiAgfTtcblxuICBSU1ZQLmZpbHRlcihwcm9taXNlcywgZmlsdGVyRm4pLnRoZW4oZnVuY3Rpb24oYXJyYXkpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zIGJlY2F1c2UgdGhlcmUgYXJlIHJlamVjdGVkIHByb21pc2VzIVxuICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJzInXG4gIH0pO1xuICBgYGBcblxuICBgUlNWUC5maWx0ZXJgIHdpbGwgYWxzbyB3YWl0IGZvciBhbnkgcHJvbWlzZXMgcmV0dXJuZWQgZnJvbSBgZmlsdGVyRm5gLlxuICBGb3IgaW5zdGFuY2UsIHlvdSBtYXkgd2FudCB0byBmZXRjaCBhIGxpc3Qgb2YgdXNlcnMgdGhlbiByZXR1cm4gYSBzdWJzZXRcbiAgb2YgdGhvc2UgdXNlcnMgYmFzZWQgb24gc29tZSBhc3luY2hyb25vdXMgb3BlcmF0aW9uOlxuXG4gIGBgYGphdmFzY3JpcHRcblxuICBsZXQgYWxpY2UgPSB7IG5hbWU6ICdhbGljZScgfTtcbiAgbGV0IGJvYiAgID0geyBuYW1lOiAnYm9iJyB9O1xuICBsZXQgdXNlcnMgPSBbIGFsaWNlLCBib2IgXTtcblxuICBsZXQgcHJvbWlzZXMgPSB1c2Vycy5tYXAoZnVuY3Rpb24odXNlcil7XG4gICAgcmV0dXJuIFJTVlAucmVzb2x2ZSh1c2VyKTtcbiAgfSk7XG5cbiAgbGV0IGZpbHRlckZuID0gZnVuY3Rpb24odXNlcil7XG4gICAgLy8gSGVyZSwgQWxpY2UgaGFzIHBlcm1pc3Npb25zIHRvIGNyZWF0ZSBhIGJsb2cgcG9zdCwgYnV0IEJvYiBkb2VzIG5vdC5cbiAgICByZXR1cm4gZ2V0UHJpdmlsZWdlc0ZvclVzZXIodXNlcikudGhlbihmdW5jdGlvbihwcml2cyl7XG4gICAgICByZXR1cm4gcHJpdnMuY2FuX2NyZWF0ZV9ibG9nX3Bvc3QgPT09IHRydWU7XG4gICAgfSk7XG4gIH07XG4gIFJTVlAuZmlsdGVyKHByb21pc2VzLCBmaWx0ZXJGbikudGhlbihmdW5jdGlvbih1c2Vycyl7XG4gICAgLy8gdHJ1ZSwgYmVjYXVzZSB0aGUgc2VydmVyIHRvbGQgdXMgb25seSBBbGljZSBjYW4gY3JlYXRlIGEgYmxvZyBwb3N0LlxuICAgIHVzZXJzLmxlbmd0aCA9PT0gMTtcbiAgICAvLyBmYWxzZSwgYmVjYXVzZSBBbGljZSBpcyB0aGUgb25seSB1c2VyIHByZXNlbnQgaW4gYHVzZXJzYFxuICAgIHVzZXJzWzBdID09PSBib2I7XG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIGZpbHRlclxuICBAc3RhdGljXG4gIEBmb3IgUlNWUFxuICBAcGFyYW0ge0FycmF5fSBwcm9taXNlc1xuICBAcGFyYW0ge0Z1bmN0aW9ufSBmaWx0ZXJGbiAtIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBlYWNoIHJlc29sdmVkIHZhbHVlIHRvXG4gIGZpbHRlciB0aGUgZmluYWwgcmVzdWx0cy5cbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBkZXNjcmliaW5nIHRoZSBwcm9taXNlLiBVc2VmdWwgZm9yXG4gIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9XG4qL1xuXG5mdW5jdGlvbiByZXNvbHZlQWxsKHByb21pc2VzLCBsYWJlbCkge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMsIGxhYmVsKTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVNpbmdsZShwcm9taXNlLCBsYWJlbCkge1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHByb21pc2UsIGxhYmVsKS50aGVuKGZ1bmN0aW9uIChwcm9taXNlcykge1xuICAgIHJldHVybiByZXNvbHZlQWxsKHByb21pc2VzLCBsYWJlbCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gZmlsdGVyKHByb21pc2VzLCBmaWx0ZXJGbiwgbGFiZWwpIHtcbiAgdmFyIHByb21pc2UgPSBpc0FycmF5KHByb21pc2VzKSA/IHJlc29sdmVBbGwocHJvbWlzZXMsIGxhYmVsKSA6IHJlc29sdmVTaW5nbGUocHJvbWlzZXMsIGxhYmVsKTtcbiAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgaWYgKCFpc0Z1bmN0aW9uKGZpbHRlckZuKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBmdW5jdGlvbiBhcyBmaWx0ZXIncyBzZWNvbmQgYXJndW1lbnQuXCIpO1xuICAgIH1cblxuICAgIHZhciBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHZhciBmaWx0ZXJlZCA9IG5ldyBBcnJheShsZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgZmlsdGVyZWRbaV0gPSBmaWx0ZXJGbih2YWx1ZXNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXNvbHZlQWxsKGZpbHRlcmVkLCBsYWJlbCkudGhlbihmdW5jdGlvbiAoZmlsdGVyZWQpIHtcbiAgICAgIHZhciByZXN1bHRzID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgICB2YXIgbmV3TGVuZ3RoID0gMDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZmlsdGVyZWRbaV0pIHtcbiAgICAgICAgICByZXN1bHRzW25ld0xlbmd0aF0gPSB2YWx1ZXNbaV07XG4gICAgICAgICAgbmV3TGVuZ3RoKys7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVzdWx0cy5sZW5ndGggPSBuZXdMZW5ndGg7XG5cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0pO1xuICB9KTtcbn1cblxudmFyIGxlbiA9IDA7XG52YXIgdmVydHhOZXh0ID0gdW5kZWZpbmVkO1xuZnVuY3Rpb24gYXNhcChjYWxsYmFjaywgYXJnKSB7XG4gIHF1ZXVlJDFbbGVuXSA9IGNhbGxiYWNrO1xuICBxdWV1ZSQxW2xlbiArIDFdID0gYXJnO1xuICBsZW4gKz0gMjtcbiAgaWYgKGxlbiA9PT0gMikge1xuICAgIC8vIElmIGxlbiBpcyAxLCB0aGF0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byBzY2hlZHVsZSBhbiBhc3luYyBmbHVzaC5cbiAgICAvLyBJZiBhZGRpdGlvbmFsIGNhbGxiYWNrcyBhcmUgcXVldWVkIGJlZm9yZSB0aGUgcXVldWUgaXMgZmx1c2hlZCwgdGhleVxuICAgIC8vIHdpbGwgYmUgcHJvY2Vzc2VkIGJ5IHRoaXMgZmx1c2ggdGhhdCB3ZSBhcmUgc2NoZWR1bGluZy5cbiAgICBzY2hlZHVsZUZsdXNoJDEoKTtcbiAgfVxufVxuXG52YXIgYnJvd3NlcldpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdW5kZWZpbmVkO1xudmFyIGJyb3dzZXJHbG9iYWwgPSBicm93c2VyV2luZG93IHx8IHt9O1xudmFyIEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID0gYnJvd3Nlckdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGJyb3dzZXJHbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBpc05vZGUgPSB0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICh7fSkudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nO1xuXG4vLyB0ZXN0IGZvciB3ZWIgd29ya2VyIGJ1dCBub3QgaW4gSUUxMFxudmFyIGlzV29ya2VyID0gdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgaW1wb3J0U2NyaXB0cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIE1lc3NhZ2VDaGFubmVsICE9PSAndW5kZWZpbmVkJztcblxuLy8gbm9kZVxuZnVuY3Rpb24gdXNlTmV4dFRpY2soKSB7XG4gIHZhciBuZXh0VGljayA9IHByb2Nlc3MubmV4dFRpY2s7XG4gIC8vIG5vZGUgdmVyc2lvbiAwLjEwLnggZGlzcGxheXMgYSBkZXByZWNhdGlvbiB3YXJuaW5nIHdoZW4gbmV4dFRpY2sgaXMgdXNlZCByZWN1cnNpdmVseVxuICAvLyBzZXRJbW1lZGlhdGUgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZCBpbnN0ZWFkXG4gIHZhciB2ZXJzaW9uID0gcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLm1hdGNoKC9eKD86KFxcZCspXFwuKT8oPzooXFxkKylcXC4pPyhcXCp8XFxkKykkLyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZlcnNpb24pICYmIHZlcnNpb25bMV0gPT09ICcwJyAmJiB2ZXJzaW9uWzJdID09PSAnMTAnKSB7XG4gICAgbmV4dFRpY2sgPSBzZXRJbW1lZGlhdGU7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV4dFRpY2soZmx1c2gpO1xuICB9O1xufVxuXG4vLyB2ZXJ0eFxuZnVuY3Rpb24gdXNlVmVydHhUaW1lcigpIHtcbiAgaWYgKHR5cGVvZiB2ZXJ0eE5leHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZlcnR4TmV4dChmbHVzaCk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gdXNlU2V0VGltZW91dCgpO1xufVxuXG5mdW5jdGlvbiB1c2VNdXRhdGlvbk9ic2VydmVyKCkge1xuICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gIHZhciBvYnNlcnZlciA9IG5ldyBCcm93c2VyTXV0YXRpb25PYnNlcnZlcihmbHVzaCk7XG4gIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICBvYnNlcnZlci5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBub2RlLmRhdGEgPSBpdGVyYXRpb25zID0gKytpdGVyYXRpb25zICUgMjtcbiAgfTtcbn1cblxuLy8gd2ViIHdvcmtlclxuZnVuY3Rpb24gdXNlTWVzc2FnZUNoYW5uZWwoKSB7XG4gIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZmx1c2g7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoMCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVzZVNldFRpbWVvdXQoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZmx1c2gsIDEpO1xuICB9O1xufVxuXG52YXIgcXVldWUkMSA9IG5ldyBBcnJheSgxMDAwKTtcblxuZnVuY3Rpb24gZmx1c2goKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICB2YXIgY2FsbGJhY2sgPSBxdWV1ZSQxW2ldO1xuICAgIHZhciBhcmcgPSBxdWV1ZSQxW2kgKyAxXTtcblxuICAgIGNhbGxiYWNrKGFyZyk7XG5cbiAgICBxdWV1ZSQxW2ldID0gdW5kZWZpbmVkO1xuICAgIHF1ZXVlJDFbaSArIDFdID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gYXR0ZW1wdFZlcnRleCgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgciA9IHJlcXVpcmU7XG4gICAgdmFyIHZlcnR4ID0gcigndmVydHgnKTtcbiAgICB2ZXJ0eE5leHQgPSB2ZXJ0eC5ydW5Pbkxvb3AgfHwgdmVydHgucnVuT25Db250ZXh0O1xuICAgIHJldHVybiB1c2VWZXJ0eFRpbWVyKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdXNlU2V0VGltZW91dCgpO1xuICB9XG59XG5cbnZhciBzY2hlZHVsZUZsdXNoJDEgPSB1bmRlZmluZWQ7XG4vLyBEZWNpZGUgd2hhdCBhc3luYyBtZXRob2QgdG8gdXNlIHRvIHRyaWdnZXJpbmcgcHJvY2Vzc2luZyBvZiBxdWV1ZWQgY2FsbGJhY2tzOlxuaWYgKGlzTm9kZSkge1xuICBzY2hlZHVsZUZsdXNoJDEgPSB1c2VOZXh0VGljaygpO1xufSBlbHNlIGlmIChCcm93c2VyTXV0YXRpb25PYnNlcnZlcikge1xuICBzY2hlZHVsZUZsdXNoJDEgPSB1c2VNdXRhdGlvbk9ic2VydmVyKCk7XG59IGVsc2UgaWYgKGlzV29ya2VyKSB7XG4gIHNjaGVkdWxlRmx1c2gkMSA9IHVzZU1lc3NhZ2VDaGFubmVsKCk7XG59IGVsc2UgaWYgKGJyb3dzZXJXaW5kb3cgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICBzY2hlZHVsZUZsdXNoJDEgPSBhdHRlbXB0VmVydGV4KCk7XG59IGVsc2Uge1xuICBzY2hlZHVsZUZsdXNoJDEgPSB1c2VTZXRUaW1lb3V0KCk7XG59XG5cbnZhciBwbGF0Zm9ybSA9IHVuZGVmaW5lZDtcblxuLyogZ2xvYmFsIHNlbGYgKi9cbmlmICh0eXBlb2Ygc2VsZiA9PT0gJ29iamVjdCcpIHtcbiAgcGxhdGZvcm0gPSBzZWxmO1xuXG4gIC8qIGdsb2JhbCBnbG9iYWwgKi9cbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCA9PT0gJ29iamVjdCcpIHtcbiAgICBwbGF0Zm9ybSA9IGdsb2JhbDtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIGdsb2JhbDogYHNlbGZgIG9yIGBnbG9iYWxgIGZvdW5kJyk7XG4gIH1cblxudmFyIF9hc3luYyRmaWx0ZXI7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbi8vIGRlZmF1bHRzXG5cbi8vIHRoZSBkZWZhdWx0IGV4cG9ydCBoZXJlIGlzIGZvciBiYWNrd2FyZHMgY29tcGF0OlxuLy8gICBodHRwczovL2dpdGh1Yi5jb20vdGlsZGVpby9yc3ZwLmpzL2lzc3Vlcy80MzRcbmNvbmZpZy5hc3luYyA9IGFzYXA7XG5jb25maWcuYWZ0ZXIgPSBmdW5jdGlvbiAoY2IpIHtcbiAgcmV0dXJuIHNldFRpbWVvdXQoY2IsIDApO1xufTtcbnZhciBjYXN0ID0gcmVzb2x2ZSQyO1xuXG52YXIgYXN5bmMgPSBmdW5jdGlvbiBhc3luYyhjYWxsYmFjaywgYXJnKSB7XG4gIHJldHVybiBjb25maWcuYXN5bmMoY2FsbGJhY2ssIGFyZyk7XG59O1xuXG5mdW5jdGlvbiBvbigpIHtcbiAgY29uZmlnWydvbiddLmFwcGx5KGNvbmZpZywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gb2ZmKCkge1xuICBjb25maWdbJ29mZiddLmFwcGx5KGNvbmZpZywgYXJndW1lbnRzKTtcbn1cblxuLy8gU2V0IHVwIGluc3RydW1lbnRhdGlvbiB0aHJvdWdoIGB3aW5kb3cuX19QUk9NSVNFX0lOVFJVTUVOVEFUSU9OX19gXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvd1snX19QUk9NSVNFX0lOU1RSVU1FTlRBVElPTl9fJ10gPT09ICdvYmplY3QnKSB7XG4gIHZhciBjYWxsYmFja3MgPSB3aW5kb3dbJ19fUFJPTUlTRV9JTlNUUlVNRU5UQVRJT05fXyddO1xuICBjb25maWd1cmUoJ2luc3RydW1lbnQnLCB0cnVlKTtcbiAgZm9yICh2YXIgZXZlbnROYW1lIGluIGNhbGxiYWNrcykge1xuICAgIGlmIChjYWxsYmFja3MuaGFzT3duUHJvcGVydHkoZXZlbnROYW1lKSkge1xuICAgICAgb24oZXZlbnROYW1lLCBjYWxsYmFja3NbZXZlbnROYW1lXSk7XG4gICAgfVxuICB9XG59dmFyIHJzdnAgPSAoX2FzeW5jJGZpbHRlciA9IHtcbiAgY2FzdDogY2FzdCxcbiAgUHJvbWlzZTogUHJvbWlzZSxcbiAgRXZlbnRUYXJnZXQ6IEV2ZW50VGFyZ2V0LFxuICBhbGw6IGFsbCQxLFxuICBhbGxTZXR0bGVkOiBhbGxTZXR0bGVkLFxuICByYWNlOiByYWNlJDEsXG4gIGhhc2g6IGhhc2gsXG4gIGhhc2hTZXR0bGVkOiBoYXNoU2V0dGxlZCxcbiAgcmV0aHJvdzogcmV0aHJvdyxcbiAgZGVmZXI6IGRlZmVyLFxuICBkZW5vZGVpZnk6IGRlbm9kZWlmeSxcbiAgY29uZmlndXJlOiBjb25maWd1cmUsXG4gIG9uOiBvbixcbiAgb2ZmOiBvZmYsXG4gIHJlc29sdmU6IHJlc29sdmUkMixcbiAgcmVqZWN0OiByZWplY3QkMixcbiAgbWFwOiBtYXBcbn0sIF9kZWZpbmVQcm9wZXJ0eShfYXN5bmMkZmlsdGVyLCAnYXN5bmMnLCBhc3luYyksIF9kZWZpbmVQcm9wZXJ0eShfYXN5bmMkZmlsdGVyLCAnZmlsdGVyJywgLy8gYmFiZWwgc2VlbXMgdG8gZXJyb3IgaWYgYXN5bmMgaXNuJ3QgYSBjb21wdXRlZCBwcm9wIGhlcmUuLi5cbmZpbHRlciksIF9hc3luYyRmaWx0ZXIpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSByc3ZwO1xuZXhwb3J0cy5jYXN0ID0gY2FzdDtcbmV4cG9ydHMuUHJvbWlzZSA9IFByb21pc2U7XG5leHBvcnRzLkV2ZW50VGFyZ2V0ID0gRXZlbnRUYXJnZXQ7XG5leHBvcnRzLmFsbCA9IGFsbCQxO1xuZXhwb3J0cy5hbGxTZXR0bGVkID0gYWxsU2V0dGxlZDtcbmV4cG9ydHMucmFjZSA9IHJhY2UkMTtcbmV4cG9ydHMuaGFzaCA9IGhhc2g7XG5leHBvcnRzLmhhc2hTZXR0bGVkID0gaGFzaFNldHRsZWQ7XG5leHBvcnRzLnJldGhyb3cgPSByZXRocm93O1xuZXhwb3J0cy5kZWZlciA9IGRlZmVyO1xuZXhwb3J0cy5kZW5vZGVpZnkgPSBkZW5vZGVpZnk7XG5leHBvcnRzLmNvbmZpZ3VyZSA9IGNvbmZpZ3VyZTtcbmV4cG9ydHMub24gPSBvbjtcbmV4cG9ydHMub2ZmID0gb2ZmO1xuZXhwb3J0cy5yZXNvbHZlID0gcmVzb2x2ZSQyO1xuZXhwb3J0cy5yZWplY3QgPSByZWplY3QkMjtcbmV4cG9ydHMubWFwID0gbWFwO1xuZXhwb3J0cy5hc3luYyA9IGFzeW5jO1xuZXhwb3J0cy5maWx0ZXIgPSBmaWx0ZXI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yc3ZwLm1hcCJdfQ==\n"]}